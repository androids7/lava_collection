//********************************************************缓冲区********************************************************//
#define TXT_CUSH	0x2000												//缓冲区地址
//-----------------------------------------------------------------------
#ifndef TXT_SIZE
#define TXT_SIZE	4000												//缓冲区长度[变]
#endif
//======================================================================================================================//
struct TEXT																//行信息
{
	int head;															//行地址
	int size;															//行大小
};
//*******************************************************文本链表*******************************************************//
#define TXT_LINK    TXT_CUSH+TXT_SIZE+1									//链表地址
//-----------------------------------------------------------------------
#ifndef TXT_T_SIZE
#define TXT_T_SIZE  100													//表大小[变]
#endif
#define TXT_B_SIZE  TXT_SIZE/2											//块大小
#ifndef TXT_C_SIZE
#define TXT_C_SIZE  256													//临时缓冲区大小[变]
#endif
//-----------------------------------------------------------------------[以下定义值不能变]
#define TXT_SAV_H   0													//保存上一块
#define TXT_SAV_N   1													//保存下一块
#define TXT_LOD_N   2													//载入下一块
#define TXT_LOD_H   3													//载入上一块
//======================================================================================================================//
struct BLOCK_UNIT
{
	char head;															//上一块指针 无:254
	char next;															//下一块指针 无:255
	char start[3];														//文件中的数据起始地址
	char size[2];														//块大小
	char fp;															//块文件句柄
};

struct TXT_BLOCK														//文本链表
{
	char head;															//表头
	char h,n;															//缓冲区头尾指针
	char size;															//当前表大小
	char fp;															//临时文件句柄
	char chg;															//修改标志
	struct BLOCK_UNIT p[TXT_T_SIZE];									//表
};
//********************************************************剪贴板********************************************************//
#define CLI_ADDR    TXT_LINK+TXT_T_SIZE*8+6								//剪贴板地址
//-----------------------------------------------------------------------
#ifndef CLI_SIZE
#define CLI_SIZE    255													//剪切板长度[变]
#endif
//*******************************************************函数检索*******************************************************//
#define SKFUN_TABLE CLI_ADDR+CLI_SIZE									//帮助函数表地址
//-----------------------------------------------------------------------
#define SKFUN_N_LEN 12													//名称长度
#ifndef SKFUN_L_LEN
#define SKFUN_L_LEN 130													//个数[变]
#endif
//-----------------------------------------------------------------------[检索类型定义]
#define SK_NULL     0													//无
#define SK_FUN      1													//函数(不能变)
#define SK_BLANK    2													//空格
#define SK_SEMI     3													//分号(不能变)
#define SK_POINT    4													//点号(不能变)
#define SK_CR       5													//换行
#define SK_SYMBO    6													//语句(不能变)
#define SK_BAO      7													//包含号(<>,"")
//======================================================================================================================//
struct SKFUNUNIT														//基本结构
{
	char n;																//前4 bit:参数个数.后4 bit:检索类型
	char name[SKFUN_N_LEN];												//名称
};
struct SKFUNTABLE														//帮助函数结构
{
	char size;															//大小
	struct SKFUNUNIT dat[SKFUN_L_LEN];									//数据域
};
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//*******************************************************中文输入*******************************************************//
#define PY_MAX      416													//拼音个数
#define PY_ADD      92782												//拼音起始地址[资源重新编译则需要修改该值]
//======================================================================================================================//
struct PY_UNIT
{
	char str[7];														//拼音
	int size;															//同音字个数
	int add;															//gb码地址
};