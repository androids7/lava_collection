//*******************************************************设置系统*******************************************************//
void ConfigRW(int cmd)/*config.dat存取操作[通用]*/
{
	char fp;

	if (ChPath(cpldata))
	{
		Swin("错误！", "无法进入目录", SWIN_ONE);
		return;
	}
START:
	if (!(fp = fopen("config.dat", "r+")))
	{
		if (!(fp = fopen("config.dat", "w+")))
		{
			Swin("错误！", "无法创建config", SWIN_ONE);
			return;
		}
		goto SAVE;
	}
	if (cmd == CON_READ)
	{
		fseek(fp, 0, 2);
		if (ftell(fp) != sizeof(struct CONTABLE0))
		{
			fclose(fp);
			DeleteFile("config.dat");
			goto START;
		}
		rewind(fp);
		fread(cfset, 1, sizeof(struct CONTABLE0), fp);
	}
	else if (cmd == CON_SETE)
	{
SAVE:
		if (fwrite(cfset, 1, sizeof(struct CONTABLE0), fp) != sizeof(struct CONTABLE0))
		{
			Swin("错误！", "写入config错误", SWIN_ONE);
		}
	}
	fclose(fp);
}

#if WQX == 0
/* 设置显示 */
void PrintTem(struct CONTABLE1 &n, int first, int value, int rel)
{
	char v;
	int i;
	char msg[4];

	SetBgColor(3);
	Block(4, 18, 156, 77, 0);
	Rectangle(4, 18, 149, 76, 1);
	TextOut(44, 19, "项  目", 1);
	TextOut(131, 19, "值", 1);
	Block(122, 18, 123, 76, 1);
	Block(4, 30, 149, 31, 1);
	Line(4, 46, 149, 46, 65);
	Line(4, 61, 149, 61, 65);
	for(i = 0; i < 3 && i + first < n.dat[rel].size; i++)
	{
		if (!(v = cfset.dat[rel].tem[first + i].value))
		{
			sprintf(msg, "否");
		}
		else if (v == 1)
		{
			sprintf(msg, "是");
		}
		else if (v == 2)
		{
			if (rel == 3)
			{
				sprintf(msg, cfset.lav);
			}
			else
			{
				sprintf(msg, cfset.fun);
			}
			for (v = 0; v < 3; v++)
			{
				if (!msg[v])
				{
					break;
				}
				else if (msg[v] > 128)
				{
					if (v > 2)
					{
						break;
					}
					v++;
				}
			}
			msg[v] = 0;
		}
		else
		{
			sprintf(msg, "%d", v);
		}
		TextOut(5, i * 15 + 33, n.dat[rel].tem[first + i].name, 1);
		TextOut(136 - strlen(msg) * 3, i * 15 + 33, msg, 1);
	}
	MyBox(151, 18, 156, 76, 1);
	Block(153, (first * 54) / n.dat[rel].size + 20, 154, ((first + i) * 54) / n.dat[rel].size + 20, 1);//进度显示
	Block(124, value * 15 + 32, 148, value * 15 + 45, 2);
}
#else
void PrintTem(struct CONTABLE1 &n, int first, int value, int rel)/*设置显示*/
{
	char v;
	int i;
	char msg[PATH_MAX];

	Block(2, 16, 158, 78, 0);
	Rectangle(3, 17, 150, 77, 1);
	TextOut(44, 19, "项  目", 1);
	TextOut(131, 19, "值", 1);
	Block(123, 18, 124, 76, 1);
	Block(4, 31, 149, 32, 1);
	Line(4, 47, 149, 47, 65);
	Line(4, 62, 149, 62, 65);
	for (i = 0; i < 3 && i + first < n.dat[rel].size; i++)
	{
		if (!(v = cfset.dat[rel].tem[first + i].value))
		{
			sprintf(msg, "否");
		}
		else if (v == 1)
		{
			sprintf(msg, "是");
		}
		else if (v == 2)
		{
			if (rel == 2)
			{
				sprintf(msg, cfset.src);
			}
			else if (rel == 3)
			{
				sprintf(msg, cfset.lav);
			}
			else
			{
				sprintf(msg, cfset.fun);
			}
			for (v = 0; v < 3; v++)
			{
				if (!msg[v])
				{
					break;
				}
				else if (msg[v] > 128)
				{
					if (v > 2)
					{
						break;
					}
					v++;
				}
			}
			msg[v] = 0;
		}
		else
		{
			sprintf(msg, "%d", v);
		}
		TextOut(5, i * 15 + 34, n.dat[rel].tem[first + i].name, 1);
		TextOut(137 - strlen(msg) * 3, i * 15 + 34, msg, 1);
	}
	Block(154, (first * 56) / n.dat[rel].size + 19, 155, ((first + i) * 56) / n.dat[rel].size + 19, 1);//进度显示
	Rectangle(152, 17, 157, 77, 1);
	Block(125, value * 15 + 33, 149, value * 15 + 46, 2);
}
#endif

void SetHelp()
{
	char s[5][30];

	strcpy(s[0], "左右键    :改变设置值");
	strcpy(s[1], "上下键,翻页键 :移动选择条");
	strcpy(s[2], "求助键    :显示求助信息");
	strcpy(s[3], "ESC键,q键 :返回上一级界面");
	strcpy(s[4], "CR键      :选择函数文件");
	PrintMsg(s, 0);
	getchar();
}

/* 设置表操作[通用] */
void CON_Set(struct CONTABLE1 &n)
{
	int first, cur, value;
	char key;

	value = 0;
START:
	cur = Cata(CATAL_TABLE, DAT_CONCAT, value, CAT_SET);
	if (cur == -1) return;
	if (cur == -3)//退出
	{
		ConfigRW(CON_SETE);
		return;
	}
	DataRead(n, sizeof(struct CONTABLE1), DAT_CONMSG);//读取说明数据
	value = cur;
	for (first = cur = 0;;)
	{
		PrintTem(n, first, cur - first, value);
		Refresh();

		key = getchar();
		if (key == UP_KEY)
		{
			if (cur > 0)
			{
				cur--;
				if (cur < first) first = cur;
				continue;
			}
		}
		else if (key == DOWN_KEY)
		{
			if (cur + 1 < n.dat[value].size)
			{
				cur++;
				if (cur > first + 2) first = cur - 2;
				continue;
			}
		}
		else if (key == UU_KEY)
		{
			if (first >= 3)
			{
				first = first - 3;
				cur = cur - 3;
				continue;
			}
			if (first > 0)
			{
				cur = cur - first;
				first = 0;
				continue;
			}
		}
		else if (key == DD_KEY)
		{
			if (first + 3 < n.dat[value].size)
			{
				first = first + 3;
				cur = cur + 3;
				if (cur >= n.dat[value].size) cur = n.dat[value].size - 1;
			}
		}
		else if ((key == LEFT_KEY || key == RIGHT_KEY) && cfset.dat[value].tem[cur].value != 2)
		{
			if (cfset.dat[value].tem[cur].value < 2)
			{
				cfset.dat[value].tem[cur].value = cfset.dat[value].tem[cur].value ^ 1;
				continue;
			}
			if (key == LEFT_KEY)
			{
				if (cfset.dat[value].tem[cur].value > 3)
				{
					cfset.dat[value].tem[cur].value--;
				}
				else
				{
					cfset.dat[value].tem[cur].value = 255;
				}
				continue;
			}
			if (key == RIGHT_KEY)
			{
				if (cfset.dat[value].tem[cur].value < 255)
				{
					cfset.dat[value].tem[cur].value++;
				}
				else
				{
					cfset.dat[value].tem[cur].value = 3;
				}
				continue;
			}
		}
		else if (key == CR_KEY && cfset.dat[value].tem[cur].value == 2)
		{
			if (value == 2)
			{
				SelectDir(cfset.src);
			}
			else if (value == 3)
			{
				SelectDir(cfset.lav);
			}
			else
			{
				SelectFil(cfset.fun, cpldata, "fun", 0);
			}
		}
		else if (key == ESC_KEY || key == 'q') goto START;
		else if (key == HELP_KEY) SetHelp();
		if (!cfset.dat[0].tem[2].value) Beep();
	}
}