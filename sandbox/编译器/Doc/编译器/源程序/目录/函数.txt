//*******************************************************目录通用*******************************************************//
/* 改变目录 */
int ChPath(char &path[])
{
	int head, end;

	if (!ChDir(end = path))
	{
		ChDir("/");
		while (end = strchr(head = end + 1, '/'))
		{
			*end = 0;
			if (!ChDir(head))
			{
				MakeDir(head);
				if (!ChDir(head))
				{
					*end = '/';
					return(1);
				}
			}
			*end = '/';
		}
		MakeDir(head);
		if (!ChDir(head)) return(1);
	}
}

/* 去除后缀 */
void RmExt(char &s[])
{
	long t, p;

	p = s;
	while (t = strchr(p, '.')) p = t + 1;
	if (p > s)
	{
		*(p - 1) = 0;
	}
}

/* 改变后缀 */
void ChExt(char &s[], char &e[])
{
	long t, p;

	p = s;
	while (t = strchr(p, '.')) p = t + 1;
	if (p > s)
	{
		strcpy(p, e);
	}
	else
	{
		strcat(p, ".");
		strcat(p, e);
	}
}

/* 判断后缀 */
int ChkExt(char &s[], char &e[])
{
	int t, p;
	char ext[10];

	p = s;
	while (t = strchr(p, '.')) p = t + 1;
	if (p > s)
	{
		t = 0;
		while (*p) ext[t++] = tolower(*p++);
		ext[t] = 0;
		return(!strcmp(ext, e));
	}
}

void PopDir(char &path[])
{
	int i, len;

	if ((len = strlen(path)) == 1) return;
	for (i = len - 1; i > 0; i--)
	{
		if (path[i] == '/')
		{
			path[i] = 0;
			return;
		}
	}
	path[1] = 0;
}

/* 源程序选择 */
int SelectSrc(struct OUTFILE &fn, char &path[], int cmd)
{
	int i;

	if (ChDir(path))
	{
		strcpy(fn.path, path);
		i = 1;
	}
	else
	{
		ChDir("/");
		strcpy(fn.path, "/");
		i = 0;
	}
	for (;;)
	{
		if (!FileList(fn.name) || !strcmp(fn.name, ".."))
		{
			if (i > 0)
			{
				i--;
				ChDir("..");
				PopDir(fn.path);
				continue;
			}
			return(0);
		}
		else if (ChDir(fn.name))
		{
			if (strlen(fn.path) > 1) strcat(fn.path, "/");
			strcat(fn.path, fn.name);
			i++;
			continue;
		}
		if (cmd == 0xfe)
		{
			if (ChkExt(fn.name, "ref"))			return(5);//检索文件
			continue;
		}
		if (cmd == 0xfc)
		{
			if (ChkExt(fn.name, "dat"))			return(5);//dat文件
			continue;
		}
		if (cmd == 0xfd)
		{
			if (ChkExt(fn.name, "lav"))			return(3);//链接文件
		}
		if (cmd == 0xff)						return(4);//所有文件
		if (ChkExt(fn.name, "txt"))				return(1);//文本文件
		if (ChkExt(fn.name, "h"))				return(2);//头文件
	}
}

/* 函数, 链接库文件选择 cmd:0:不支持多目录 非0:支持多目录*/
int SelectFil(char &name[], char &path[], char &ext[], char &cmd)
{
	char t;
	char tn[NAME_MAX];

	if (path)
	{
		if (ChPath(path))
		{
			ChDir("/");
			t = 0;
		}
		else
		{	
			t = 1;
		}
	}
	else
	{
		t = cmd;
	}
	for (;;)
	{
		if (!FileList(tn))
		{
			if (!t)
			{
				if (&cmd) cmd = t;
				return(0);
			}
			t--;
			ChDir("..");
			continue;
		}
		if (ChkExt(tn, ext))
		{
			strcpy(name, tn);
			if (&cmd) cmd = t;
			return(1);
		}
		if (&cmd)
		{
			if (!strcmp(tn, ".."))
			{
				if (!t)
				{
					cmd = t;
					return(0);
				}
				t--;
				ChDir("..");
			}
			else if (ChDir(tn))
			{
				t++;
			}
		}
	}
}

/* 目录选择[只是一级] */
int SelectDir(char &name[])
{
	char tn[NAME_MAX];

	ChDir("/");
	for (;;)
	{
		if (!FileList(tn) || !strcmp(tn, "..")) return(1);
		if (ChDir(tn))
		{
			strcpy(name, "/");
			strcat(name, tn);
			return(0);
		}
	}
}
//*******************************************************目录系统*******************************************************//
/* 数据读取 [通用] */
long DataRead(long addrs, long size, long rel)
{
	if (!datfp)
	{
		ChDir(cpldata);
		if (!(datfp = fopen("compile.dat", "r")))
		{
			Swin("错误！", "找不到资源文件", SWIN_ONE);
			return(-1);
		}
	}
	if (rel < JUMP_SIZE)
	{
		fseek(datfp, rel << 2, 0);
		fread(&rel, 1, 4, datfp);
		if (addrs < 150)//Error特殊
		{
			rel = rel + addrs * sizeof(struct ERR_UNIT);
			addrs = ERROR_LOAD;
		}
	}
	fseek(datfp, rel, 0);
	fread(addrs, 1, size, datfp);
	return(rel);
}

#if WQX == 0
void PrintCat(struct CATTABLE &c, int first, int value)/*显示*/
{
	char i;

	MyBox(69, 18, 155, 76, 4);
	MyLine(69, 36, 153, 36, 64);
	SetBgColor(3);
	Block(4, 17, 68, 77, 0);
	for (i = 0; i < 4 && i + first < CAT_C_SIZE; i++)
	{
		Boxw(4, i * 15 + 18, c.dat[i + first].name);//选项
	}
	TextOut(71, 20, c.dat[value + first].name, 128);
	for (i = 0; i < 3; i++)
	{
		TextOut(71, i * 13 + 38, c.dat[first+value].msg[i], 1);//说明
	}
	Block(5, value * 15 + 19, strlen(c.dat[first + value].name) * 6 + 6, value * 15 + 30, 2);
}
#else
void PrintCat(struct CATTABLE &c, int first, int value)/*显示*/
{
	char i;

	Block(2, 16, 158, 78, 0);
	Rectangle(72, 17, 157, 77, 1);
	Line(72, 34, 157, 34, 65);
	for (i = 0; i < 4 && i + first < CAT_C_SIZE; i++)
	{
		Boxw(3, i * 15 + 18, c.dat[i + first].name);//选项
	}
	TextOut(73, 18, c.dat[value + first].name, 128);
	for (i = 0; i < 3; i++)
	{
		TextOut(73, i * 13 + 37, c.dat[first + value].msg[i], 1);//说明
	}
	Block(4, value * 15 + 19, strlen(c.dat[first + value].name) * 6 + 9, value * 15 + 30, 2);
}
#endif

void CataHelp()
{
	char s[5][30];

	strcpy(s[0], "求助键    :显示求助信息");
	strcpy(s[1], "输入键    :选中该选项");
	strcpy(s[2], "ESC键,q键 :返回上一级界面");
	strcpy(s[3], "方向键    :上一行或下一行");
	strcpy(s[4], "翻页键    :上一页或下一页");
	PrintMsg(s, 0);
	getchar();
}

/* 目录 返回按键信息:0~:项, -1:错误 -2:CAT_SET -3:ESC [通用] */
int Cata(struct CATTABLE &c, long rel, int cur, int cmd)
{
	char key;
	int first;

	first = DataRead(c, sizeof(struct CATTABLE), rel);//数据读取
	if (first < 0) return(-1);
	if (cmd == CAT_HELP)
	{
		Dwin("帮助");
	}
	else
	{
		Dwin("设置");
	}
	for (first = 0;;)
	{
		PrintCat(c, first, cur - first);
		Refresh();
		key = getchar();
		if (key == UP_KEY || key == LEFT_KEY)
		{
			if (cur)
			{
				cur--;
				if (cur < first) first = cur;
			}
			else
			{
				cur = CAT_C_SIZE - 1;
				if (cur > first + 3) first = cur - 3;
			}
			continue;
		}
		if (key == DOWN_KEY || key == RIGHT_KEY)
		{
			if (cur + 1 < CAT_C_SIZE)
			{
				cur++;
				if (cur > first + 3) first = cur - 3;
			}
			else
			{
				cur = first = 0;
			}
			continue;
		}
		if (key == UU_KEY)
		{
			if (first < 4)
			{
				if (!first)
				{
					goto BEEP;
				}
				cur = cur - first;
				first = 0;
			}
			else
			{
				first = first - 4;
				cur = cur - 4;
			}
			continue;
		}
		if (key == DD_KEY)
		{
			if (first + 4 >= CAT_C_SIZE)
			{
				goto BEEP;
			}
			first = first + 4;
			cur = cur + 4;
			if (cur >= CAT_C_SIZE) cur = CAT_C_SIZE - 1;
			continue;
		}
		if (key == HELP_KEY)
		{
			CataHelp();
			continue;
		}
		if (key == CR_KEY)					return(cur);
		if (key == ESC_KEY || key == 'q')	return(-3);
BEEP:
		if (!cfset.dat[0].tem[2].value) Beep();
	}
}