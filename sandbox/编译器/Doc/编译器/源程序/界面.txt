//*******************************************************按键定义*******************************************************//
#define F1_KEY		0x1c
#define F2_KEY		0x1d
#define F3_KEY		0x1e
#define F4_KEY		0x1f
#define CR_KEY		0x0d
#define ESC_KEY		0x1b
#define HELP_KEY	0x19
#define SHIFT_KEY	0x1a
#define CAPS_KEY	0x12
#define UP_KEY		0x14
#define	DOWN_KEY	0x15
#define LEFT_KEY	0x17
#define RIGHT_KEY	0x16
#define UU_KEY		0x13
#define DD_KEY		0x0e
#define A_KEY		'a'
#define D_KEY		'd'
#define M_KEY		'm'
#define S_KEY		's'
#define Y_KEY		'y'
#define N_KEY		'n'
//*******************************************************通用定义*******************************************************//
#define SWIN_COM	0														//普通
#define SWIN_ONE	1														//确定按钮
#define SWIN_TWO	2														//选择按钮
#define SWIN_STW	3														//选择按钮[不停止]
//----------------------------------------------------------------------------------------
#define BUTTON_UP	0														//按键突出
#define BUTTON_DOWN	1														//按键按下
//----------------------------------------------------------------------------------------
#define PIC_QUEN	0														//问号图片
#define PIC_WARN	1														//警告图片
#define PIC_BUSY	2														//忙忙图片
#define PIC_DOCU	3														//文件夹图片
//*******************************************************界面函数*******************************************************//
#if WQX == 0

char pic[][512]=//问号
{0x33,0x33,0x33,0x33,0x33,0x38,0x88,0x88,0x88,0x83,0x33,0x33,0x33,0x33,0x33,0x33,0x33,0x33,0x33,0x33,0x88,0x84,0x00,0x00,
 0x00,0x48,0x88,0x33,0x33,0x33,0x33,0x33,0x33,0x33,0x33,0x88,0x40,0x00,0x00,0x00,0x00,0x00,0x04,0x88,0x33,0x33,0x33,0x33,
 0x33,0x33,0x38,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x83,0x33,0x33,0x33,0x33,0x33,0x80,0x00,0x00,0x00,0x00,0x00,
 0x00,0x00,0x00,0x00,0x0F,0x33,0x33,0x33,0x33,0x38,0x00,0x00,0x00,0x04,0xBB,0xBB,0xBB,0x40,0x00,0x00,0x00,0xF3,0x33,0x33,
 0x33,0x80,0x00,0x00,0x00,0x4B,0x40,0x0B,0xBB,0xB4,0x00,0x00,0x00,0x0F,0x33,0x33,0x38,0x40,0x00,0x00,0x00,0xBB,0x00,0x00,
 0xBB,0xBB,0x00,0x00,0x00,0x04,0xF3,0x33,0x38,0x00,0x00,0x00,0x00,0xBB,0xBB,0x00,0xBB,0xBB,0x00,0x00,0x00,0x00,0xF8,0x33,
 0x84,0x00,0x00,0x00,0x00,0xBB,0xBB,0x04,0xBB,0xBB,0x00,0x00,0x00,0x00,0x4F,0x83,0x80,0x00,0x00,0x00,0x00,0x4B,0xB4,0x0B,
 0xBB,0xB0,0x00,0x00,0x00,0x00,0x0F,0x83,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x4B,0xBB,0x00,0x00,0x00,0x00,0x00,0x0F,0x88,
 0x80,0x00,0x00,0x00,0x00,0x00,0x00,0xBB,0xB0,0x00,0x00,0x00,0x00,0x00,0x0F,0x88,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0xBB,
 0x40,0x00,0x00,0x00,0x00,0x00,0x0F,0x88,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0xBB,0x00,0x00,0x00,0x00,0x00,0x00,0x0F,0x88,
 0x84,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x4F,0x88,0x38,0x00,0x00,0x00,0x00,0x00,0x04,0xBB,
 0x40,0x00,0x00,0x00,0x00,0x00,0xF8,0x88,0x38,0x40,0x00,0x00,0x00,0x00,0x0B,0xBB,0xB0,0x00,0x00,0x00,0x00,0x04,0xF8,0x88,
 0x33,0x80,0x00,0x00,0x00,0x00,0x0B,0xBB,0xB0,0x00,0x00,0x00,0x00,0x0F,0x88,0x83,0x33,0x3F,0x00,0x00,0x00,0x00,0x04,0xBB,
 0x40,0x00,0x00,0x00,0x00,0xF8,0x88,0x83,0x33,0x33,0xF0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0F,0x88,0x88,0x33,
 0x33,0x33,0x3F,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0xF8,0x88,0x83,0x33,0x33,0x33,0x33,0xFF,0x40,0x00,0x00,0x00,
 0x00,0x00,0x04,0xFF,0x88,0x88,0x33,0x33,0x33,0x33,0x33,0x38,0xFF,0xF4,0x00,0x00,0x00,0x4F,0xFF,0x88,0x88,0x83,0x33,0x33,
 0x33,0x33,0x33,0x33,0x88,0x8F,0xFF,0x40,0x00,0xF8,0x88,0x88,0x88,0x33,0x33,0x33,0x33,0x33,0x33,0x33,0x33,0x88,0x88,0xF0,
 0x00,0xF8,0x88,0x88,0x33,0x33,0x33,0x33,0x33,0x33,0x33,0x33,0x33,0x33,0x38,0xF0,0x00,0xF8,0x83,0x33,0x33,0x33,0x33,0x33,
 0x33,0x33,0x33,0x33,0x33,0x33,0x33,0x3F,0x00,0xF8,0x83,0x33,0x33,0x33,0x33,0x33,0x33,0x33,0x33,0x33,0x33,0x33,0x33,0x33,
 0xF0,0xF8,0x83,0x33,0x33,0x33,0x33,0x33,0x33,0x33,0x33,0x33,0x33,0x33,0x33,0x33,0x3F,0xF8,0x83,0x33,0x33,0x33,0x33,0x33,
 0x33,0x33,0x33,0x33,0x33,0x33,0x33,0x33,0x33,0x88,0x83,0x33,0x33,0x33,0x33,0x33,0x33,0x33,0x33,0x33,0x33,0x33,0x33,0x33,
 0x33,0x38,0x83,0x33,0x33,0x33,0x33,0x33,//警告
 0x33,0x33,0x33,0x33,0x33,0x3F,0xFF,0xFF,0xFF,0xF3,0x33,0x33,0x33,0x33,0x33,0x33,0x33,0x33,0x33,0x33,0xFF,0xFE,0xEE,0xEE,
 0xEE,0xEF,0xFF,0x33,0x33,0x33,0x33,0x33,0x33,0x33,0x33,0x3F,0xEE,0xEE,0xEE,0xEE,0xEE,0xEE,0xEE,0xF3,0x33,0x33,0x33,0x33,
 0x33,0x33,0x3F,0xFE,0xEE,0xEE,0xEE,0xEE,0xEE,0xEE,0xEE,0xEF,0xF3,0x33,0x33,0x33,0x33,0x33,0xFE,0xEE,0xEE,0xEE,0xEE,0xEE,
 0xEE,0xEE,0xEE,0xEE,0xEF,0x33,0x33,0x33,0x33,0x3F,0xEE,0xEE,0xEE,0xEE,0xEE,0xEE,0xEE,0xEE,0xEE,0xEE,0xEE,0xF3,0x33,0x33,
 0x33,0x3F,0xEE,0xEE,0xEE,0xEE,0xEE,0xEE,0xEE,0xEE,0xEE,0xEE,0xEE,0xF8,0x33,0x33,0x33,0xFE,0xEE,0xEE,0xE0,0xEE,0xEE,0xEE,
 0xEE,0xEE,0x0E,0xEE,0xEE,0xEF,0x83,0x33,0x3F,0xEE,0xEE,0xEE,0x00,0x0E,0xEE,0xEE,0xEE,0xE0,0x00,0xEE,0xEE,0xEE,0xF3,0x33,
 0x3F,0xEE,0xEE,0xE0,0x00,0x00,0xEE,0xEE,0xEE,0x00,0x00,0x0E,0xEE,0xEE,0xF8,0x33,0x3F,0xEE,0xEE,0xEE,0x00,0x00,0x0E,0xEE,
 0xE0,0x00,0x00,0xEE,0xEE,0xEE,0xF8,0x83,0xFE,0xEE,0xEE,0xEE,0xE0,0x00,0x00,0xEE,0x00,0x00,0x0E,0xEE,0xEE,0xEE,0xEF,0x83,
 0xFE,0xEE,0xEE,0xEE,0xEE,0x00,0x00,0x00,0x00,0x00,0xEE,0xEE,0xEE,0xEE,0xEF,0x83,0xFE,0xEE,0xEE,0xEE,0xEE,0xE0,0x00,0x00,
 0x00,0x0E,0xEE,0xEE,0xEE,0xEE,0xEF,0x88,0xFE,0xEE,0xEE,0xEE,0xEE,0xEE,0x00,0x00,0x00,0xEE,0xEE,0xEE,0xEE,0xEE,0xEF,0x88,
 0xFE,0xEE,0xEE,0xEE,0xEE,0xEE,0x00,0x00,0x00,0xEE,0xEE,0xEE,0xEE,0xEE,0xEF,0x88,0xFE,0xEE,0xEE,0xEE,0xEE,0xE0,0x00,0x00,
 0x00,0x0E,0xEE,0xEE,0xEE,0xEE,0xEF,0x88,0xFE,0xEE,0xEE,0xEE,0xEE,0x00,0x00,0x00,0x00,0x00,0xEE,0xEE,0xEE,0xEE,0xEF,0x88,
 0xFE,0xEE,0xEE,0xEE,0xE0,0x00,0x00,0xEE,0x00,0x00,0x0E,0xEE,0xEE,0xEE,0xEF,0x88,0x3F,0xEE,0xEE,0xEE,0x00,0x00,0x0E,0xEE,
 0xE0,0x00,0x00,0xEE,0xEE,0xEE,0xF8,0x88,0x3F,0xEE,0xEE,0xE0,0x00,0x00,0xEE,0xEE,0xEE,0x00,0x00,0x0E,0xEE,0xEE,0xF8,0x88,
 0x3F,0xEE,0xEE,0xEE,0x00,0x0E,0xEE,0xEE,0xEE,0xE0,0x00,0xEE,0xEE,0xEE,0xF8,0x83,0x33,0xFE,0xEE,0xEE,0xE0,0xEE,0xEE,0xEE,
 0xEE,0xEE,0x0E,0xEE,0xEE,0xEF,0x88,0x83,0x33,0x3F,0xEE,0xEE,0xEE,0xEE,0xEE,0xEE,0xEE,0xEE,0xEE,0xEE,0xEE,0xF8,0x88,0x83,
 0x33,0x3F,0xEE,0xEE,0xEE,0xEE,0xEE,0xEE,0xEE,0xEE,0xEE,0xEE,0xEE,0xF8,0x88,0x33,0x33,0x33,0xFE,0xEE,0xEE,0xEE,0xEE,0xEE,
 0xEE,0xEE,0xEE,0xEE,0xEF,0x88,0x83,0x33,0x33,0x33,0x3F,0xFE,0xEE,0xEE,0xEE,0xEE,0xEE,0xEE,0xEE,0xEF,0xF8,0x88,0x83,0x33,
 0x33,0x33,0x33,0x8F,0xEE,0xEE,0xEE,0xEE,0xEE,0xEE,0xEE,0xF8,0x88,0x88,0x33,0x33,0x33,0x33,0x33,0x38,0xFF,0xFE,0xEE,0xEE,
 0xEE,0xEF,0xFF,0x88,0x88,0x83,0x33,0x33,0x33,0x33,0x33,0x33,0x38,0x8F,0xFF,0xFF,0xFF,0xF8,0x88,0x88,0x83,0x33,0x33,0x33,
 0x33,0x33,0x33,0x33,0x33,0x88,0x88,0x88,0x88,0x88,0x88,0x88,0x33,0x33,0x33,0x33,0x33,0x33,0x33,0x33,0x33,0x33,0x38,0x88,
 0x88,0x88,0x83,0x33,0x33,0x33,0x33,0x33,//忙忙
 0x33,0x33,0x33,0x33,0x33,0x33,0x33,0x33,0x33,0x33,0x33,0x33,0x33,0x33,0x33,0x33,0x33,0x33,0x33,0x33,0x33,0x33,0x33,0x33,
 0x33,0x33,0x33,0x33,0x33,0x33,0x33,0x33,0x33,0x33,0x33,0x33,0x33,0x33,0x33,0x33,0x33,0x33,0x33,0x33,0x33,0x33,0x33,0x33,
 0x33,0x33,0x33,0x3a,0xcc,0xcc,0xcc,0xcc,0xcc,0xcc,0xcc,0xcc,0x33,0x33,0x33,0x33,0x33,0x33,0x33,0x3d,0xfc,0xcd,0xcd,0xcd,
 0xcd,0xcc,0xdc,0xef,0x33,0x33,0x33,0x33,0x33,0x33,0x33,0x38,0xd6,0x66,0x66,0x66,0x66,0x66,0x66,0xca,0x33,0x33,0x33,0x33,
 0x33,0x33,0x33,0x33,0xe6,0x66,0x66,0x66,0x66,0x67,0x66,0xc2,0x33,0x33,0x33,0x33,0x33,0x33,0x33,0x33,0xd3,0x33,0x33,0x33,
 0x33,0x33,0x33,0xa3,0x33,0x33,0x33,0x33,0x33,0x33,0x33,0x33,0xd1,0x32,0x12,0x23,0x31,0x12,0x31,0xa3,0x33,0x33,0x33,0x33,
 0x33,0x33,0x33,0x33,0xbc,0x28,0x68,0x86,0x97,0x88,0x1a,0xc2,0x33,0x33,0x33,0x33,0x33,0x33,0x33,0x33,0x1a,0xc1,0x78,0x87,
 0x87,0x71,0xbc,0x23,0x33,0x33,0x33,0x33,0x33,0x33,0x33,0x33,0x31,0xbd,0x37,0x6b,0x49,0x1a,0xd2,0x33,0x33,0x33,0x33,0x33,
 0x33,0x33,0x33,0x33,0x33,0x3a,0xd1,0x85,0xa1,0xad,0x33,0x33,0x33,0x33,0x33,0x33,0x33,0x33,0x33,0x33,0x33,0x33,0xbc,0x27,
 0x1a,0xc1,0x33,0x33,0x33,0x33,0x33,0x33,0x33,0x33,0x33,0x33,0x33,0x33,0x3f,0x63,0x3f,0x63,0x33,0x33,0x33,0x33,0x33,0x33,
 0x33,0x33,0x33,0x33,0x33,0x33,0x3f,0x6a,0x3f,0x63,0x33,0x33,0x33,0x33,0x33,0x33,0x33,0x33,0x33,0x33,0x33,0x33,0x5f,0x53,
 0x2e,0x83,0x33,0x33,0x33,0x33,0x33,0x33,0x33,0x33,0x33,0x33,0x33,0x35,0xe5,0x35,0x33,0xd8,0x33,0x33,0x33,0x33,0x33,0x33,
 0x33,0x33,0x33,0x33,0x33,0x6e,0x53,0x35,0x83,0x4e,0x73,0x33,0x33,0x33,0x33,0x33,0x33,0x33,0x33,0x33,0x35,0xe5,0x33,0x33,
 0x23,0x32,0xf7,0x33,0x33,0x33,0x33,0x33,0x33,0x33,0x33,0x33,0x6e,0x53,0x37,0x6b,0x49,0x13,0x2e,0x73,0x33,0x33,0x33,0x33,
 0x33,0x33,0x33,0x33,0xe5,0x33,0x78,0x86,0x97,0x81,0x34,0xd3,0x33,0x33,0x33,0x33,0x33,0x33,0x33,0x33,0xc3,0x37,0x78,0x87,
 0x87,0x79,0x33,0x93,0x33,0x33,0x33,0x33,0x33,0x33,0x33,0x33,0xd3,0x75,0xa7,0x7a,0x49,0x85,0x93,0x93,0x33,0x33,0x33,0x33,
 0x33,0x33,0x33,0x32,0xfc,0xdc,0xcc,0xcc,0xdc,0xcc,0xdc,0xe5,0x33,0x33,0x33,0x33,0x33,0x33,0x33,0x3d,0xd6,0x66,0x76,0x67,
 0x66,0x76,0x67,0xcf,0x33,0x33,0x33,0x33,0x33,0x33,0x33,0x3d,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x33,0x33,0x33,0x33,
 0x33,0x33,0x33,0x33,0x33,0x33,0x33,0x33,0x33,0x33,0x33,0x33,0x33,0x33,0x33,0x33,0x33,0x33,0x33,0x33,0x33,0x33,0x33,0x33,
 0x33,0x33,0x33,0x33,0x33,0x33,0x33,0x33,0x33,0x33,0x33,0x33,0x33,0x33,0x33,0x33,0x33,0x33,0x33,0x33,0x33,0x33,0x33,0x33,
 0x33,0x33,0x33,0x33,0x33,0x33,0x33,0x33,0x33,0x33,0x33,0x33,0x33,0x33,0x33,0x33,0x33,0x33,0x33,0x33,0x33,0x33,0x33,0x33,
 0x33,0x33,0x33,0x33,0x33,0x33,0x33,0x33,//文件夹
 0x33,0x33,0x33,0x31,0x11,0x11,0x33,0x33,0x33,0x33,0x33,0x33,0x33,0x33,0x33,0x33,0x33,0x31,0x45,0x45,0x55,0x67,0x53,0x33,
 0x33,0x33,0x33,0x33,0x33,0x33,0x33,0x33,0x33,0x37,0x32,0x22,0x11,0x31,0x84,0x33,0x33,0x33,0x32,0x24,0x56,0x51,0x33,0x33,
 0x33,0x36,0x32,0x12,0x21,0x23,0x38,0x31,0x45,0x78,0x65,0x44,0x11,0x66,0x33,0x33,0x33,0x61,0x12,0x22,0x12,0x22,0x33,0x65,
 0x32,0x33,0x31,0x12,0x34,0x79,0x75,0x13,0x33,0x53,0x22,0x12,0x22,0x22,0x11,0x32,0x23,0x46,0x56,0x66,0x65,0x42,0x28,0x53,
 0x34,0x41,0x22,0x22,0x22,0x12,0x22,0x67,0x56,0x54,0x33,0x11,0x33,0x23,0x19,0x71,0x34,0x41,0x22,0x22,0x12,0x22,0x18,0x51,
 0x33,0x33,0x33,0x33,0x13,0x41,0x3A,0x63,0x33,0x41,0x22,0x22,0x33,0x34,0x75,0x31,0x11,0x11,0x31,0x11,0x13,0x43,0x3a,0x53,
 0x33,0x42,0x25,0x56,0x66,0x66,0x33,0x11,0x11,0x11,0x11,0x11,0x13,0x41,0x4a,0x43,0x33,0x52,0x86,0x43,0x22,0x13,0x11,0x11,
 0x11,0x11,0x11,0x11,0x21,0x43,0x59,0x43,0x32,0x53,0x83,0x11,0x11,0x11,0x21,0x11,0x12,0x12,0x12,0x11,0x11,0x41,0x79,0x33,
 0x32,0x43,0x63,0x21,0x21,0x12,0x12,0x12,0x11,0x21,0x11,0x21,0x21,0x43,0x88,0x23,0x32,0x54,0x61,0x21,0x22,0x21,0x22,0x12,
 0x22,0x12,0x22,0x21,0x21,0x41,0x97,0x23,0x32,0x56,0x61,0x22,0x22,0x22,0x22,0x22,0x22,0x22,0x22,0x22,0x22,0x41,0xa7,0x33,
 0x31,0x55,0x41,0x22,0x22,0x22,0x22,0x22,0x22,0x22,0x22,0x22,0x22,0x42,0xa6,0x33,0x31,0x56,0x42,0x22,0x22,0x23,0x22,0x22,
 0x22,0x22,0x22,0x22,0x22,0x34,0xa5,0x33,0x31,0x58,0x41,0x32,0x23,0x22,0x32,0x32,0x32,0x32,0x32,0x32,0x32,0x45,0xa4,0x33,
 0x33,0x68,0x32,0x23,0x23,0x23,0x23,0x23,0x23,0x23,0x22,0x32,0x32,0x46,0xa3,0x33,0x33,0x48,0x23,0x33,0x33,0x33,0x33,0x33,
 0x33,0x33,0x33,0x33,0x32,0x48,0x92,0x33,0x33,0x59,0x23,0x33,0x33,0x33,0x33,0x33,0x33,0x33,0x33,0x33,0x33,0x48,0x81,0x33,
 0x33,0x59,0x13,0x33,0x43,0x33,0x33,0x33,0x33,0x33,0x43,0x33,0x33,0x49,0x83,0x33,0x33,0x59,0x14,0x33,0x33,0x34,0x33,0x43,
 0x43,0x43,0x33,0x32,0x44,0x6a,0x61,0x33,0x33,0x49,0x14,0x34,0x43,0x43,0x34,0x34,0x33,0x33,0x35,0x68,0x99,0xaa,0x53,0x33,
 0x33,0x49,0x14,0x44,0x34,0x44,0x44,0x34,0x45,0x78,0x9a,0xa9,0x87,0x53,0x33,0x33,0x33,0x48,0x14,0x44,0x44,0x34,0x55,0x79,
 0x9a,0xa9,0x86,0x53,0x11,0x33,0x33,0x33,0x33,0x47,0x24,0x35,0x56,0x88,0xaa,0x99,0x76,0x43,0x13,0x33,0x33,0x33,0x33,0x33,
 0x33,0x37,0x47,0x88,0xaa,0xa9,0x85,0x42,0x13,0x33,0x33,0x33,0x33,0x33,0x33,0x33,0x33,0x28,0xaa,0x99,0x65,0x21,0x33,0x33,
 0x33,0x33,0x33,0x33,0x33,0x33,0x33,0x33,0x33,0x32,0x64,0x31,0x33,0x33,0x33,0x33,0x33,0x33,0x33,0x33,0x33,0x33,0x33,0x33,
 0x33,0x33,0x33,0x33,0x33,0x33,0x33,0x33,0x33,0x33,0x33,0x33,0x33,0x33,0x33,0x33,0x33,0x33,0x33,0x33,0x33,0x33,0x33,0x33,
 0x33,0x33,0x33,0x33,0x33,0x33,0x33,0x33};

void textout(int x, int y, char &str[], int type)
{
	TextOut(x, y, str, type|3);
	TextOut(x, y + 1, str, type|3);
	TextOut(x, y + 2, str, type|3);
	TextOut(x + 1, y, str, type|3);
	TextOut(x + 1, y + 1, str, type|3);
	TextOut(x + 1, y + 2, str, type|3);
	TextOut(x + 2, y, str, type|3);
	TextOut(x + 2, y + 1, str, type|3);
	TextOut(x + 2, y + 2, str, type|3);
	SetBgColor(0);
	TextOut(x + 1, y + 1, str, type|5);
	SetBgColor(3);
}

void Boxw(int x, int y, char &tag[])
{
	Rectangle(x, y, x + strlen(tag) * 6 + 3, y + 13, 1);
	TextOut(x + 2, y + 1, tag, 1);
}

void MyLine(int x0, int y0, int x1, int y1, int type)
{
	SetBgColor(9);
	Line(x0, y0, x1, y1, type);
	SetBgColor(0);
	Line(x0 + 1, y0 + 1, x1 + 1, y1 + 1, type);
}

void MyBox(int x0, int y0, int x1, int y1, int type)
{
	char cmd, mode;

	cmd = type&0xf;
	if (type >> 4)
	{
		mode = 0;
	}
	else
	{
		mode = 64;
	}
	if (cmd < 2)
	{
		SetBgColor(cmd * 12);
		Line(x0, y0, x0, y1 - 1, mode);
		Line(x0, y0, x1 - 1, y0, mode);
		SetBgColor(12 - cmd * 12);
		Line(x1, y0, x1, y1, mode);
		Line(x0, y1, x1, y1, mode);
		SetBgColor(3);
		return;
	}
	SetBgColor(3);
	Block(x0, y0, x1, y1, 0);
	if (cmd == 2)
	{
		SetBgColor(0);
		Line(x0, y0, x0, y1 - 1, mode);
		Line(x0, y0, x1 - 1, y0, mode);
		SetBgColor(12);
		Line(x0, y1, x1, y1, mode);
		Line(x1, y0, x1, y1, mode);
		SetBgColor(9);
		Line(x0 + 1, y1 - 1, x1 - 1, y1 - 1, mode);
		Line(x1 - 1, y0 + 1, x1 - 1, y1 - 1, mode);
	}
	else if (cmd == 3)
	{
		SetBgColor(12);
		Line(x0, y1, x1, y1, mode);
		Line(x1, y0, x1, y1, mode);
		SetBgColor(0);
		Line(x0 + 1, y0 + 1, x0 + 1, y1 - 2, mode);
		Line(x0 + 1, y0 + 1, x1 - 2, y0 + 1, mode);
		SetBgColor(9);
		Line(x1 - 1, y0 + 1, x1 - 1, y1 - 1, mode);
		Line(x0 + 1, y1 - 1, x1 - 1, y1 - 1, mode);
	}
	else if (cmd == 4)
	{
		MyLine(x0, y0, x0, y1, mode);
		MyLine(x0, y0, x1, y0, mode);
		MyLine(x1, y0, x1, y1, mode);
		MyLine(x0, y1, x1, y1, mode);
	}
	SetBgColor(3);
}

void Tool(int x, int y, int type)
{
	MyBox(x, y, x + 11, y + 10, 2);
	if (type == 3)
	{
		Line(x + 2, y + 2, x + 7, y + 7, 65);
		Line(x + 3, y + 2, x + 8, y + 7, 65);
		Line(x + 2, y + 7, x + 7, y + 2, 65);
		Line(x + 3, y + 7, x + 8, y + 2, 65);
	}
	else if (type == 2)
	{
		Rectangle(x + 2, y + 2, x + 8, y + 7, 1);
		Line(x + 3, y + 3, x + 7, y + 3, 65);
	}
	else if (type == 1)
	{
		Line(x + 3, y + 7, x + 7, y + 7, 65);
		Line(x + 3, y + 6, x + 7, y + 6, 65);
	}
}

void Button(int x, int y, char &tag[], int cmd)/*按钮*/
{
	int len;

	len = x + strlen(tag) * 6 + 2;
	if (cmd == BUTTON_UP)
	{
		MyBox(x, y, len, y + 13, 0);
		TextOut(x + 1, y + 1, tag, 1);
	}
	else if (cmd == BUTTON_DOWN)
	{
		Box(x, y, len, y + 13, 1, 1);
		Delay(cfset.dat[3].tem[0].value * 5);
		Refresh();
	}
}

void Dwin(char &tag[])/* 大框框 */
{
	MyBox(1, 0, 159, 79, 3);
	textout(6, 3, tag, 1);
	Block(4, 3, 156, 16, 2);
	Tool(120, 5, 1);
	Tool(132, 5, 2);
	Tool(144, 5, 3);
}

int Swin(char &tag[], char &msg[], int type)/*小框框|type:0普通, 1确定, 2选择, 3选择, */
{
	char key;
	char str[3][6];

	strcpy(str[0], "是[Y]");
	strcpy(str[1], "否[N]");
	strcpy(str[2], "确 定");
	MyBox(13, 17, 143, 76, 3);
	textout(18, 20, tag, 1);
	Block(16, 20, 140, 33, 2);
	Tool(104, 22, 1);
	Tool(116, 22, 2);
	Tool(128, 22, 3);
	if (type == SWIN_COM) return(0);
	TextOut(92 - strlen(msg) * 3, 38, msg, 1);
	if (type == SWIN_ONE)//单按钮
	{
		WriteBlock(17, 36, 32, 32, 1, pic[PIC_WARN]);
		Button(78, 57, str[2], BUTTON_UP);
		Refresh();
		if (!cfset.dat[0].tem[2].value) Beep();
		while (getchar() != CR_KEY);
		Button(78, 57, str[2], BUTTON_DOWN);//响应
	}
	else
	{
		WriteBlock(17, 36, 32, 32, 1, pic[PIC_QUEN]);
		Button(55, 57, str[0], BUTTON_UP);
		Button(98, 57, str[1], BUTTON_UP);
		if (type == SWIN_STW) return(0);
		Refresh();
		for(;;)
		{
			key = getchar();
			if (key == Y_KEY || key == CR_KEY)
			{
				Button(55, 57, str[0], BUTTON_DOWN);
				return(1);
			}
			else if (key == N_KEY || key == ESC_KEY || key=='q')
			{
				Button(98, 57, str[1], BUTTON_DOWN);
				return(0);
			}
		}
	}
}

#else

char pic[][128]=//问号
{0x00,0x1F,0xE0,0x00,0x00,0xE0,0x1C,0x00,0x03,0x00,0x03,0x00,0x04,0x00,0x00,0x80,0x08,0x00,0x00,0x40,0x10,0x0F,0xC0,0x20,
 0x20,0x11,0xE0,0x10,0x40,0x30,0xF0,0x08,0x40,0x3C,0xF0,0x0C,0x80,0x3C,0xF0,0x06,0x80,0x19,0xE0,0x06,0x80,0x01,0xC0,0x07,
 0x80,0x03,0x80,0x07,0x80,0x03,0x00,0x07,0x80,0x03,0x00,0x07,0x80,0x00,0x00,0x07,0x40,0x03,0x00,0x0F,0x40,0x07,0x80,0x0F,
 0x20,0x07,0x80,0x1E,0x10,0x03,0x00,0x3E,0x08,0x00,0x00,0x7C,0x04,0x00,0x00,0xF8,0x03,0x00,0x03,0xF0,0x01,0xE0,0x1F,0xE0,
 0x00,0xFC,0x3F,0xC0,0x00,0x3E,0x3F,0x00,0x00,0x06,0x38,0x00,0x00,0x01,0x38,0x00,0x00,0x00,0xB8,0x00,0x00,0x00,0x78,0x00,
 0x00,0x00,0x38,0x00,0x00,0x00,0x18,0x00,//警告
 0x00,0x07,0x00,0x00,0x00,0x08,0x80,0x00,0x00,0x10,0x60,0x00,0x00,0x10,0x70,0x00,0x00,0x20,0x38,0x00,0x00,0x20,0x38,0x00,
 0x00,0x40,0x1C,0x00,0x00,0x40,0x1C,0x00,0x00,0x80,0x0E,0x00,0x00,0x87,0x0E,0x00,0x01,0x0F,0x87,0x00,0x01,0x0F,0x87,0x00,
 0x02,0x0F,0x83,0x80,0x02,0x0F,0x83,0x80,0x04,0x0F,0x81,0xC0,0x04,0x07,0x01,0xC0,0x08,0x07,0x00,0xE0,0x08,0x07,0x00,0xE0,
 0x10,0x02,0x00,0x70,0x10,0x02,0x00,0x70,0x20,0x02,0x00,0x38,0x20,0x00,0x00,0x38,0x40,0x03,0x00,0x1C,0x40,0x07,0x80,0x1C,
 0x80,0x07,0x80,0x0E,0x80,0x03,0x00,0x0E,0x80,0x00,0x00,0x0F,0x80,0x00,0x00,0x0F,0x40,0x00,0x00,0x1F,0x3F,0xFF,0xFF,0xFF,
 0x0F,0xFF,0xFF,0xFE,0x07,0xFF,0xFF,0xFC,//忙忙
 0x00,0x00,0x00,0x00,0x00,0x7F,0xFF,0x00,0x00,0x40,0x01,0x00,0x00,0x40,0x01,0x00,0x00,0x40,0x01,0x00,0x00,0x40,0x01,0x00,
 0x00,0x55,0x55,0x00,0x00,0x6A,0xAB,0x00,0x00,0x55,0x55,0x00,0x00,0x2A,0xAA,0x00,0x00,0x15,0x54,0x00,0x00,0x0A,0xA8,0x00,
 0x00,0x05,0x50,0x00,0x00,0x02,0xA0,0x00,0x00,0x01,0x40,0x00,0x00,0x00,0x80,0x00,0x00,0x01,0x40,0x00,0x00,0x02,0x20,0x00,
 0x00,0x04,0x10,0x00,0x00,0x08,0x08,0x00,0x00,0x10,0x04,0x00,0x00,0x20,0x02,0x00,0x00,0x40,0x01,0x00,0x00,0x41,0x41,0x00,
 0x00,0x42,0xA1,0x00,0x00,0x45,0x51,0x00,0x00,0x4A,0xA9,0x00,0x00,0x55,0x55,0x00,0x00,0x6A,0xAB,0x00,0x00,0x55,0x55,0x00,
 0x00,0x7F,0xFF,0x00,0x00,0x00,0x00,0x00,//文件夹
 0x00,0x00,0x00,0x00,0x07,0xe0,0x00,0x00,0x1f,0xf8,0x00,0x00,0x30,0x0e,0x03,0xf0,0x20,0x03,0xfe,0x18,0x60,0x03,0x00,0x1e,
 0x40,0x00,0x07,0xff,0x40,0x00,0x3c,0x07,0x40,0x01,0xe0,0x07,0x40,0x0f,0x00,0x07,0x40,0xf8,0x00,0x07,0x47,0x80,0x00,0x16,
 0x5c,0x00,0x00,0x16,0x50,0x00,0x00,0x16,0x50,0x00,0x00,0x16,0x50,0x00,0x00,0x16,0x50,0x00,0x00,0x16,0x70,0x00,0x00,0x16,
 0x70,0x00,0x00,0x16,0x70,0x00,0x00,0x16,0x30,0x00,0x00,0x1e,0x30,0x00,0x00,0x1e,0x30,0x00,0x00,0x1e,0x30,0x00,0x00,0x1c,
 0x30,0x00,0x00,0x7c,0x30,0x00,0x03,0xfc,0x30,0x00,0x1f,0xfc,0x30,0x01,0xff,0xc0,0x30,0x3f,0xfc,0x00,0x3b,0xff,0x80,0x00,
 0x1f,0xf0,0x00,0x00,0x1f,0x00,0x00,0x00};

void textout(int x, int y, char &str[], int type)
{
	TextOut(x, y, str, type|3);
	TextOut(x, y + 1, str, type|3);
	TextOut(x, y + 2, str, type|3);
	TextOut(x + 1, y, str, type|3);
	TextOut(x + 1, y + 1, str, type|3);
	TextOut(x + 1, y + 2, str, type|3);
	TextOut(x + 2, y, str, type|3);
	TextOut(x + 2, y + 1, str, type|3);
	TextOut(x + 2, y + 2, str, type|3);
	TextOut(x + 1, y + 1, str, (type&0xfc)|0x0c);
}

void Boxw(int x, int y, char &tag[])
{
	Rectangle(x, y, x + strlen(tag) * 6 + 7, y + 13, 1);
	TextOut(x + 4, y + 1, tag, 1);
}

void Button(int x, int y, char &tag[], int cmd)/*按钮*/
{
	int len;

	len = x + strlen(tag) * 6 + 2;
	if (cmd == BUTTON_UP)
	{
		Block(x + 1, y + 1, len + 1, y + 14, 1);
		Block(x, y, len, y + 13, 0);
		TextOut(x + 1, y + 1, tag, 1);
		Rectangle(x, y, len, y + 13, 1);
	}
	else if (cmd == BUTTON_DOWN)
	{
		Box(x, y, len, y + 13, 1, 1);
		Delay(cfset.dat[3].tem[0].value * 5);
		Refresh();
	}
}

void Sbox(int x1, int y1, int x2, int y2)
{
	Line(x1 + 1, y1, x2 - 1, y1, 65);
	Line(x1 + 1, y2, x2 - 1, y2, 65);
	Line(x1, y1 + 1, x1, y2 - 1, 65);
	Line(x2, y1 + 1, x2, y2 - 1, 65);
}

void Dwin(char &tag[])/*大框框*/
{
	ClearScreen();
	//TextOut(3, 2, tag, 1);
	textout(3, 1, tag, 1);
	Rectangle(1, 0, 159, 79, 1);
	Sbox(120, 2, 131, 13);
	Rectangle(122, 10, 129, 11, 1);
	Sbox(133, 2, 144, 13);
	Rectangle(135, 4, 142, 11, 1);
	Line(135, 5, 142, 5, 65);
	Sbox(146, 2, 157, 13);
	Line(149, 5, 154, 10, 65);
	Line(149, 10, 154, 5, 65);
	Line(1, 15, 159, 15, 65);
	Block(2, 1, 158, 14, 2);
}

int Swin(char &tag[], char &msg[], int type)/*小框框|type:0普通, 1确定, 2选择, 3选择, */
{
	char key;
	char str[3][6];

	strcpy(str[0], "是[Y]");
	strcpy(str[1], "否[N]");
	strcpy(str[2], "确 定");
	Block(15, 18, 141, 73, 0);
	Rectangle(15, 18, 140, 72, 1);
	Line(141, 19, 141, 73, 65);
	Line(16, 73, 141, 73, 65);
	//TextOut(17, 20, tag, 1);
	textout(17, 19, tag, 1);
	Sbox(101, 20, 112, 31);
	Rectangle(103, 28, 110, 29, 1);
	Sbox(114, 20, 125, 31);
	Rectangle(116, 22, 123, 29, 1);
	Line(116, 23, 123, 23, 65);
	Sbox(127, 20, 138, 31);
	Line(130, 23, 135, 28, 65);
	Line(130, 28, 135, 23, 65);
	Line(15, 33, 140, 33, 65);
	if (type == SWIN_COM) return(0);
	TextOut(92 - strlen(msg) * 3, 37, msg, 1);
	if (type == SWIN_ONE)//单按钮
	{
		WriteBlock(17, 35, 32, 32, 1, pic[PIC_WARN]);
		Button(78, 56, str[2], BUTTON_UP);
		Refresh();
		if (!cfset.dat[0].tem[2].value) Beep();
		while (getchar() != CR_KEY);
		Button(78, 56, str[2], BUTTON_DOWN);//响应
	}
	else
	{
		WriteBlock(17, 35, 32, 32, 1, pic[PIC_QUEN]);
		Button(55, 56, str[0], BUTTON_UP);
		Button(98, 56, str[1], BUTTON_UP);
		if (type == SWIN_STW) return(0);
		Refresh();
		for (;;)
		{
			key = getchar();
			if (key == Y_KEY || key == CR_KEY)
			{
				Button(55, 56, str[0], BUTTON_DOWN);
				return(1);
			}
			else if (key==N_KEY || key == ESC_KEY || key == 'q')
			{
				Button(98, 56, str[1], BUTTON_DOWN);
				return(0);
			}
		}
	}
}
#endif

/* 进度显示 */
void Progress(long cur, long len, int cmd)
{
	if(!cmd)
	{
		Block(47, 47, cur * 101 / len + 47, 53, 1);
	}
	else
	{
		Dwin("进度");
		TextOut(98 - (strlen(cur) << 2), 22, cur, 0x81);
		TextOut(3, 63, "状态:", 1);
		Button(34, 61, len, BUTTON_UP);
		Block(45, 45, 150, 55, 0);
#if WQX == 0
		MyBox(45, 45, 150, 55, 1);
#else
		Rectangle(45, 45, 150, 55, 1);
#endif
		WriteBlock(8, 20, 32, 32, 1, pic[PIC_BUSY]);
	}
	Refresh();
}

/* 退出画面 */
void Exit()
{
	char n;

	Dwin("退出");
	textout(48, 30, "谢谢使用", 0x81);
	TextOut(4, 53, "yan制作", 1);
	TextOut(4, 65, "Email:yanggynb@163.com", 1);
	Refresh();//刷新
	for (n = 0; n < 100; n++)
	{
		Delay(20);
		if (Inkey()) return;
	}
}

void Success(int cmd)//0:h,1:lav,2:y,3:lav(优化)
{
	char msg[16], i;

	Dwin("成功");
	TextOut(48, 24, "任务完成", 129);
	Rectangle(46, 22, 113, 41, 1);
	Rectangle(44, 20, 115, 43, 1);
	Line(2, 62, 158, 62, 65);
	Line(2, 76, 158, 76, 65);//图形
	TextOut(2, 50, "名称:", 9);
	strcpy(msg, out.name);
	if (strlen(msg) > 8)
	{
		for (i = 0; i < 7; i++)
		{
			if (msg[i] > 128)
			{
				if (i > 5) break;
				i++;
			}
		}
		strcpy(msg + i, "~");
	}
	TextOut(32, 50, msg, 1);//显示名称
	TextOut(80, 50, "认证:", 9);
	if (cmd)
	{
		sprintf(msg, "%dB", cp.add[VGLOBOLE] - 0x2000);
	}
	else
	{
		strcpy(msg, "0B");
	}
	TextOut(110, 50, msg, 1);
	TextOut(80, 64, "目录:", 9);//目录
	if (cmd == 2)
	{
		TextOut(110, 64, libdata, 1);
	}
	else if (cmd)
	{
		in.size = cp.offset;
		TextOut(110, 64, cfset.lav, 1);
	}
	else
	{
		TextOut(110, 64, fundata, 1);
	}
	TextOut(2, 64, "大小:", 9);
	sprintf(msg, "%dB", in.size);
	TextOut(32, 64, msg, 1);//显示大小
	Refresh();
	if (!cfset.dat[0].tem[2].value)//刷新，声音
	{
		Beep();
		Delay(100);
		Beep();
	}
	for (i = 0; i < 255 | !cfset.dat[1].tem[3].value; i++)//暂停
	{
		Delay(20);
		if (Inkey()) return;
	}
}

void PrintMsg(char &s[][30], char type)
{
	char i;

	if (type)
	{
		Dwin("配置");
	}
	else
	{
		Dwin("帮助");
	}
	for (i = 0; i < 5 && s[i][0]; i++)
	{
		TextOut(4, i * 12 + 17, s[i], 1);
	}
	Refresh();
	Line(3, 17, 157, 17, 0x40);
}
void ShowSet()
{
	char key;
	char s[5][30];

_S1:
	strcpy	(s[0], "帮助系统:");
	sprintf	(s[1], " 最大载入文本:%d字节", HLP_L_SIZE * 25);
	sprintf	(s[2], " 最大索引个数:%d个", HPFUN_L_LEN * 2);
	strcpy	(s[3], "编辑系统:");
	sprintf	(s[4], " 缓冲区大小:%d字节", TXT_SIZE);
	PrintMsg(s, 1);
	key = getchar();
	if (key == UP_KEY || key == UU_KEY || key == LEFT_KEY) goto _S1;
	if (key == ESC_KEY || key == 'q') return;
_S2:
	sprintf	(s[0], " 最大可编辑:%d字节", TXT_B_SIZE * TXT_T_SIZE);
	sprintf	(s[1], " 剪切板大小:%d字节", CLI_SIZE);
	sprintf	(s[2], " 最大检索个数:%d个", SKFUN_L_LEN);
	strcpy	(s[3], "编译系统:");
	sprintf	(s[4], " 支持最大变量个数:%d个", VAR_SIZE);
	PrintMsg(s, 1);
	key = getchar();
	if (key == UP_KEY || key == UU_KEY || key == LEFT_KEY) goto _S1;
	if (key == ESC_KEY || key == 'q') return;
_S3:
	sprintf	(s[0], " 最大变量名长度:%d字节", MAC_N_LEN - 1);
	sprintf	(s[1], " 数组最大维数:%d维", DIM_MAX - 1);
	sprintf	(s[2], " 支持最大嵌套层:%d层", N_A_MAX);
	sprintf	(s[3], " 跳转表大小:%d个", JP_SIZE);
	sprintf	(s[4], " 最大y库包含个数:%d个", LIB_SIZE);
	PrintMsg(s, 1);
	key = getchar();
	if (key == UP_KEY || key == UU_KEY || key == LEFT_KEY) goto _S2;
	if (key == ESC_KEY || key == 'q') return;
_S4:
	strcpy	(s[0], "宏管理系统:");
	sprintf	(s[1], " 最大文件夹个数:%d个", DOC_D_SIZE);
	sprintf	(s[2], " 最大宏定义个数:%d个", MAC_M_SIZE);
	strcpy	(s[3], "链接库系统:");
	sprintf	(s[4], " 支持最大函数个数:%d个", LIB_N_LEN);
	PrintMsg(s, 1);
	key = getchar();
	if (key == UP_KEY || key == UU_KEY || key == LEFT_KEY) goto _S3;
	if (key == ESC_KEY || key == 'q') return;
_S5:
	strcpy	(s[0], "资源管理系统:");
	sprintf	(s[1], " 最大记录个数:%d个", SRC_M_SIZE);
	sprintf	(s[2], " 最大描述长度:%d字节", SRC_D_LEN - 1);
	strcpy	(s[3], "优化系统:");
	sprintf	(s[4], " 最大函数个数:%d个", FUN_MAX);
	PrintMsg(s, 1);
	key = getchar();
	if (key == UP_KEY || key == UU_KEY || key == LEFT_KEY) goto _S4;
	if (key == ESC_KEY || key == 'q') return;
	sprintf	(s[0], " 最大堆栈深度:%d层", STACK_MAX);
	sprintf	(s[1], " 最大节点个数:%d个", TREE_MAX);
	sprintf	(s[2], " 跳转表记录个数:%d个", MAP_MAX);
	s[3][0] = 0;
	PrintMsg(s, 1);
	key = getchar();
	if (key == UP_KEY || key == UU_KEY || key == LEFT_KEY) goto _S5;
}

void ShowHelp()
{
	char key;
	char s[5][30];

_S1:
	strcpy(s[0], "方向键    :上一行或下一行");
	strcpy(s[1], "ESC键,q键 :返回上一级界面");
	strcpy(s[2], "输入键    :执行菜单项目");
	strcpy(s[3], "求助键    :显示求助信息");
	strcpy(s[4], "编译文本: 编译程序，编译");
	PrintMsg(s, 0);
	key = getchar();
	if (key == UP_KEY || key == UU_KEY || key == LEFT_KEY) goto _S1;
	if (key == ESC_KEY || key == 'q') return;
_S2:
	strcpy(s[0], "  *.txt或*.h为*.lav程序");
	strcpy(s[1], "链接生成: 制作*.y链接库，");
	strcpy(s[2], "  制作方法请查看帮助-简介");
	strcpy(s[3], "批处理: 执行批处理文件，");
	strcpy(s[4], "  制作方法请查看帮助-简介");
	PrintMsg(s, 0);
	key = getchar();
	if (key == UP_KEY || key == UU_KEY || key == LEFT_KEY) goto _S1;
	if (key == ESC_KEY || key == 'q') return;
_S3:
	strcpy(s[0], "设置: 设置软件配置。");
	strcpy(s[1], "优化: 优化*.lav程序，");
	strcpy(s[2], "  详细信息请查看帮助-简介");
	strcpy(s[3], "卸载: 卸载本软件，只对运");
	strcpy(s[4], "  行于文曲星上有效");
	PrintMsg(s, 0);
	key = getchar();
	if (key == UP_KEY || key == UU_KEY || key == LEFT_KEY) goto _S2;
	if (key == ESC_KEY || key == 'q') return;
_S4:
	strcpy(s[0], "宏管理: 查看内置宏管理");
	strcpy(s[1], "链接库: 查看本机的*.y文件");
	strcpy(s[2], "资源: 查看和制作数据文件,");
	strcpy(s[3], "  详细信息请查看帮助-简介");
	strcpy(s[4], "配置: 查看本软件详细配置");
	PrintMsg(s, 0);
	key = getchar();
	if (key == UP_KEY || key == UU_KEY || key == LEFT_KEY) goto _S3;
	if (key == ESC_KEY || key == 'q') return;
}

void ShowMeiri(long rel, int j, int size)
{
	char i,n;
	char s[4][17];

	memset(s, 0, 17 * 4);
	if (size - j > 4)
	{
		n = 4;
	}
	else
	{
		n = size - j;
	}
	fseek(datfp, rel + j * 17, 0);
	fread(s, 1, n * 17, datfp);
	for (i = 0; i < n && s[i][0]; i++)
	{
		TextOut(8, i * 14 + 22, s[i], 1);
	}
}

/* 子菜单 */
int SubMenu(int s, char num, char x, char y)
{
	char value, key;
	char str[16], len, i;

	value = 0;
	len = strlen(s) / num;
	for (;;)
	{
#if WQX == 0
		SetBgColor(0);
		Block(x - 1, y - 1, x + len * 6 + 11, y + num * 14 + 4, 0);
		MyBox(x, y, x + len * 6 + 10, y + num * 14 + 3, 4);
#else
		Block(x - 1, y - 1, x + len * 6 + 11, y + num * 14 + 4, 0);
		Rectangle(x, y, x + len * 6 + 10, y + num * 14 + 3, 1);
#endif
		for (i = 0; i < num; i++)
		{
			memset(str, 0, 16);
			memcpy(str, s + len * i, len);
			TextOut(x + 5, y + i * 14 + 3, str, 1);
		}
		Block(x + 2, y + value * 14 + 2, x + len * 6 + 8, y + value * 14 + 15, 2);
		Refresh();
		key = getchar();//响应
		if (key == UP_KEY)
		{
			if (value)
			{
				value--;
			}
			else
			{
				value = num - 1;
			}
		}
		else if (key == DOWN_KEY)
		{
			if (value + 1 < num)
			{
				value++;
			}
			else
			{
				value = 0;
			}
		}
		else if (key == CR_KEY) return(value + 4);
		else if (key == ESC_KEY || key == 'q') return(0);
	}
}

int Menu(char value)/*主菜单*/
{
	long rel, n;//偏移地址
	int k, size;
	char key, tv;
	char i, j, flag;//动画

	funjmp = &value - 5;
	i = 0;
	j = 40;
	flag = 1;
	if (value == 12)
	{
		value = 1;
	}
	else if (value >= 13)
	{
		value = 0;
	}
	else if (value >= 9)
	{
		value = 2;
	}
	else if (value >= 6)
	{
		value = 0;
	}
	if (!cfset.dat[3].tem[2].value)
	{
		rel = DataRead(&k, 0, DAT_EVERY);//读取每日提示地址
		if(rel > 0)
		{
			fseek(datfp, rel, 0);
			fread(&size, 1, 2, datfp);
			rel = rel + 2;
			flag = k = n = 0;
		}
		else cfset.dat[3].tem[2].value = 1;
	}
START:
#if WQX == 0
	SetBgColor(3);
#endif
	ClearScreen();
	for(;;)
	{
		Block(1, 0, 160, 17, 1);
#if WQX == 0
		SetBgColor(0);
#endif
		TextOut(i + 4, 3, "LavaX1.0 Compiler", 2);
#if WQX == 0
		SetBgColor(3);
#endif
		Rectangle(2, 1, 158, 16, 0);
		if (!cfset.dat[0].tem[1].value)//移动
		{
			if (i)
			{
				i--;
			}
			else if (j)
			{
				j--;
			}
			else
			{
				i = 158;
				j = 40;
			}
		}
		Block(2, 18, 158, 78, 0);
#if WQX == 0
		MyBox(2, 20, 110, 77, 4);
#else
		Rectangle(2, 20, 110, 77, 1);
#endif
		if (flag)
		{
			textout(11, 40, "Y2.26正式版", 0x81);
		}
		else if (!cfset.dat[3].tem[2].value && rel > 0)
		{
			ShowMeiri(rel, k, size);
		}
		n++;
		if (n > 80)
		{
			n = 0;
			k++;
			if (k >= size) flag = 1;
		}
#if WQX == 0
		Boxw(120, 19, "文 件");
		Boxw(120, 34, "工 具");
		Boxw(120, 49, "查 看");
		Boxw(120, 64, "帮 助");
		Block(121, value * 15 + 20, 152, value * 15 + 31, 2);
#else
		Boxw(118, 19, "文 件");
		Boxw(118, 34, "工 具");
		Boxw(118, 49, "查 看");
		Boxw(118, 64, "帮 助");
		Block(119, value * 15 + 20, 154, value * 15 + 31, 2);
#endif
		Refresh();
		key = Inkey();//响应
		if (!key) continue;
		if (key == UP_KEY | key == LEFT_KEY) value = (value - 1)&3;
		else if (key == DOWN_KEY | key == RIGHT_KEY) value = (value + 1)&3;
		else if (key == CR_KEY)
		{
			if (!value)
			{
				if (!(tv = SubMenu("编译打开新建", 3, 100, 22))) goto START;
				if (tv == 4)
				{
					if (!(tv = SubMenu("编译文本链接生成批 处 理", 3, 54, 28))) goto START;
					if (tv != 4)
					{
						tv = tv + 6;
					}
				}
				value = tv + 2;
			}
			else if (value == 1)
			{
				if (!(tv = SubMenu("设置优化卸载", 3, 100, 32))) goto START;
				if (tv == 6)
				{
					if (!Swin("卸载？", "确定要卸载？", SWIN_TWO)) continue;
					UnInstall(LIST_TABLE);
				}
				if (tv == 4)
				{
					value = 1;
				}
				else
				{
					value = 12;
				}
			}
			else if (value == 2)
			{
				if (!(tv = SubMenu("宏管理链接库资  源配  置", 4, 88, 18))) goto START;
				if (tv == 7)
				{
					ShowSet();
					goto START;
				}
				value = tv + 5;
			}
			return(value);
		}
		else if (key == ESC_KEY | key == 'q')
		{
			if (cfset.dat[0].tem[0].value)
			{
				if (!Swin("退出？", "  真的要退出？", SWIN_TWO)) continue;
			}
			if (datfp) fclose(datfp);
			Exit();
			exit(0);
		}
		else if (key == HELP_KEY)
		{
			ShowHelp();
			goto START;
		}
	}
}