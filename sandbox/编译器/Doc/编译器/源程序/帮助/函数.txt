//*******************************************************帮助系统*******************************************************//
void HelpHelp1()
{
	char s[5][30];

	strcpy(s[0], "F3键      :跳转到文本头部");
	strcpy(s[1], "F4键      :跳转到文本尾部");
	strcpy(s[2], "ESC键,q键 :返回上一级界面");
	strcpy(s[3], "方向键    :上一行或下一行");
	strcpy(s[4], "翻页键    :上一页或下一页");
	PrintMsg(s, 0);
	getchar();
}

int GetText(struct HLPTABLE &h, char &buf[], int sm, int i, long add, char fp)//分析文本, 返回新的指针i(最大行)
{
	char k, l;//当前行长度
	char j, c;//缓冲区

START:
	fseek(fp, add, 0);
	fread(buf, 1, 5 * (HLP_S_LEN - 1) + 1, fp);//读取数据
	for (j = l = 0; i < HLP_L_SIZE && l < 5; l++)//换行
	{
		for (k = 0; k < HLP_S_LEN - 1; k++)
		{
			if ((c = buf[j++]) < 128)
			{
				if (c == 13)
				{
					j++;
					if (!k)
					{
						k = h.size[--i];
						l--;
					}
					k = k + 2;
					break;
				}
				else if (!c)
				{
END:
					if (k) h.size[i++] = k;
					h.f = 1;
					goto RET;
				}
			}
			else if (k < HLP_S_LEN - 2)
			{
				if (!buf[j]) goto END;
				k++;
				j++;
			}
			else
			{
				j--;
				break;
			}
		}
		h.size[i++] = k;
	}
	if (i >= HLP_L_SIZE)
	{
		Swin("警告！", "无法全部载入", 1);
	}
	else if (sm)
	{
		add = add + j;
		goto START;
	}
RET:
	return(i);
}

/* 文本浏览 */
void PrintHlp(struct HLPTABLE &h, long rel, char fp, int s)
{
	char key;
	int size;//size:文件长度
	long dcur;//当前文件地址
	int i, tlen;//临时变量
	int j, len;//当前行，最大行
	char c, p, str[HLP_S_LEN], buf[5 * (HLP_S_LEN - 1) + 1];//缓冲区

	Swin("信息", NULL, SWIN_COM);
	//TextOut(43, 46, "载入中...", 128);
	textout(43, 46, "载入中...", 128);
	Refresh();
	if (!fp)
	{
		rel = DataRead(h, 0, rel);
		fp = datfp;
	}
	fseek(fp, rel, 0);
	fread(&size, 1, 2, fp);
	dcur = rel = ftell(fp);//确定地址，长度
	memset(h, 0, sizeof(struct HLPTABLE));//初始化
	if (s)
	{
		strcpy(str, "链接库:");
		strcat(str, s);
		Dwin(str);
	}
	else
	{
		Dwin("帮助");
	}
	for (j = len = 0;;)
	{
		if ((tlen = GetText(h, buf, 0, j, dcur, fp)) > len) len = tlen;
START:
#if WQX == 0
		Block(4, 18, 157, 76, 0);
		MyBox(4, 18, 150, 76, 1);
		SetBgColor(8);
		Line(5, 19, 5, 74, 64);
		Line(5, 19, 148, 19, 64);
		MyBox(152, 18, 157, 76, 1);
		for (i = p = 0; i < 4 && i + j < len; i++)
		{
			for (c = h.size[i + j]; *(buf + p + c - 1) == 10; c = c - 2);
			memcpy(str, buf + p, c);
			str[c] = 0;
			TextOut(6, i * 13 + 23, str, 1);
			p = p + h.size[i + j];
		}
		Block(154, ((dcur - rel) * 54) / size + 20, 155, ((dcur + p - rel) * 54) / size + 20, 1);//进度显示
#else
		Block(2, 16, 158, 78, 0);
		Rectangle(3, 17, 150, 77, 1);
		Rectangle(152, 17, 157, 77, 1);
		for (i = p = 0; i < 4 && i + j < len; i++)
		{
			for (c = h.size[i + j]; *(buf + p + c - 1) == 10; c = c - 2);
			memcpy(str, buf + p, c);
			str[c] = 0;
			TextOut(5, i * 13 + 23, str, 1);
			p = p + h.size[i + j];
		}
		Block(154, ((dcur - rel) * 56) / size + 19, 155, ((dcur + p - rel) * 56) / size + 19, 1);//进度显示
#endif
		Refresh();
		key = getchar();
		if (key == UP_KEY || key == LEFT_KEY)
		{
			if (j)
			{
				dcur = dcur - h.size[--j];
				break;
			}
		}
		else if (key == DOWN_KEY || key == RIGHT_KEY)
		{
			if (j + 4 < len)
			{
				dcur = dcur + h.size[j++];
				break;
			}
			if (!h.f)
			{
				dcur = dcur + h.size[j++];
				continue;
			}
		}
		else if (key == UU_KEY)
		{
			for (i = 0; i < 4 && j; i++)
			{
				dcur = dcur - h.size[--j];
			}
			break;
		}
		else if (key == DD_KEY)
		{
			if (j + 4 < len)
			{
				for (i = 0; i < 4; i++)
				{
					dcur = dcur + h.size[j++];
				}
				if (!h.f) continue;
				break;
			}
		}
		else if (key == F3_KEY)
		{
			j = 0;
			dcur = rel;
			break;
		}
		else if (key == F4_KEY)
		{
			if (!h.f)
			{
				while (j < len - 1)
				{
					dcur = dcur + h.size[j++];
				}
				len = GetText(h, buf, 1, j, dcur, fp);
			}
			while (j + 4 < len)
			{
				dcur = dcur + h.size[j++];
			}
			break;
		}
		else if (key == ESC_KEY || key == 'q') return;
		else if (key == HELP_KEY)
		{
			HelpHelp1();
			continue;
		}
		if (!cfset.dat[0].tem[2].value) Beep();
	}
	fseek(fp, dcur, 0);
	fread(buf, 1, 4 * (HLP_S_LEN - 1) + 1, fp);
	goto START;
}

#if WQX == 0
void PrintFun(struct HPFUNTABLE &f, int first, int value)/*函数显示*/
{
	int i;

	SetBgColor(3);
	Block(4, 17, 157, 77, 0);
	for (i = 0; i < 8 && i + first < f.size; i++)
	{
		Boxw((i&1) * 83 + 4, (i >> 1) * 15 + 18, f.tem[(first + i) >> 1][(first + i)&1].name);
	}
	Block((value&1) * 83 + 5, (value >> 1) * 15 + 19, (value&1) * 83 + 72, (value >> 1) * 15 + 30, 2);
};
#else
void PrintFun(struct HPFUNTABLE &f, int first, int value)/*函数显示*/
{
	int i;

	Block(2, 16, 158, 78, 0);
	for (i = 0; i < 8 && i + first < f.size; i++)
	{
		Boxw((i&1) * 81 + 3, (i >> 1) * 15 + 19, f.tem[(first + i) >> 1][(first + i)&1].name);
	}
	Block((value&1) * 81 + 4, (value >> 1) * 15 + 20, (value&1) * 81 + 75, (value >> 1) * 15 + 31, 2);
};
#endif

void HelpHelp2()
{
	char key;
	char s[5][30];

_S1:
	strcpy(s[0], "方向键 :上一行或下一行");
	strcpy(s[1], "翻页键 :上一页或下一页");
	strcpy(s[2], "ESC键  :返回上一级界面");
	strcpy(s[3], "输入键 :显示函数详细信息");
	strcpy(s[4], "字母键 :跳转到该字母开头");
	PrintMsg(s, 0);
	key = getchar();
	if (key == UP_KEY || key == UU_KEY || key == LEFT_KEY) goto _S1;
	if (key == ESC_KEY || key == 'q') return;
	strcpy(s[0], "的函数，再次按该键可以跳");
	strcpy(s[1], "转到下一个相同字母开头的");
	strcpy(s[2], "函数，支持大小写函数跳转");
	strcpy(s[3], "求助键 :显示求助信息");
	strcpy(s[4], "F3(F4)键:跳转到首(尾)");
	PrintMsg(s, 0);
	key = getchar();
	if (key == UP_KEY || key == UU_KEY || key == LEFT_KEY) goto _S1;
}

long SFunSeekName(struct HPFUNTABLE &f, char c)
{
	long low, mid, high, t;

	low = mid = 0;
	high = f.size - 1;
	while (low <= high)
	{
		mid = (low + high) >> 1;
		t = c - f.tem[mid >> 1][mid&1].name[0];
		if (t > 0)
		{
			low = mid + 1;
		}
		else if (t < 0)
		{
			high = mid - 1;
		}
		else
		{
			while (mid > 0)
			{
				mid--;
				if (c != f.tem[mid >> 1][mid&1].name[0]) return(mid + 1);
			}
			return(0);
		}
	}
	return(-1);
}

void FunHelp(struct HPFUNTABLE &f)/*函数帮助*/
{
	char key, fp;
	char skey;
	char flag;
	long first, cur, t;

	if (!ChDir(cpldata))
	{
		Swin("错误！", "无法进入目录", SWIN_ONE);
		return;
	}
	if (!(fp = fopen(cfset.fun, "r")))
	{
		Swin("错误！", "找不到函数文件", SWIN_ONE);
		return;
	}
	first = key = flag = 0;
	fread(&first, 1, 2, fp);
	fseek(fp, first, 0);
	fread(&f.size, 1, 1, fp);//读取长度
	if (f.size > HPFUN_L_LEN * 2)
	{
		Swin("错误！", "函数个数太多", SWIN_ONE);
		fclose(fp);
		return;
	}
	fread(f.tem, 1, f.size * sizeof(struct HPFUNUNIT), fp);
	for (first = cur = 0;;)
	{
		PrintFun(f, first, cur - first);
		Refresh();
		skey = key;
		key = getchar();
		if (key == UP_KEY && cur > 1)
		{
			cur = cur - 2;
			if (cur < first)
			{
				first = first - 2;
			}
		}
		else if (key == DOWN_KEY && cur + 2 < f.size)
		{
			cur = cur + 2;
			if (cur > first + 7)
			{
				first = first + 2;
			}
		}
		else if (key == LEFT_KEY && cur)
		{
			cur--;
			if(cur < first)
			{
				first = first - 2;
			}
		}
		else if (key == RIGHT_KEY && cur + 1 < f.size)
		{
			cur++;
			if (cur > first + 7)
			{
				first = first + 2;
			}
		}
		else if (key == UU_KEY)
		{
			if (first < 8)
			{
				cur = cur - first;
				first = 0;
			}
			else
			{
				first = first - 8;
				cur = cur - 8;
			}
		}
		else if (key == DD_KEY && first + 8 < f.size)
		{
			first = first + 8;
			if ((cur = cur + 8) >= f.size)
			{
				cur = ((f.size >> 1) << 1) + (cur&1) - 2;
			}
			if (cur < first) cur = first;
		}
		else if (key == CR_KEY)
		{
			PrintHlp(HELP_TXT, f.tem[cur >> 1][cur&1].laddr + (f.tem[cur >> 1][cur&1].haddr << 8), fp, 0);
		}
		else if (key == ESC_KEY)
		{
			fclose(fp);
			return;
		}
		else if (isalpha(key))
		{
			if (skey != key)
			{
				skey = toupper(key);
				flag = 0;
FUN_NAME_SEEK:
				t = SFunSeekName(f, skey);
				if (t >= 0)
				{
					flag = 2;
					cur = t;
					if (cur > first + 7 || cur < first) first = cur&(-2);
				}
				else if (flag < 1)
				{
					flag++;
FUN_NAME_CHG:
					if (skey < 'a') skey = tolower(skey);
					else skey = toupper(skey);
					goto FUN_NAME_SEEK;
				}
			}
			else if (flag == 2)
			{
				if (cur + 1 < f.size)
				{
					skey = f.tem[cur >> 1][cur&1].name[0];
					cur++;
					if (f.tem[cur >> 1][cur&1].name[0] != skey)
					{
						flag = 0;
						goto FUN_NAME_CHG;
					}
					if (cur > first + 7)
					{
						first = first + 2;
					}
				}
				else
				{
					flag = 0;
					goto FUN_NAME_CHG;
				}
			}
		}
		else if (key == F3_KEY)
		{
			first = cur = 0;
		}
		else if (key == F4_KEY)
		{
			cur = f.size - 1;
			first = cur&(-2);
		}
		else if (key == HELP_KEY) HelpHelp2();
		else if (!cfset.dat[0].tem[2].value) Beep();
	}
}

void Help()/* 帮助系统[通用] */
{
	int cur[2];

	for (cur[0] = 0;;)
	{
		cur[0] = Cata(CATAL_TABLE, DAT_HLPCAT0, cur[0], CAT_HELP);
		if (cur[0] < 0) return;//返回按键信息
		if (!cur[0])
		{
			PrintHlp(HELP_TXT, DAT_HLPCRT, 0, 0);
		}
		else if (cur[0] == 1)
		{
			for (cur[1] = 0;;)
			{
				cur[1] = Cata(CATAL_TABLE, DAT_HLPCAT1, cur[1], CAT_HELP);
				if (cur[1] < 0) break;
				if (!cur[1])
				{
					PrintHlp(HELP_TXT, DAT_HLPBYX, 0, 0);
				}
				else if (cur[1] == 1)
				{
					PrintHlp(HELP_TXT, DAT_HLPYCL, 0, 0);
				}
				else if (cur[1] == 2)
				{
					PrintHlp(HELP_TXT, DAT_HLPHCL, 0, 0);
				}
				else
				{
					PrintHlp(HELP_TXT, DAT_HLPHBX, 0, 0);
				}
			}
		}
		else if (cur[0] == 2)
		{
			for (cur[1] = 0;;)
			{
				cur[1] = Cata(CATAL_TABLE, DAT_HLPCAT2, cur[1], CAT_HELP);
				if(cur[1] < 0) break;
				if (!cur[1])
				{
					PrintHlp(HELP_TXT, DAT_HLPSJL, 0, 0);
				}
				else if (cur[1] == 1)
				{
					PrintHlp(HELP_TXT, DAT_HLPYJU, 0, 0);
				}
				else if (cur[1] == 2)
				{
					PrintHlp(HELP_TXT, DAT_HLPHSH, 0, 0);
				}
				else
				{
					PrintHlp(HELP_TXT, DAT_HLPYLI, 0, 0);
				}
			}
		}
		else
		{
			FunHelp(HPFUN_TABLE);
		}
	}
}