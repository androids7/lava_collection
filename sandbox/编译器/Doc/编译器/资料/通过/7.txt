/*=======================================================
    Name:CrazyBall
    Ver:Beta 2.2
    COPYRIGHT:CSKSOFT 2004
=========================================================*/
#define DTIME 22

#define UP_KEY 0x14
#define DOWN_KEY 0x15
#define LEFT_KEY 0x16
#define RIGHT_KEY 0x17
#define ENTER_KEY 0xd
#define ESC_KEY  0x1b

#define AREA_TOP 40
#define AREA_LEFT 40
#define AREA_RIGHT 1100

#define BLOCK_OFFSETX  2
#define BLOCK_OFFSETY  1

#define BLOCK_HEIGHT 5
#define BLOCK_WIDTH 10

#define WALL_LEFT 80
#define WALL_RIGHT 1070

//////////////////////GainItem
#define BALL_RELIFE  1         //0000 0001
#define BALL_SRINK   2         //0000 0010
#define BALL_THROUGH 16        //0001 0000
#define BALL_FIRE    32        //0010 0000
#define BALL_MAG     64        //0100 0000
///^MixProperty
#define BALL_SUPER           65       
#define BALL_SPEEDUP         129
#define BALL_SLOWDOWN        130
#define BALL_LIFE            131
#define BALL_KILL            133
#define BALL_DOUBLE          134

#define BALL_STKEXPAND          135
#define BALL_STKSRINK           136
#define BALL_FREEPASS           137
///////////////////////////

#define STICK_HEIGHT 730
#define STICK_SPEED 50
#define STICK_LENGTH 180
#define STICK_MINLENGTH 80
#define STICK_MAXLENGTH 480

#define FAST_SPEED 24
#define STD_SPEED  20
long aaa;
char ball[]={0x60, 0xd0, 0xf0, 0x60};
char block1[]={0x7f, 0x80, 0xaa, 0xc0, 0xd5, 0x40, 0xaa, 0xc0, 0x7f, 0x80};
char block2[]={0x7f, 0x80, 0x80, 0x40, 0xbf, 0x40, 0x80, 0x40, 0x7f, 0x80};
char block3[]={0x00, 0x00, 0x7f, 0xc0, 0x7f, 0xc0, 0x7f, 0xc0, 0x7f, 0xc0};


char ITEM_Mag[]={0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x00,
0x00, 0x00, 0x12, 0x00, 0x00, 0x00, 0x12, 0x00, 0x00, 0x00, 0x0c, 0x00, 0xff, 0xff, 0xff, 0xe0,
0x80, 0x00, 0x00, 0x20, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00};

char ITEM_Relife[]={0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x80, 0x40, 0x00, 0x00, 0x40, 0xa0, 0x00, 0x00, 0x20, 0x47, 0xff, 0xc0, 0x10, 0x87, 0xff, 0xc0,
0x0b, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xf0};

char ITEM_LIFE[]={0xff, 0xff, 0xff, 0xe0, 0x80, 0x00, 0x00, 0x20, 0x80, 0x04, 0x97, 0x20, 0x80, 0x0c, 0x94, 0xa0,
0x80, 0x24, 0x94, 0xa0, 0x86, 0x74, 0x94, 0xa0, 0x8d, 0x24, 0x97, 0x20, 0x8f, 0x04, 0x94, 0x20,
0x86, 0x0e, 0x64, 0x20, 0x80, 0x00, 0x00, 0x20, 0xff, 0xff, 0xff, 0xe0};

char ITEM_SUPER[]={0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x19, 0x2e, 0x7b, 0x80, 0x25, 0x29, 0x42, 0x40,
0x21, 0x29, 0x42, 0x40, 0x19, 0x29, 0x73, 0x80, 0x05, 0x2e, 0x43, 0x00, 0xc5, 0x28, 0x42, 0xa0,
0x98, 0xc8, 0x7a, 0x60, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00};

char ITEM_DOWN[]={0xff, 0xff, 0xff, 0xe0, 0x80, 0x00, 0x00, 0x20, 0x84, 0x45, 0xc8, 0xa0, 0x88, 0x89, 0x2a, 0xa0,
0x91, 0x11, 0x2a, 0xa0, 0xa2, 0x21, 0x2a, 0xa0, 0x91, 0x11, 0x2a, 0xa0, 0x88, 0x89, 0x25, 0x20,
0x84, 0x45, 0xc5, 0x20, 0x80, 0x00, 0x00, 0x20, 0xff, 0xff, 0xff, 0xe0};


char ITEM_STKEXPAND[]={0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x02, 0x00, 0x08, 0x00, 0x01, 0x00, 0x1f, 0xf9, 0xff, 0x80,
0x30, 0x09, 0x00, 0xc0, 0x6f, 0xf9, 0xff, 0x60, 0x30, 0x09, 0x00, 0xc0, 0x1f, 0xf9, 0xff, 0x80,
0x08, 0x00, 0x01, 0x00, 0x04, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00};

char ITEM_FIRE[]={0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x29, 0xff, 0xff, 0x80, 0x11, 0x00, 0x00, 0x80,
0x29, 0x3a, 0xb8, 0x80, 0x07, 0x13, 0x90, 0x80, 0x01, 0x12, 0x90, 0x80, 0x01, 0xff, 0xff, 0x80,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};

char ITEM_PASS[]={0xff, 0xff, 0xff, 0xe0, 0x80, 0x00, 0x00, 0x20, 0x91, 0x7a, 0x2f, 0xa0, 0x99, 0x42, 0x22, 0x20,
0x99, 0x41, 0x42, 0x20, 0x95, 0x70, 0x82, 0x20, 0x93, 0x41, 0x42, 0x20, 0x93, 0x42, 0x22, 0x20,
0x91, 0x7a, 0x22, 0x20, 0x80, 0x00, 0x00, 0x20, 0xff, 0xff, 0xff, 0xe0};

char ITEM_UP[]={0xff, 0xff, 0xff, 0xe0, 0x80, 0x00, 0x00, 0x20, 0x91, 0x10, 0x97, 0x20, 0x88, 0x88, 0x94, 0xa0,
0x84, 0x44, 0x94, 0xa0, 0x82, 0x22, 0x94, 0xa0, 0x84, 0x44, 0x97, 0x20, 0x88, 0x88, 0x94, 0x20,
0x91, 0x10, 0x64, 0x20, 0x80, 0x00, 0x00, 0x20, 0xff, 0xff, 0xff, 0xe0};

char ITEM_THROUGH[]={0xff, 0xff, 0xff, 0xe0, 0x80, 0x00, 0x00, 0x20, 0x87, 0xff, 0x9c, 0x20, 0x80, 0x00, 0x00, 0x20,
0x87, 0xfd, 0xfc, 0x20, 0x80, 0x00, 0x00, 0x20, 0x87, 0xef, 0xfc, 0x20, 0x80, 0x00, 0x00, 0x20,
0x86, 0x7f, 0xfc, 0x20, 0x80, 0x00, 0x00, 0x20, 0xff, 0xff, 0xff, 0xe0};

char ITEM_STKSRINK[]={0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x10, 0x00, 0x00, 0x80, 0x20, 0x00, 0xff, 0xc0, 0x7f, 0xe0,
0x00, 0x60, 0xc0, 0x00, 0xff, 0xb1, 0xbf, 0xe0, 0x00, 0x60, 0xc0, 0x00, 0xff, 0xc0, 0x7f, 0xe0,
0x00, 0x80, 0x20, 0x00, 0x01, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00};

char ITEM_KILL[]={0x1f, 0xe0, 0x00, 0x00, 0x00, 0x20, 0x10, 0x00, 0x00, 0x00, 0x40, 0x08, 0x00, 0x00, 0x00, 0x40,
0x08, 0x00, 0x00, 0x00, 0x40, 0x08, 0x00, 0x00, 0x00, 0x4c, 0xc8, 0x00, 0x00, 0x00, 0x2c, 0xd0,
0x00, 0x00, 0x00, 0x20, 0x30, 0x00, 0x00, 0x00, 0x13, 0x24, 0x00, 0x00, 0x00, 0x0b, 0x59, 0x9c,
0x9d, 0x40, 0xd4, 0xe1, 0x51, 0x49, 0x40, 0x75, 0xb1, 0x59, 0xc9, 0xc0, 0x4f, 0x51, 0x51, 0x49,
0x40, 0x19, 0xc1, 0x9d, 0x49, 0x40};

char ITEM_DOUBLE[]={0x00, 0x01, 0x06, 0x00, 0x00, 0x00, 0x01, 0x8b, 0x00, 0x00, 0x00, 0x03, 0xcf, 0x00, 0x00, 0x00,
0x0d, 0x86, 0x00, 0x00, 0x18, 0x71, 0x00, 0x00, 0x00, 0x2c, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x00,
0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x71, 0x00, 0x00, 0x00, 0x00, 0x0d, 0x86,
0x00, 0x00, 0x00, 0x03, 0xcb, 0x00, 0x00, 0x00, 0x01, 0x8f, 0x00, 0x00, 0x00, 0x01, 0x06, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00};

char Msg_HighScore[]={
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x0f, 0x00, 0x00, 0x07, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x11, 0xe0, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x03, 0xe0, 0x30, 0x60, 0x00, 0x08, 0x00, 0x00, 0x1f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00,
0x0c, 0x60, 0x60, 0x00, 0x00, 0x18, 0x00, 0x00, 0x61, 0x80, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00,
0x10, 0x60, 0x60, 0x00, 0x00, 0x18, 0x00, 0x00, 0xc1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00,
0x20, 0xc0, 0x40, 0x00, 0x00, 0x18, 0x00, 0x01, 0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00,
0x20, 0xc0, 0xc0, 0x00, 0x00, 0x30, 0x00, 0x01, 0x81, 0x00, 0x00, 0x00, 0x01, 0x80, 0x06, 0x00,
0x30, 0xc0, 0xc1, 0x80, 0x3e, 0x31, 0xc0, 0x01, 0x80, 0x07, 0x01, 0xe0, 0x33, 0x8e, 0x06, 0x00,
0x30, 0xc0, 0x87, 0x80, 0xfc, 0x33, 0xc0, 0x01, 0xc0, 0x1f, 0x86, 0x30, 0xf4, 0x33, 0x04, 0x00,
0x01, 0x81, 0x8d, 0x81, 0x8c, 0x34, 0xc0, 0x00, 0xe0, 0x31, 0x8c, 0x19, 0x68, 0x63, 0x04, 0x00,
0x01, 0xff, 0x89, 0x83, 0x0c, 0x78, 0xc0, 0x00, 0xf0, 0x20, 0x08, 0x1a, 0x70, 0x46, 0x04, 0x00,
0x01, 0x81, 0x83, 0x02, 0x18, 0x60, 0xc0, 0x00, 0x78, 0x60, 0x10, 0x18, 0x60, 0xcc, 0x04, 0x00,
0x03, 0x81, 0x03, 0x06, 0x18, 0x61, 0x80, 0x00, 0x38, 0x40, 0x30, 0x18, 0x60, 0x98, 0x08, 0x00,
0x03, 0x03, 0x03, 0x04, 0x18, 0x41, 0x80, 0x00, 0x1c, 0xc0, 0x30, 0x18, 0xc1, 0xe0, 0x08, 0x00,
0x03, 0x03, 0x03, 0x0c, 0x38, 0xc1, 0x80, 0x00, 0x0c, 0xc0, 0x30, 0x10, 0xc1, 0x80, 0x00, 0x00,
0x02, 0x03, 0x07, 0x4c, 0x30, 0xc3, 0x00, 0x00, 0x0c, 0xc1, 0x30, 0x30, 0xc1, 0x82, 0x00, 0x00,
0x06, 0x06, 0x06, 0xcc, 0x70, 0xc3, 0x20, 0x30, 0x0c, 0xe2, 0x30, 0x60, 0xc1, 0x8c, 0x18, 0x00,
0x04, 0x06, 0x07, 0x8f, 0xb1, 0x83, 0xc0, 0x30, 0x18, 0xfc, 0x18, 0xc1, 0x81, 0xf8, 0x18, 0x00,
0xcc, 0x07, 0xc6, 0x0e, 0x31, 0x83, 0x00, 0x30, 0x18, 0x70, 0x0f, 0x01, 0x80, 0xe0, 0x18, 0x00,
0x70, 0x00, 0x00, 0x0c, 0x30, 0x00, 0x00, 0x18, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x10, 0x30, 0x00, 0x00, 0x0f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x20, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x60, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x60, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x71, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00

};

char Msg_Congration[]={
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x03, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x07, 0x80, 0x01, 0x80, 0x00, 0x00, 0x00, 0x01, 0xe0, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x0c, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x06, 0x10, 0x00, 0x00, 0x00, 0x00, 0x02,
0x00, 0x0c, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x10, 0x00, 0x00, 0x00, 0x20, 0x06, 0x00,
0x0c, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x18, 0x11, 0xc3, 0x30, 0xf1, 0xe3, 0xdf, 0x39, 0x9c,
0x3d, 0xf3, 0x07, 0x0c, 0xc0, 0x00, 0x18, 0x02, 0x6f, 0x71, 0x37, 0x84, 0xcc, 0x59, 0x98, 0x4c,
0xc7, 0x09, 0xbd, 0xc0, 0x00, 0x10, 0x04, 0x76, 0xb3, 0x3b, 0x8c, 0xcc, 0x13, 0x18, 0xcc, 0xcb,
0x11, 0xda, 0xc0, 0x00, 0x30, 0x0c, 0x67, 0x62, 0x33, 0x08, 0xcc, 0x33, 0x18, 0x8c, 0xc3, 0x31,
0x9d, 0x80, 0x00, 0x30, 0x0c, 0x66, 0x66, 0x23, 0x19, 0x98, 0x23, 0x19, 0x99, 0x86, 0x31, 0x99,
0x80, 0x00, 0x30, 0x0c, 0x46, 0xe6, 0x63, 0x19, 0x9a, 0x66, 0x31, 0x99, 0xa6, 0xb1, 0x1b, 0x80,
0x00, 0x30, 0x0c, 0x8c, 0xf6, 0x66, 0x1f, 0xde, 0x7f, 0xb5, 0xfd, 0xe7, 0x32, 0x33, 0xc0, 0x00,
0x30, 0x47, 0x0c, 0xc7, 0xe6, 0x19, 0x98, 0x66, 0x39, 0x99, 0x86, 0x1c, 0x33, 0x00, 0x00, 0x18,
0x80, 0x00, 0x02, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x00,
0x00, 0x0c, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x18, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18,
0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x80,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00

};

char Sence_ball[]={
0xc4, 0x88, 0x00, 0xaa, 0x88, 0x00, 0xce, 0x88, 0x80, 0xaa, 0x88, 0x00, 0xca, 0xee, 0x80
};

char Sence_stg[]={
0x6e, 0x46, 0xe0, 0x84, 0xa8, 0x80, 0x44, 0xee, 0xe8, 0x24, 0xaa, 0x80, 0xc4, 0xa6, 0xe8
};
char Sence_item[]={
0xee, 0xea, 0x00, 0x44, 0x8e, 0x00, 0x44, 0xee, 0x80, 0x44, 0x8a, 0x00, 0xe4, 0xea, 0x80
};
char Sence_scro[]={
0x66, 0x4c, 0xe0, 0x88, 0xaa, 0x80, 0x48, 0xac, 0xe8, 0x28, 0xaa, 0x80, 0xc6, 0x4a, 0xe8
};

char imgmask[]={
0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xa8, 0x55, 0x55,
0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x54, 0xaa, 0xaa, 0xaa, 0xaa,
0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xa8, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55,
0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x54, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xa8, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55,
0x55, 0x55, 0x55, 0x54, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
0xaa, 0xa8, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x54,
0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xa8, 0x55, 0x55,
0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x54, 0xaa, 0xaa, 0xaa, 0xaa,
0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xa8, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55,
0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x54, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xa8, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55,
0x55, 0x55, 0x55, 0x54, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
0xaa, 0xa8, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x54,
0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xa8, 0x55, 0x55,
0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x54, 0xaa, 0xaa, 0xaa, 0xaa,
0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xa8, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55,
0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x54, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xa8, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55,
0x55, 0x55, 0x55, 0x54, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
0xaa, 0xa8, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x54,
0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xa8, 0x55, 0x55,
0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x54, 0xaa, 0xaa, 0xaa, 0xaa,
0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xa8, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55,
0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x54, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xa8, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55,
0x55, 0x55, 0x55, 0x54, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
0xaa, 0xa8, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x54,
0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xa8, 0x55, 0x55,
0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x54, 0xaa, 0xaa, 0xaa, 0xaa,
0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xa8, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55,
0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x54, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xa8, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55,
0x55, 0x55, 0x55, 0x54, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
0xaa, 0xa8, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x54,
0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xa8, 0x55, 0x55,
0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x54, 0xaa, 0xaa, 0xaa, 0xaa,
0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xa8, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55,
0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x54, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xa8, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55,
0x55, 0x55, 0x55, 0x54, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
0xaa, 0xa8, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x54,
0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xa8, 0x55, 0x55,
0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x54, 0xaa, 0xaa, 0xaa, 0xaa,
0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xa8, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55,
0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x54, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xa8, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55,
0x55, 0x55, 0x55, 0x54, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
0xaa, 0xa8, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x54,
0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xa8, 0x55, 0x55,
0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x54, 0xaa, 0xaa, 0xaa, 0xaa,
0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xa8, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55,
0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x54, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xa8, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55,
0x55, 0x55, 0x55, 0x54, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
0xaa, 0xa8, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x54,
0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xa8, 0x55, 0x55,
0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x54, 0xaa, 0xaa, 0xaa, 0xaa,
0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xa8, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55,
0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x54, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xa8, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55,
0x55, 0x55, 0x55, 0x54, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
0xaa, 0xa8, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x54,
0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xa8, 0x55, 0x55,
0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x54, 0xaa, 0xaa, 0xaa, 0xaa,
0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xa8, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55,
0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x54, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xa8, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55,
0x55, 0x55, 0x55, 0x54
};


char Ani_ball1[]={
   0x00, 0x00, 0x00, 0x01, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0x80, 0x00,
0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1d, 0xdf, 0xff,
0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x8e, 0x9e, 0xbd, 0x80, 0x00, 0x00, 0x00, 0x00, 0xf9,
0xb9, 0x97, 0x9e, 0xe0, 0x00, 0x00, 0x00, 0x03, 0xf2, 0xd0, 0x98, 0xcb, 0x70, 0x00, 0x00, 0x00,
0x07, 0xe7, 0xa0, 0xe8, 0x28, 0xf8, 0x00, 0x00, 0x00, 0x1e, 0x8c, 0xc1, 0x68, 0x1c, 0x7c, 0x00,
0x00, 0x00, 0x3f, 0xff, 0xc1, 0x98, 0x1e, 0x1f, 0x00, 0x00, 0x00, 0x72, 0xff, 0xff, 0xff, 0xff,
0xff, 0x80, 0x00, 0x00, 0x72, 0xa0, 0xc7, 0x0e, 0x19, 0xff, 0xc0, 0x00, 0x00, 0xa5, 0x61, 0x39,
0x09, 0x68, 0xea, 0xe0, 0x00, 0x01, 0x66, 0x41, 0x39, 0x08, 0x88, 0x9a, 0xe0, 0x00, 0x01, 0xa8,
0x61, 0x45, 0x09, 0x64, 0x99, 0x70, 0x00, 0x03, 0xd8, 0xa3, 0x83, 0x0e, 0x14, 0x67, 0x68, 0x00,
0x03, 0x70, 0x96, 0x03, 0x08, 0x0c, 0x61, 0xb8, 0x00, 0x06, 0xd0, 0x9a, 0x02, 0xd8, 0x06, 0x60,
0xbc, 0x00, 0x0d, 0x61, 0x3a, 0x02, 0x28, 0x05, 0x60, 0x74, 0x00, 0x0e, 0x61, 0x4c, 0x02, 0xd8,
0x04, 0xa0, 0x7a, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xf3, 0x70, 0x3b, 0x00, 0x18, 0x7f, 0xff,
0xff, 0xfe, 0x0f, 0xff, 0xff, 0x00, 0x38, 0x56, 0x05, 0x8e, 0x0b, 0xff, 0xff, 0xff, 0x80, 0x38,
0x8a, 0x04, 0x52, 0x08, 0x86, 0x14, 0x36, 0x80, 0x38, 0x96, 0x04, 0x22, 0x08, 0x5a, 0x12, 0x56,
0x80, 0x34, 0xa6, 0x04, 0xd2, 0x08, 0x22, 0x11, 0x93, 0x80, 0x74, 0xc6, 0x09, 0x0e, 0x08, 0x5a,
0x11, 0x8b, 0x40, 0x74, 0x85, 0x0e, 0x02, 0x09, 0x86, 0x12, 0x4b, 0x40, 0x53, 0x84, 0x88, 0x05,
0x0a, 0x02, 0x0c, 0x4b, 0x40, 0x53, 0x04, 0x58, 0x04, 0x8c, 0x01, 0x0c, 0x2a, 0xc0, 0xe7, 0x04,
0x68, 0x04, 0x78, 0x01, 0x88, 0x1a, 0xc0, 0xa9, 0x08, 0x98, 0x04, 0x38, 0x01, 0x78, 0x0b, 0x40,
0xff, 0xff, 0xff, 0xff, 0xff, 0xf9, 0x38, 0x07, 0x60, 0xff, 0x8e, 0x0c, 0x05, 0x8c, 0x07, 0xff,
0xc7, 0x60, 0xe1, 0xff, 0xfb, 0x06, 0x0a, 0x01, 0x8c, 0x3f, 0xa0, 0xa1, 0x38, 0x0f, 0xff, 0xff,
0xff, 0xff, 0xff, 0xe0, 0x71, 0x18, 0x08, 0x5c, 0x08, 0x87, 0x12, 0x0f, 0x60, 0x71, 0x2c, 0x08,
0x24, 0x08, 0x49, 0x12, 0x17, 0x40, 0x79, 0x4a, 0x08, 0x5c, 0x08, 0x31, 0x11, 0x6b, 0xc0, 0x74,
0xc9, 0x05, 0x84, 0x08, 0x6a, 0x10, 0x8b, 0xc0, 0x74, 0x88, 0x86, 0x06, 0x08, 0x86, 0x11, 0x8d,
0x40, 0x73, 0x84, 0x64, 0x05, 0x0b, 0x02, 0x12, 0x4f, 0x80, 0x31, 0x84, 0x1c, 0x04, 0x8c, 0x03,
0x24, 0x37, 0x80, 0x2b, 0x84, 0x2c, 0x04, 0x68, 0x02, 0xa8, 0x35, 0x80, 0x2f, 0xff, 0xff, 0xfc,
0x38, 0x02, 0x70, 0x19, 0x80, 0x3c, 0xe5, 0x86, 0x07, 0xff, 0xff, 0xff, 0x19, 0x00, 0x1f, 0xd6,
0x05, 0x84, 0x8c, 0x04, 0xa0, 0xfd, 0x00, 0x1c, 0x7f, 0xfe, 0x47, 0x0a, 0x05, 0x60, 0x3f, 0x00,
0x0c, 0x26, 0x03, 0xff, 0xfd, 0x06, 0x5f, 0xfa, 0x00, 0x06, 0x2b, 0x02, 0x1c, 0x0b, 0xff, 0xf0,
0xf6, 0x00, 0x07, 0x9a, 0x82, 0x14, 0x10, 0x5c, 0x91, 0x5c, 0x00, 0x03, 0x59, 0x62, 0x26, 0x10,
0x68, 0x96, 0xf8, 0x00, 0x03, 0x39, 0x12, 0x45, 0x10, 0xa9, 0x09, 0xa8, 0x00, 0x01, 0x98, 0x89,
0x84, 0xd3, 0x19, 0x39, 0xf0, 0x00, 0x00, 0x9c, 0x87, 0x04, 0x34, 0x19, 0x4b, 0xd0, 0x00, 0x00,
0xdf, 0xff, 0xff, 0xff, 0x96, 0x8b, 0x60, 0x00, 0x00, 0x63, 0x49, 0x84, 0x70, 0x7f, 0xc6, 0x40,
0x00, 0x00, 0x3f, 0xf0, 0xe4, 0xa8, 0x16, 0x3e, 0xc0, 0x00, 0x00, 0x1d, 0xff, 0x97, 0x28, 0x3c,
0x1b, 0x80, 0x00, 0x00, 0x0f, 0x78, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x03, 0xde, 0x4c,
0x25, 0xe8, 0xfc, 0x00, 0x00, 0x00, 0x01, 0xbd, 0xb7, 0x46, 0x6b, 0xf0, 0x00, 0x00, 0x00, 0x00,
0xdc, 0x64, 0xda, 0xcf, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xf9, 0xbf, 0x80, 0x00, 0x00,
0x00, 0x00, 0x1f, 0xcb, 0xc7, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xcf, 0xf8, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xbf, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xe0,
0x00, 0x00, 0x00, 0x00

};


char Ani_ball2[]={
0x00, 0x00, 0x00, 0x00, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xdf, 0xc0, 0x00,
0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xeb, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xbf, 0xff,
0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x74, 0x3c, 0x6b, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x77,
0xac, 0xc4, 0x7d, 0xf0, 0x00, 0x00, 0x00, 0x01, 0xce, 0xd3, 0x47, 0x66, 0xb8, 0x00, 0x00, 0x00,
0x03, 0xbb, 0x2e, 0x42, 0xa3, 0x5c, 0x00, 0x00, 0x00, 0x0f, 0x66, 0x31, 0x43, 0x50, 0xe6, 0x00,
0x00, 0x00, 0x1f, 0xff, 0xff, 0x83, 0x30, 0x73, 0x80, 0x00, 0x00, 0x2d, 0x07, 0xdf, 0xff, 0xff,
0xfc, 0xc0, 0x00, 0x00, 0x2f, 0x0b, 0x80, 0xce, 0x0c, 0x7f, 0xe0, 0x00, 0x00, 0x5a, 0x0c, 0x80,
0xb2, 0x0a, 0x96, 0x70, 0x00, 0x00, 0xf6, 0x10, 0xc0, 0xea, 0x05, 0x93, 0xb0, 0x00, 0x01, 0xe6,
0x70, 0xa0, 0x86, 0x06, 0x52, 0x98, 0x00, 0x01, 0xc9, 0xa1, 0x23, 0x03, 0x04, 0x29, 0xdc, 0x00,
0x03, 0x89, 0x21, 0x15, 0x01, 0x8c, 0x19, 0xbc, 0x00, 0x07, 0x17, 0x41, 0x09, 0x01, 0x54, 0x09,
0x8e, 0x00, 0x07, 0x29, 0x41, 0x35, 0x01, 0x24, 0x05, 0x86, 0x00, 0x0f, 0xf0, 0x82, 0x43, 0x01,
0x5a, 0x07, 0x47, 0x00, 0x0b, 0xff, 0xff, 0xff, 0xff, 0x86, 0x05, 0xc3, 0x80, 0x1b, 0xc0, 0xff,
0xff, 0xff, 0xff, 0xfa, 0x63, 0x80, 0x1b, 0xc0, 0xae, 0x01, 0x47, 0x03, 0xff, 0xff, 0xc0, 0x1d,
0xc0, 0x9a, 0x01, 0x39, 0x02, 0x86, 0x33, 0x40, 0x2e, 0xc0, 0xa6, 0x01, 0x39, 0x02, 0x5a, 0x33,
0x40, 0x2c, 0xa0, 0xc6, 0x01, 0x45, 0x02, 0x22, 0x2d, 0x40, 0x2c, 0x91, 0x05, 0x03, 0x83, 0x02,
0x52, 0x24, 0xe0, 0x2d, 0x0b, 0x04, 0x82, 0x01, 0x02, 0x8a, 0x2c, 0xe0, 0x5d, 0x0d, 0x04, 0x46,
0x02, 0x83, 0x06, 0x32, 0xe0, 0x69, 0x15, 0x04, 0x3a, 0x02, 0x46, 0x03, 0x11, 0xe0, 0x49, 0x23,
0x04, 0x2a, 0x02, 0x3a, 0x01, 0x30, 0xe0, 0xca, 0xc3, 0x08, 0xc6, 0x02, 0x1a, 0x01, 0xd0, 0xe0,
0xff, 0xff, 0xff, 0xff, 0xfe, 0x26, 0x01, 0x50, 0x50, 0x8f, 0xfd, 0x8e, 0x03, 0x03, 0xff, 0xf9,
0xb0, 0x70, 0xca, 0x03, 0xff, 0xfe, 0x83, 0x03, 0x07, 0xff, 0x70, 0xcf, 0x01, 0x38, 0x03, 0xff,
0xff, 0xff, 0xff, 0xf0, 0x6e, 0x81, 0x28, 0x02, 0x1e, 0x02, 0x47, 0x18, 0xd0, 0x6d, 0x41, 0x4c,
0x02, 0x1a, 0x02, 0x49, 0x29, 0x60, 0x69, 0x41, 0x8a, 0x02, 0x26, 0x02, 0x31, 0x26, 0xa0, 0x5d,
0x21, 0x09, 0x02, 0xc2, 0x04, 0x72, 0x24, 0xe0, 0x5d, 0x13, 0x08, 0x83, 0x03, 0x04, 0x8a, 0x2c,
0xe0, 0x5d, 0x0d, 0x04, 0x46, 0x02, 0x87, 0x06, 0x32, 0xc0, 0x3d, 0x0d, 0x04, 0x3a, 0x04, 0x64,
0x02, 0x33, 0xc0, 0x34, 0x93, 0x04, 0x3a, 0x04, 0x1c, 0x02, 0x63, 0xc0, 0x2f, 0xff, 0xfe, 0x46,
0x04, 0x3c, 0x03, 0x41, 0xc0, 0x3e, 0xc1, 0xc5, 0xff, 0xff, 0xff, 0xf4, 0xc1, 0x80, 0x13, 0xfe,
0xa7, 0x03, 0x04, 0x84, 0x0f, 0xfb, 0x80, 0x1a, 0xc1, 0xff, 0xfe, 0x87, 0x0a, 0x06, 0xc7, 0x80,
0x09, 0xe0, 0x8c, 0x03, 0xff, 0xff, 0xff, 0xff, 0x00, 0x05, 0xb8, 0x4e, 0x02, 0x3c, 0x09, 0x1d,
0x47, 0x00, 0x06, 0xa4, 0x53, 0x02, 0x3c, 0x09, 0x29, 0x5e, 0x00, 0x03, 0x92, 0x22, 0xc2, 0x44,
0x10, 0xca, 0x6c, 0x00, 0x02, 0xd1, 0x62, 0x23, 0x86, 0x11, 0x92, 0xd8, 0x00, 0x01, 0x48, 0xe2,
0x12, 0x05, 0x16, 0x55, 0x98, 0x00, 0x00, 0xe8, 0xb2, 0x0e, 0x08, 0x98, 0x66, 0xb0, 0x00, 0x00,
0xe5, 0xff, 0xff, 0xf8, 0x60, 0x2c, 0xa0, 0x00, 0x00, 0x7f, 0x0d, 0x23, 0x0f, 0xfe, 0x68, 0xc0,
0x00, 0x00, 0x3f, 0xeb, 0xc2, 0x89, 0x61, 0xfc, 0xc0, 0x00, 0x00, 0x0f, 0x9f, 0xfe, 0x4e, 0x60,
0xe3, 0x80, 0x00, 0x00, 0x07, 0xe3, 0xc3, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x03, 0xf9, 0xb1,
0x39, 0x27, 0xce, 0x00, 0x00, 0x00, 0x00, 0xf7, 0x49, 0x52, 0x1e, 0xf8, 0x00, 0x00, 0x00, 0x00,
0x7b, 0xc7, 0x9a, 0xfd, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x37, 0xff, 0xff, 0xbf, 0x80, 0x00, 0x00,
0x00, 0x00, 0x0f, 0xfd, 0x2c, 0x7f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xfc, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xf0,
0x00, 0x00, 0x00, 0x00

};

char Ani_ball3[]={
   0x00, 0x00, 0x00, 0x00, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xc0, 0x00,
0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xfb, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xff,
0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xce, 0x8f, 0x5f, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x7d,
0xb9, 0x8d, 0x57, 0xe0, 0x00, 0x00, 0x00, 0x01, 0xf2, 0xd0, 0x98, 0xed, 0xf0, 0x00, 0x00, 0x00,
0x03, 0xe7, 0x50, 0xe8, 0x2c, 0xfc, 0x00, 0x00, 0x00, 0x0f, 0x8c, 0x61, 0xe4, 0x1a, 0x3e, 0x00,
0x00, 0x00, 0x1f, 0xff, 0xff, 0xfc, 0x1e, 0x1d, 0x00, 0x00, 0x00, 0x32, 0xf7, 0xff, 0x0f, 0xff,
0x8e, 0xc0, 0x00, 0x00, 0x72, 0xa0, 0x69, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x65, 0x60, 0xb1,
0x06, 0x68, 0xca, 0xb0, 0x00, 0x00, 0xe6, 0x60, 0xc9, 0x05, 0x84, 0x6a, 0xf0, 0x00, 0x01, 0xa8,
0x61, 0x85, 0x05, 0x44, 0x59, 0x68, 0x00, 0x03, 0xb8, 0x97, 0x03, 0x06, 0x24, 0x65, 0x68, 0x00,
0x07, 0x70, 0x99, 0x02, 0x8c, 0x1c, 0x42, 0xb4, 0x00, 0x06, 0xb1, 0x39, 0x02, 0x54, 0x04, 0x61,
0xbc, 0x00, 0x0b, 0x61, 0x45, 0x02, 0x24, 0x06, 0xa0, 0xd6, 0x00, 0x1f, 0xe3, 0x86, 0x02, 0xd4,
0x03, 0x20, 0x72, 0x00, 0x15, 0xff, 0xff, 0xff, 0x0c, 0x03, 0xe0, 0x3b, 0x00, 0x18, 0x66, 0x03,
0xff, 0xff, 0xff, 0xf8, 0x39, 0x00, 0x28, 0x5a, 0x02, 0x8e, 0x06, 0x07, 0xff, 0xff, 0x80, 0x38,
0x9a, 0x04, 0x72, 0x05, 0x1a, 0x18, 0x34, 0x80, 0x34, 0xa4, 0x04, 0x72, 0x04, 0xe2, 0x14, 0x57,
0x80, 0x34, 0xc6, 0x04, 0x8a, 0x04, 0x62, 0x12, 0x97, 0x80, 0x75, 0x86, 0x07, 0x06, 0x05, 0x92,
0x11, 0x13, 0x40, 0x76, 0x85, 0x04, 0x02, 0x06, 0x0a, 0x12, 0x93, 0x40, 0x66, 0x84, 0x9c, 0x05,
0x04, 0x06, 0x14, 0x53, 0x40, 0x6b, 0x04, 0x68, 0x04, 0x9c, 0x03, 0x0c, 0x4a, 0xc0, 0xf3, 0x08,
0xe8, 0x04, 0x64, 0x01, 0x08, 0x2a, 0xc0, 0xe1, 0x09, 0x18, 0x04, 0x54, 0x01, 0xd8, 0x1e, 0xc0,
0xff, 0xff, 0xff, 0xfd, 0x8c, 0x01, 0x28, 0x0d, 0x60, 0xc1, 0xff, 0xfc, 0x07, 0xff, 0xf9, 0x58,
0x0d, 0x60, 0xc1, 0x58, 0x0f, 0xff, 0xfe, 0x07, 0xff, 0xcb, 0x20, 0xe1, 0x28, 0x08, 0x9c, 0x05,
0xff, 0xff, 0xff, 0xe0, 0x71, 0x38, 0x08, 0x64, 0x04, 0x87, 0x0c, 0x19, 0x60, 0x71, 0x48, 0x08,
0x64, 0x04, 0x49, 0x12, 0x2b, 0x60, 0x69, 0x8e, 0x09, 0x9c, 0x04, 0x31, 0x12, 0xcb, 0xc0, 0x65,
0x89, 0x06, 0x04, 0x08, 0xd2, 0x11, 0x13, 0xc0, 0x65, 0x84, 0x84, 0x06, 0x09, 0x0a, 0x12, 0x93,
0x40, 0x62, 0x84, 0x5c, 0x09, 0x0e, 0x06, 0x14, 0x97, 0x40, 0x35, 0x84, 0x24, 0x08, 0x88, 0x02,
0x18, 0x57, 0x80, 0x39, 0x84, 0x54, 0x08, 0x78, 0x03, 0x30, 0x35, 0x80, 0x3f, 0xff, 0x8c, 0x08,
0xd8, 0x02, 0xa0, 0x3d, 0x80, 0x3f, 0xe7, 0xff, 0xff, 0xff, 0xf4, 0xe0, 0x39, 0x80, 0x18, 0x7f,
0xfe, 0x0e, 0x0c, 0x0f, 0xff, 0x39, 0x00, 0x18, 0x4c, 0x07, 0xff, 0xfc, 0x06, 0x20, 0xfd, 0x00,
0x0c, 0x2e, 0x02, 0xd8, 0x17, 0xff, 0xff, 0xff, 0x00, 0x0e, 0x2b, 0x02, 0x28, 0x11, 0x1c, 0x50,
0xd2, 0x00, 0x07, 0x9a, 0x82, 0x58, 0x10, 0xe8, 0x91, 0x74, 0x00, 0x06, 0x59, 0x62, 0x88, 0x10,
0x88, 0x96, 0xec, 0x00, 0x03, 0x39, 0x13, 0x0c, 0x13, 0x49, 0x19, 0x78, 0x00, 0x03, 0x99, 0x0b,
0x07, 0x14, 0x31, 0x39, 0xf0, 0x00, 0x01, 0x9c, 0x87, 0x04, 0xb8, 0x12, 0xca, 0xe0, 0x00, 0x01,
0xdf, 0xff, 0xfc, 0x60, 0x33, 0x0b, 0xc0, 0x00, 0x00, 0xe3, 0x91, 0x87, 0xff, 0x2e, 0x0e, 0xc0,
0x00, 0x00, 0x7d, 0xe0, 0xe7, 0x30, 0xff, 0xcf, 0x80, 0x00, 0x00, 0x1b, 0xff, 0xff, 0xf0, 0x7c,
0x3f, 0x00, 0x00, 0x00, 0x0e, 0x78, 0x8c, 0x2f, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x07, 0xb4, 0x4c,
0x49, 0xa8, 0xf8, 0x00, 0x00, 0x00, 0x01, 0x7b, 0x57, 0x47, 0x2f, 0xf0, 0x00, 0x00, 0x00, 0x00,
0xfc, 0xe2, 0xda, 0x5b, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xfa, 0xff, 0x00, 0x00, 0x00,
0x00, 0x00, 0x1d, 0xd3, 0x87, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 0xf8, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x7f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xe0,
0x00, 0x00, 0x00, 0x00
};


char Ani_ball4[]={
0x00, 0x00, 0x00, 0x00, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xef, 0xc0, 0x00,
0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xfc,
0x7f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1e, 0x64, 0xef, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x7f,
0x99, 0xe3, 0xa6, 0xe0, 0x00, 0x00, 0x00, 0x01, 0xdd, 0x1b, 0x13, 0x63, 0xb0, 0x00, 0x00, 0x00,
0x03, 0x7a, 0x1d, 0x0f, 0x99, 0x78, 0x00, 0x00, 0x00, 0x0f, 0xfc, 0x19, 0x03, 0x86, 0xdc, 0x00,
0x00, 0x00, 0x1f, 0x1b, 0xff, 0xff, 0xf9, 0xe7, 0x00, 0x00, 0x00, 0x3b, 0xff, 0xe6, 0x07, 0xc7,
0xfd, 0x80, 0x00, 0x00, 0x7e, 0x2b, 0x7f, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x74, 0x24, 0x43,
0x31, 0x70, 0x98, 0x60, 0x00, 0x00, 0xe4, 0x5c, 0x42, 0xc1, 0x49, 0x1c, 0x60, 0x00, 0x01, 0xcc,
0x62, 0x45, 0xe1, 0x26, 0x0a, 0x90, 0x00, 0x03, 0x8d, 0x81, 0x86, 0x11, 0x27, 0x0d, 0x90, 0x00,
0x07, 0x16, 0x80, 0x84, 0x08, 0xa4, 0x84, 0xc8, 0x00, 0x06, 0x2d, 0x00, 0xdc, 0x04, 0xa8, 0x46,
0xa8, 0x00, 0x0a, 0x33, 0x00, 0xa4, 0x02, 0xb0, 0x32, 0x94, 0x00, 0x1f, 0xff, 0x81, 0xe8, 0x01,
0xa0, 0x0b, 0x0c, 0x00, 0x16, 0xff, 0xff, 0xff, 0x00, 0xd0, 0x05, 0x06, 0x00, 0x16, 0xc3, 0x07,
0xff, 0xff, 0xff, 0xff, 0xf2, 0x00, 0x39, 0x42, 0x89, 0x0c, 0x0f, 0xff, 0xff, 0xff, 0x00, 0x3b,
0x84, 0x51, 0x0a, 0x04, 0x98, 0x05, 0xc3, 0x00, 0x3a, 0x84, 0x62, 0x09, 0x98, 0x94, 0x19, 0xc3,
0x00, 0x3c, 0x84, 0x92, 0x08, 0x60, 0x92, 0x21, 0xa5, 0x00, 0x78, 0xc5, 0x0a, 0x08, 0xa0, 0x91,
0x41, 0x94, 0x80, 0x70, 0xc6, 0x06, 0x13, 0x10, 0x90, 0x81, 0x98, 0x80, 0x70, 0xac, 0x02, 0x14,
0x08, 0x91, 0x61, 0x88, 0x80, 0x71, 0x38, 0x03, 0x18, 0x04, 0x92, 0x10, 0xd4, 0x80, 0xe1, 0x78,
0x04, 0xf0, 0x02, 0x94, 0x08, 0xd2, 0x80, 0xe1, 0x98, 0x04, 0xd0, 0x01, 0x98, 0x04, 0xe2, 0x80,
0xff, 0xff, 0xf7, 0x30, 0x00, 0xf0, 0x02, 0xe1, 0x40, 0xb1, 0x0d, 0xff, 0xff, 0xf0, 0xf0, 0x01,
0xc0, 0xc0, 0xab, 0x0a, 0x0c, 0x19, 0xff, 0xff, 0xe0, 0xc0, 0xc0, 0xe7, 0x09, 0x94, 0x14, 0x03,
0x98, 0x7f, 0xff, 0xc0, 0x65, 0x08, 0x64, 0x13, 0x04, 0x94, 0x03, 0xc0, 0xc0, 0x67, 0x08, 0x64,
0x10, 0x88, 0x92, 0x04, 0xe1, 0x40, 0x65, 0x08, 0x94, 0x10, 0x71, 0x11, 0x19, 0xa2, 0x80, 0x79,
0x85, 0x0c, 0x10, 0x61, 0x10, 0xa1, 0x94, 0x80, 0x78, 0xc6, 0x04, 0x11, 0x91, 0x20, 0xc1, 0x98,
0x80, 0x78, 0xa4, 0x02, 0x12, 0x09, 0x21, 0x41, 0x90, 0x80, 0x30, 0xac, 0x03, 0x94, 0x05, 0x26,
0x22, 0x99, 0x00, 0x30, 0x94, 0x02, 0x58, 0x03, 0x28, 0x12, 0xa9, 0x00, 0x30, 0xac, 0x02, 0x30,
0x02, 0xb0, 0x0b, 0x49, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xe2, 0x60, 0x07, 0x85, 0x00, 0x1b, 0xff,
0x03, 0x98, 0x1f, 0xff, 0x87, 0x06, 0x00, 0x1e, 0x83, 0xff, 0xff, 0xff, 0xfc, 0x7f, 0xe2, 0x00,
0x0d, 0xc2, 0x46, 0x12, 0x06, 0x53, 0xff, 0xfe, 0x00, 0x0e, 0xc2, 0x2a, 0x11, 0x1a, 0x48, 0x1f,
0x04, 0x00, 0x06, 0xe1, 0x19, 0x10, 0xa4, 0x44, 0x6d, 0x1c, 0x00, 0x07, 0xb1, 0x25, 0x10, 0x44,
0x44, 0x8d, 0x28, 0x00, 0x03, 0x98, 0xc3, 0x11, 0xa4, 0x83, 0x19, 0x50, 0x00, 0x02, 0x94, 0xc1,
0x12, 0x14, 0x8e, 0x11, 0xa0, 0x00, 0x01, 0xcb, 0x81, 0xd4, 0x0c, 0xb1, 0x33, 0x20, 0x00, 0x01,
0xc9, 0xc1, 0x38, 0x04, 0xc0, 0xa5, 0x40, 0x00, 0x00, 0xff, 0xff, 0xff, 0xcb, 0x80, 0xe9, 0x80,
0x00, 0x00, 0x7f, 0xf0, 0xd8, 0x3f, 0xff, 0xf9, 0x80, 0x00, 0x00, 0x1e, 0x1f, 0xff, 0xff, 0xe0,
0xc7, 0x00, 0x00, 0x00, 0x0f, 0x8b, 0x8a, 0x1a, 0x9f, 0xfe, 0x00, 0x00, 0x00, 0x07, 0xe9, 0xc9,
0x74, 0x87, 0x1c, 0x00, 0x00, 0x00, 0x01, 0xfe, 0x68, 0x94, 0x9e, 0x70, 0x00, 0x00, 0x00, 0x00,
0xf6, 0x3d, 0x58, 0xfb, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xbb, 0x7f, 0x00, 0x00, 0x00,
0x00, 0x00, 0x1f, 0xfc, 0x7f, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 0xf8, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x3e, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xe0,
0x00, 0x00, 0x00, 0x00
};

char Ani_ball5[]={
0x00, 0x00, 0x00, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xef, 0xe0, 0x00,
0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xf8,
0xdf, 0x80, 0x00, 0x00, 0x00, 0x00, 0x1d, 0xdb, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x7f,
0xb6, 0x1d, 0x35, 0xf0, 0x00, 0x00, 0x00, 0x00, 0xf8, 0xf9, 0x1b, 0x2d, 0xf8, 0x00, 0x00, 0x00,
0x03, 0xf1, 0xe1, 0x1b, 0x13, 0xde, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xfc, 0xac, 0xd1, 0xb7, 0x00,
0x00, 0x00, 0x1e, 0x87, 0x83, 0xff, 0xff, 0xf9, 0x80, 0x00, 0x00, 0x37, 0xff, 0xf8, 0x78, 0x15,
0x9f, 0xe0, 0x00, 0x00, 0x2f, 0x33, 0x87, 0xff, 0x8e, 0x86, 0xf0, 0x00, 0x00, 0x7a, 0xc2, 0x41,
0x38, 0x7f, 0xff, 0xd8, 0x00, 0x00, 0xb5, 0x86, 0x26, 0x2c, 0x13, 0x41, 0xc8, 0x00, 0x01, 0x7a,
0x86, 0x18, 0x2a, 0x22, 0xc2, 0xec, 0x00, 0x01, 0xf4, 0x4c, 0x68, 0x31, 0x41, 0x62, 0xac, 0x00,
0x03, 0x58, 0x4c, 0x88, 0x30, 0xc1, 0x34, 0x5a, 0x00, 0x06, 0xe0, 0x2b, 0x04, 0x33, 0x21, 0x2c,
0x5e, 0x00, 0x04, 0xc0, 0x3c, 0x02, 0x34, 0x11, 0x2a, 0x2d, 0x00, 0x0f, 0xff, 0xff, 0xf1, 0x38,
0x09, 0x29, 0x2f, 0x00, 0x0b, 0xfc, 0x30, 0x0f, 0xff, 0xf6, 0x90, 0x95, 0x80, 0x1b, 0xc3, 0xff,
0xe0, 0x70, 0x0f, 0xff, 0xf6, 0x80, 0x1f, 0x41, 0x98, 0x1f, 0xff, 0xff, 0xfe, 0x7f, 0xc0, 0x1f,
0x22, 0x34, 0x03, 0x30, 0x00, 0xd1, 0xfe, 0x40, 0x2b, 0x14, 0x22, 0x04, 0x38, 0x01, 0xb0, 0x0e,
0x40, 0x2b, 0x18, 0x21, 0x18, 0x36, 0x06, 0x90, 0x1e, 0x40, 0x36, 0x18, 0x20, 0xa0, 0x31, 0x08,
0x98, 0x1b, 0x60, 0x36, 0x24, 0x20, 0xe0, 0x30, 0x90, 0x94, 0x2b, 0x60, 0x66, 0x42, 0x21, 0x10,
0x50, 0x60, 0x8a, 0x49, 0x60, 0x67, 0x82, 0x66, 0x08, 0x50, 0xa0, 0x49, 0x89, 0xa0, 0x4e, 0x01,
0x48, 0x04, 0x51, 0x10, 0x49, 0x85, 0xa0, 0xcc, 0x00, 0xf0, 0x02, 0x56, 0x08, 0x4a, 0x45, 0xe0,
0xff, 0xff, 0xff, 0xe1, 0x58, 0x06, 0x4a, 0x24, 0xd0, 0xce, 0x0f, 0xff, 0xdf, 0xff, 0xf1, 0x4c,
0x14, 0xb0, 0xcd, 0x01, 0x60, 0x3f, 0xff, 0xcf, 0xff, 0xec, 0xb0, 0xac, 0x82, 0x50, 0x00, 0xf0,
0x3f, 0xff, 0xff, 0xf0, 0x76, 0x42, 0x4c, 0x01, 0x50, 0x00, 0x68, 0x05, 0x90, 0x56, 0x24, 0x42,
0x02, 0x58, 0x00, 0xd8, 0x06, 0xb0, 0x56, 0x18, 0x41, 0x0c, 0x54, 0x03, 0x90, 0x0f, 0x20, 0x5e,
0x18, 0x40, 0x90, 0x52, 0x04, 0x98, 0x1b, 0x60, 0x5e, 0x24, 0x20, 0x60, 0xa1, 0x98, 0x94, 0x2b,
0x60, 0x56, 0x42, 0x20, 0xe0, 0xa0, 0x60, 0x92, 0x4b, 0xa0, 0x27, 0x41, 0x21, 0x10, 0xa0, 0x60,
0x91, 0x8b, 0xc0, 0x23, 0x80, 0xa2, 0x0c, 0xa1, 0x90, 0x91, 0x8b, 0x40, 0x23, 0x00, 0x6c, 0x02,
0xa2, 0x09, 0x26, 0x93, 0x40, 0x3f, 0xff, 0xff, 0xc1, 0xa4, 0x05, 0x28, 0x53, 0x40, 0x13, 0x87,
0xff, 0xff, 0xff, 0x03, 0x30, 0x36, 0x80, 0x19, 0xe0, 0x7c, 0x1f, 0xff, 0xff, 0xff, 0xfc, 0x80,
0x0d, 0x90, 0x52, 0x00, 0xe0, 0x01, 0xe0, 0xff, 0x80, 0x07, 0xc8, 0x91, 0x01, 0xb0, 0x03, 0xc0,
0x39, 0x00, 0x05, 0x46, 0x90, 0xc2, 0xa8, 0x06, 0xc0, 0x6a, 0x00, 0x03, 0xe1, 0x18, 0x24, 0xa6,
0x0a, 0xc0, 0xb6, 0x00, 0x02, 0xa2, 0x88, 0x18, 0xa1, 0x34, 0xc3, 0xac, 0x00, 0x01, 0xf2, 0x48,
0x28, 0xc0, 0xc5, 0x25, 0x58, 0x00, 0x00, 0xb4, 0x38, 0x46, 0xc1, 0x45, 0x39, 0x70, 0x00, 0x00,
0xdc, 0x0d, 0x81, 0xc6, 0x26, 0x72, 0xe0, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xfe, 0x1a, 0x95, 0xe0,
0x00, 0x00, 0x36, 0x7f, 0xf0, 0xf1, 0xff, 0x8d, 0xc0, 0x00, 0x00, 0x0b, 0x86, 0x8f, 0xff, 0xff,
0xff, 0x80, 0x00, 0x00, 0x07, 0x67, 0x40, 0xe0, 0x38, 0x1f, 0x00, 0x00, 0x00, 0x03, 0xd5, 0x31,
0xd0, 0x78, 0x7c, 0x00, 0x00, 0x00, 0x00, 0xec, 0x8e, 0xc9, 0xf1, 0xf8, 0x00, 0x00, 0x00, 0x00,
0x77, 0x4c, 0xca, 0xb7, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x3c, 0xd3, 0xcd, 0x5f, 0x80, 0x00, 0x00,
0x00, 0x00, 0x0f, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xef, 0xff, 0xfc, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xf0,
0x00, 0x00, 0x00, 0x00
};

char Ani_ball6[]={
0x00, 0x00, 0x00, 0x01, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xdf, 0x80, 0x00,
0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xfc, 0xba,
0x7e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1e, 0xeb, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f,
0x93, 0xc5, 0xc7, 0xc0, 0x00, 0x00, 0x00, 0x01, 0xfd, 0x1d, 0x34, 0xb3, 0xe0, 0x00, 0x00, 0x00,
0x03, 0xe5, 0x39, 0x0d, 0x89, 0xf8, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xff, 0x07, 0x87, 0x9c, 0x00,
0x00, 0x00, 0x1f, 0x8d, 0xc5, 0xff, 0xf1, 0xc6, 0x00, 0x00, 0x00, 0x3e, 0x7f, 0xc6, 0x0f, 0xcf,
0xf9, 0x80, 0x00, 0x00, 0x7c, 0x0c, 0xbf, 0xfa, 0x60, 0xf7, 0xc0, 0x00, 0x00, 0x74, 0x14, 0x83,
0x47, 0xff, 0xfe, 0xe0, 0x00, 0x00, 0xec, 0x72, 0x83, 0xc2, 0x3a, 0x2c, 0xe0, 0x00, 0x01, 0xcc,
0xa1, 0x02, 0x22, 0x24, 0x17, 0x30, 0x00, 0x03, 0x95, 0x21, 0x8e, 0x11, 0x1a, 0x15, 0x98, 0x00,
0x07, 0x96, 0x41, 0xb2, 0x0d, 0x11, 0x8b, 0x58, 0x00, 0x05, 0x2a, 0x41, 0x44, 0x03, 0x30, 0x4b,
0x2c, 0x00, 0x0a, 0x32, 0x83, 0xa4, 0x01, 0x50, 0x25, 0x1c, 0x00, 0x1f, 0xff, 0xff, 0xfe, 0x01,
0x90, 0x1f, 0x0e, 0x00, 0x17, 0xe1, 0x06, 0x15, 0xff, 0xfe, 0x06, 0x83, 0x00, 0x16, 0xdf, 0xfe,
0x0c, 0x07, 0x19, 0xff, 0xe3, 0x00, 0x3b, 0x81, 0xa3, 0xff, 0xff, 0xff, 0xef, 0xdf, 0x80, 0x3b,
0x81, 0x44, 0x06, 0x31, 0x0c, 0x1f, 0xfb, 0x80, 0x3b, 0x82, 0xa4, 0x05, 0xc1, 0x0a, 0x22, 0x63,
0x80, 0x3c, 0x83, 0x14, 0x05, 0xc1, 0x09, 0xc2, 0x65, 0x80, 0x79, 0x46, 0x0c, 0x06, 0x21, 0x09,
0x82, 0x58, 0x80, 0x71, 0x4a, 0x04, 0x0c, 0x12, 0x0a, 0x42, 0x48, 0x80, 0x71, 0x32, 0x06, 0x38,
0x0a, 0x0c, 0x31, 0x58, 0x80, 0x71, 0x32, 0x09, 0xc8, 0x06, 0x18, 0x09, 0x64, 0xc0, 0xe2, 0xd4,
0x09, 0x88, 0x02, 0x28, 0x05, 0x22, 0xc0, 0xe3, 0x0c, 0x0e, 0x48, 0x03, 0xc8, 0x03, 0x62, 0xc0,
0xff, 0xff, 0xff, 0xfc, 0x03, 0xc8, 0x01, 0xa1, 0x40, 0xb2, 0xff, 0xf8, 0x1b, 0xff, 0xfe, 0x01,
0xa0, 0xc0, 0xee, 0x06, 0x2f, 0xff, 0xfe, 0x19, 0xff, 0xf8, 0xc0, 0xe6, 0x05, 0x48, 0x0c, 0x1f,
0xff, 0xff, 0xff, 0xc0, 0xda, 0x04, 0xc8, 0x0a, 0x22, 0x0c, 0x09, 0x20, 0xc0, 0xbb, 0x05, 0x28,
0x09, 0xc2, 0x0a, 0x12, 0x51, 0x40, 0xba, 0x86, 0x18, 0x09, 0xc2, 0x09, 0x62, 0x52, 0x80, 0x71,
0x84, 0x08, 0x0a, 0x22, 0x08, 0x82, 0x54, 0x80, 0x71, 0x4a, 0x04, 0x0c, 0x14, 0x0b, 0x42, 0x48,
0x80, 0x51, 0x32, 0x06, 0x18, 0x0c, 0x14, 0x44, 0xb8, 0x80, 0x79, 0x32, 0x05, 0x28, 0x04, 0x18,
0x24, 0xc9, 0x00, 0x79, 0x4a, 0x04, 0xc8, 0x06, 0x30, 0x14, 0x89, 0x00, 0x49, 0x86, 0x05, 0xa8,
0x05, 0xd0, 0x0d, 0x85, 0x00, 0x7f, 0xff, 0xfe, 0x18, 0x04, 0xd0, 0x0f, 0x05, 0x00, 0x25, 0x03,
0xff, 0xff, 0xf7, 0x30, 0x0f, 0x06, 0x00, 0x37, 0x81, 0x8c, 0x0f, 0xff, 0xff, 0xff, 0xe2, 0x00,
0x13, 0x81, 0x6c, 0x0a, 0x1c, 0x18, 0x39, 0x3e, 0x00, 0x0b, 0x41, 0x12, 0x09, 0x24, 0x28, 0x53,
0x0c, 0x00, 0x0d, 0x61, 0x2a, 0x08, 0xc4, 0x25, 0x93, 0x1c, 0x00, 0x07, 0xb0, 0xc6, 0x09, 0xe4,
0x22, 0x25, 0x68, 0x00, 0x05, 0xa8, 0xc2, 0x0a, 0x14, 0x4e, 0x25, 0x90, 0x00, 0x02, 0x96, 0x83,
0x0c, 0x08, 0x51, 0x4b, 0x20, 0x00, 0x01, 0xd1, 0x82, 0xd8, 0x0c, 0x61, 0x4d, 0x60, 0x00, 0x01,
0xca, 0xc1, 0x28, 0x0a, 0xc0, 0x99, 0xc0, 0x00, 0x00, 0xff, 0xff, 0xd8, 0x09, 0x80, 0xf1, 0x80,
0x00, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xfd, 0xe1, 0x80, 0x00, 0x00, 0x1e, 0x29, 0x0f, 0xff, 0xff,
0xff, 0x00, 0x00, 0x00, 0x0f, 0x16, 0x8a, 0x19, 0x8e, 0x5e, 0x00, 0x00, 0x00, 0x07, 0xcb, 0x89,
0xf2, 0xb5, 0xf8, 0x00, 0x00, 0x00, 0x01, 0xa6, 0xc4, 0xd2, 0xcb, 0xf0, 0x00, 0x00, 0x00, 0x00,
0xfe, 0x65, 0x27, 0x57, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x7e, 0x3e, 0x3c, 0x7b, 0x00, 0x00, 0x00,
0x00, 0x00, 0x1f, 0xff, 0xfe, 0x6e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 0xf8, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x3e, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xe0,
0x00, 0x00, 0x00, 0x00
};



char logo1[]={

0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 0x00, 0x00, 0x00,
0x60, 0x00, 0x00, 0x00, 0xc0, 0x30, 0x00, 0x00, 0xcc, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00,
0xc0, 0x30, 0x00, 0x00, 0xcc, 0xcc, 0x78, 0x78, 0xfc, 0x00, 0x78, 0x7c, 0xcc, 0x30, 0x7c, 0x00,
0xc0, 0xdc, 0xcc, 0x0c, 0x60, 0x00, 0xcc, 0xc0, 0xcc, 0x00, 0xc0, 0x00, 0xc0, 0xe0, 0xcc, 0x0c,
0x60, 0x00, 0xc0, 0xc0, 0xd8, 0x00, 0xc0, 0x00, 0xdc, 0xc0, 0xfc, 0x7c, 0x60, 0x00, 0xc0, 0x78,
0xf0, 0x00, 0x78, 0x00, 0xcc, 0xc0, 0xc0, 0xcc, 0x60, 0x00, 0xc0, 0x0c, 0xd8, 0x00, 0x0c, 0x00,
0xcc, 0xc0, 0xc0, 0xcc, 0x60, 0x00, 0xcc, 0x0c, 0xcc, 0x00, 0x0c, 0x00, 0x7c, 0xc0, 0x78, 0x7c,
0x3c, 0x00, 0x78, 0xf8, 0xcc, 0x00, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x01, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x80, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x01, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x02, 0x71, 0xe0, 0xfe, 0xfb, 0xc0,
0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x0f, 0x82, 0x11, 0x82, 0x20, 0x80, 0x00, 0x00, 0x00, 0x00,
0x02, 0x00, 0x02, 0x04, 0x11, 0x04, 0x20, 0x80, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x02, 0x04,
0x10, 0x08, 0x11, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x02, 0x00, 0x30, 0x10, 0x11, 0x00,
0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x02, 0x00, 0xd0, 0x20, 0x11, 0x00, 0x00, 0x00, 0x00, 0x00,
0x01, 0x00, 0x02, 0x03, 0x10, 0x40, 0x0a, 0x00, 0x00, 0x00, 0x82, 0x00, 0x00, 0x80, 0x22, 0x04,
0x10, 0x42, 0x0b, 0xfe, 0x00, 0x03, 0x8e, 0x00, 0x00, 0x40, 0xe2, 0x04, 0x34, 0x86, 0x04, 0x81,
0x00, 0x00, 0x82, 0x00, 0x00, 0x3f, 0x8f, 0xc7, 0xd9, 0xfc, 0x04, 0x80, 0x80, 0x00, 0x82, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x80, 0x80, 0x00, 0x82, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x08, 0x80, 0x80, 0x00, 0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x83,
0x01, 0xe0, 0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0xfc, 0x02, 0x10, 0x82, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0x83, 0x04, 0x10, 0x82, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x60, 0x80, 0x84, 0x10, 0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80,
0x40, 0x30, 0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x40, 0xd0, 0x82, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x43, 0x10, 0x82, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x80, 0x84, 0x10, 0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc1,
0x84, 0x34, 0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xfe, 0x07, 0xdb, 0xef, 0x80,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x07, 0xf0, 0x3f, 0xde, 0xf7, 0xdf, 0xc0, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x08, 0x07, 0xf7, 0xcf, 0xbe, 0xf7, 0xdf, 0xc0, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x08, 0x07, 0xf7, 0xf7, 0xbe, 0xf7, 0xdf, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x18, 0x07, 0xf7, 0xfb, 0xfc, 0xf7, 0xdf, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x70, 0x03, 0xf7, 0xfb, 0xf2, 0xf7, 0xdf, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x60, 0x03, 0xf7, 0xfb, 0xce, 0xf7, 0xdf, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x03, 0xf7, 0xf7, 0xbe, 0xf7, 0xdf, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
0xf3, 0xe7, 0xbc, 0xb7, 0xdf, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xc0,
0x1f, 0x82, 0x41, 0x07, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff,
0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xff,
0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xfe,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xfc, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x3f, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x0f, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00
};
//^ImgObj
//BlockData Define
char Blocks[11][11];
int ImgBuffer[10];
char fp;
struct thisBall{
   int life;
   int Strength;
   int speed;
   int MixProperty;  //See PropertyDefine!
};

struct thisStick{
   int Length;
   int lLength;   
   int Left;
   int lLeft;   
  // int speed;
};


struct BallOBJ{
   int x;
   int y;  
   int ly;
   int lx; 
   char isDock;
   int vx;
   int vy;
   int Bpox;
   int Bpoy;
   char visible;
   
};

struct ITEMOBJ{
   int x;
   int y;   
   int itemID;
};

struct FireOBJ{
   int x;
   int y;   
   int visible;
};


int vx,vy;

int HighScores;
int IsDock,IsAlive;
int TotalBlock;
int lTotal;

char totalstage;
int theStage;
long TotalScore;
 
struct	thisBall	tBall;
struct  thisStick   tStick;
struct  ITEMOBJ     gainITEM;
struct  FireOBJ     Fires[6];
struct  BallOBJ     BallNum[2];



void CreateImgList()
{
    ImgBuffer[aaa=0]=block1;
    ImgBuffer[aaa=1]=block2;   
    ImgBuffer[aaa=2]=block3;  
    
    ImgBuffer[aaa=3]=Ani_ball1;
    ImgBuffer[aaa=4]=Ani_ball2;
    ImgBuffer[aaa=5]=Ani_ball3;
    ImgBuffer[aaa=6]=Ani_ball4;    
    ImgBuffer[aaa=7]=Ani_ball5;
    ImgBuffer[aaa=8]=Ani_ball6;    
}
long ShowMain()
{
    int ids;
    ids=3;
    ClearScreen();
    while (!Inkey()){
     ids++;
     if (ids==9) ids=3;
     WriteBlock(80,12,67,68,1,ImgBuffer[ids]);
     WriteBlock(1,0,93,43,3,logo1);     
     TextOut(0,60,"Push Any Key...",3);

     Refresh();
    
     Delay(50);
    }
   if  (CheckKey(ESC_KEY))  return-1;
   return 1;
}

void CreatSence()
{
    ClearScreen();
 //   WriteBlock(0,0,160,80,1,Sence);
    Rectangle(1,0,112,79,1);
    Rectangle(116,34,158,79,1);    
    Line(118,59,156,59,65);
    WriteBlock(116,1,17,5,1,Sence_ball);
    WriteBlock(117,27,21,5,1,Sence_stg);
    WriteBlock(119,36,17,5,1,Sence_item);
    WriteBlock(119,62,21,5,1,Sence_scro);            
    Refresh();
}

void SetStage(int StageNum)
{
    char str_Stage[3];
    if (StageNum>99) return; 
    Block(146,22,156,32,0); 
    sprintf(str_Stage,"%d",StageNum);

    TextOut(146,22,str_Stage,1);
    Refresh();
}

void DrawBlock(int x,int y,int type)
{
 
    
    int i,j;
    if (type)
    {
        WriteBlock(BLOCK_OFFSETX+x*BLOCK_WIDTH,BLOCK_OFFSETY+y*BLOCK_HEIGHT,
                   BLOCK_WIDTH,BLOCK_HEIGHT,1,ImgBuffer[type-1]);
                   
    }
    else{

        
        if (tBall.MixProperty & BALL_FIRE){
           for (i=x-1;i<=x+1;i++)
           {
             for (j=y-1;j<=y+1;j++)
             {
                if (i>=0 && j>=0 && i<11 && j<11)
                {
                   Block(BLOCK_OFFSETX+i*BLOCK_WIDTH,BLOCK_OFFSETY+j*BLOCK_HEIGHT,
                         BLOCK_OFFSETX+i*BLOCK_WIDTH+(aaa=BLOCK_WIDTH)-(aaa=1),
                         BLOCK_OFFSETY+j*BLOCK_HEIGHT+(aaa=BLOCK_HEIGHT)-(aaa=1),0);
                   if (Blocks[i][j]<3 && Blocks[i][j]>0) TotalBlock--;
                   Blocks[i][j]=0;
                }
             }
           }
      
        }else
        {
                Block(BLOCK_OFFSETX+x*BLOCK_WIDTH,BLOCK_OFFSETY+y*BLOCK_HEIGHT,
                       BLOCK_OFFSETX+x*BLOCK_WIDTH+(aaa=BLOCK_WIDTH)-(aaa=1),
                       BLOCK_OFFSETY+y*BLOCK_HEIGHT+(aaa=BLOCK_HEIGHT)-(aaa=1),0);
        }
    }
    
    
}

void SetScore(long Score)
{
    char str_Score[10];
    if (Score>=999999) return; 
    Block(122,68,155,77,0); 
    sprintf(str_Score,"%d",Score);

    TextOut(122,67,str_Score,3);
    
    //Refresh();
}



long LoadBlock(char fpe,int StageNum){
    
  int i,j;
    char buffer[2];
    
    if (fpe){


        for ( i=0;i<11;i++){
        for ( j=0;j<11;j++){
          
          Blocks[i][j]=255;

        }
       }
       
       rewind(fpe);
       if (fseek(fpe,(StageNum-1)*121+20,SEEK_SET)==-1)
        {
          fclose(fpe);
         return -2;
       }


        if (fread(Blocks,1,121,fpe)==0) {fclose(fpe);Beep();return -3;}

        TotalBlock=0;
   
       for ( i=0;i<11;i++){
        for ( j=0;j<11;j++){
       //   Blocks[i][j]=3;
      
          
    
     
          DrawBlock(i,j,Blocks[i][j]);
          if  (Blocks[i][j]>0 && Blocks[i][j]<3) TotalBlock++;

        }
       }
       


  
       
      
    }
  //  fclose(fp);
    
    return 1;
}
void SetLife(int Life){
    int i;
    Block(119,9,156,19,0);
    if (Life>0 && Life<=7){
       
       for (i=0;i<Life;i++){
               
               WriteBlock(119+i*5,9,4,4,1,ball);
               
        }
     
    }
    
    if (Life>7 && Life<=14){
       for (i=0;i<7;i++){
               
               WriteBlock(119+i*5,9,4,4,1,ball);
               
        }
       for (i=0;i<Life-7;i++){
     
              WriteBlock(119+i*5,15,4,4,1,ball);
  
       }
    }    
    
    Refresh();
}

void IniStage(int StageNum){
    tBall.MixProperty=0;
    Box(1,0,111,80,1,1);
    TextOut(30,40,"Loading...",66);
    LoadBlock(fp,StageNum);

    //TotalScore=0;
    SetScore(TotalScore);
    SetStage(StageNum);
    //TotalBlock=100;
    lTotal=TotalBlock;
}
void CreatItem(int y){
// BALL_RELIFE  1         //0000 0001
// BALL_THROUGH 16        //0001 0000
// BALL_FIRE    32        //0010 0000
// BALL_MAG     64        //0100 0000
///^MixProperty
// BALL_SUPER           65       
// BALL_SPEEDUP         129
// BALL_SLOWDOWN        130
// BALL_LIFE            131
// BALL_KILL            133
// BALL_SRINK           134

// BALL_STKEXPAND          135
// BALL_STKSRINK           136
// BALL_FREEPASS           137

   long tpitem;
   if  (gainITEM.itemID) return;
   tpitem=(rand()*700)/32767;
   //tpitem=140;
   if (tpitem>=60 &  tpitem<70)  {
       gainITEM.itemID=BALL_RELIFE;
       WriteBlock(122,42,28,11,1,ITEM_Relife);
       }
   if (tpitem>=70 &  tpitem<80)  {
       gainITEM.itemID=BALL_THROUGH;
       WriteBlock(122,42,28,11,1,ITEM_THROUGH);
       }
   if (tpitem>=80 &  tpitem<90)  {
       gainITEM.itemID=BALL_FIRE;
       WriteBlock(122,42,28,11,1,ITEM_FIRE);
      }
   if (tpitem>=90 &  tpitem<100)  {
        gainITEM.itemID=BALL_MAG; 
       WriteBlock(122,42,28,11,1,ITEM_Mag);
        }
   if (tpitem>=100 &  tpitem<110) { 
        gainITEM.itemID=BALL_SUPER;
        WriteBlock(122,42,28,11,1,ITEM_SUPER);
        }
   if (tpitem>=110 &  tpitem<120)  {
        gainITEM.itemID=BALL_SPEEDUP;
        WriteBlock(122,42,28,11,1,ITEM_UP);
        }
   if (tpitem>=130 &  tpitem<140)  {
        gainITEM.itemID=BALL_SLOWDOWN;
        WriteBlock(122,42,28,11,1,ITEM_DOWN);
   
        }
   if (tpitem>=140 &  tpitem<150)  {
        gainITEM.itemID=BALL_DOUBLE;
          WriteBlock(122,42,34,14,1,ITEM_DOUBLE);     
        }
 
   if (tpitem>=150 &  tpitem<160)  {
        gainITEM.itemID=BALL_STKEXPAND;
        WriteBlock(122,42,28,11,1,ITEM_STKEXPAND);
         }
   if (tpitem>=160 &  tpitem<170)  {
        gainITEM.itemID=BALL_STKSRINK;  
        WriteBlock(122,42,28,11,1,ITEM_STKSRINK);
     }
    
     
   if (tpitem>=170 &  tpitem<175) { 
        gainITEM.itemID=BALL_LIFE;  
       WriteBlock(122,42,28,11,1,ITEM_LIFE);
        
    }   
   if (tpitem>=175 &  tpitem<180)  {
        gainITEM.itemID=BALL_KILL;
       WriteBlock(122,42,34,14,1,ITEM_KILL);
    }
   if (tpitem>=180 &  tpitem<185)  {
        gainITEM.itemID=BALL_FREEPASS;  
        WriteBlock(122,42,28,11,1,ITEM_PASS);
         
    }
   
   if (gainITEM.itemID){
       gainITEM.y=y;
       gainITEM.x=WALL_LEFT+(rand()*(WALL_RIGHT-(aaa=WALL_LEFT)))/32767;

   }
}
void Gain(int Item){
    if (Item<=BALL_MAG) tBall.MixProperty=tBall.MixProperty | Item;
    if (Item==BALL_SUPER) tBall.Strength=3;
    if (Item==BALL_SPEEDUP) {
      
       vx=(FAST_SPEED*vx)/STD_SPEED;
       vy=(FAST_SPEED*vy)/STD_SPEED;       
       tBall.speed=FAST_SPEED;
    }
    if (Item==BALL_SLOWDOWN) {
      
       vx=(STD_SPEED*vx)/FAST_SPEED;
       vy=(STD_SPEED*vy)/FAST_SPEED;       
       tBall.speed=STD_SPEED;
    }
    if (Item==BALL_STKEXPAND) {
        if (tStick.Length<=STICK_MAXLENGTH){
        
           tStick.Length=tStick.Length+100;
           tStick.Left= tStick.Left-50; 
           tStick.lLength=tStick.Length;
           if (tStick.Left<AREA_LEFT-(aaa=10)) tStick.Left=AREA_LEFT-(aaa=10);
           if (tStick.Left>AREA_RIGHT-tStick.Length+(aaa=10)) tStick.Left=AREA_RIGHT-tStick.Length+(aaa=10);

       }
    } 
    if (Item==BALL_STKSRINK) {
        if (tStick.Length>=STICK_MINLENGTH){
        
           tStick.Length=tStick.Length-100;
           tStick.Left= tStick.Left+50;  
           tStick.lLength=tStick.Length; 
           if (tStick.Left<AREA_LEFT-(aaa=10)) tStick.Left=AREA_LEFT-(aaa=10);
           if (tStick.Left>AREA_RIGHT-tStick.Length+(aaa=10)) tStick.Left=AREA_RIGHT-tStick.Length+(aaa=10);

       }
    } 
    if (Item==BALL_KILL) {
         IsAlive=0;
    }    
    if (Item==BALL_LIFE) {
         tBall.life++;
         if (tBall.life>14) tBall.life=14;
         SetLife(tBall.life);
         
    }       
    if (Item==BALL_FREEPASS) {
         TotalBlock=0;
         
    }       
    if (Item==BALL_DOUBLE) {
         if (BallNum[aaa=0].visible==1 &&  BallNum[aaa=1].visible==1){
         
         }else
         {
      
               if   (BallNum[aaa=0].visible ){
                    BallNum[aaa=1].visible=1;
                   
                    BallNum[aaa=1].y=BallNum[aaa=0].y;
                    
                    BallNum[aaa=1].ly=BallNum[aaa=0].y;
                    BallNum[aaa=1].vx=BallNum[aaa=0].vx+3;
                    BallNum[aaa=1].vy=BallNum[aaa=0].vy+3;
                    BallNum[aaa=1].Bpox=BallNum[aaa=0].Bpox;
                    BallNum[aaa=1].Bpoy=BallNum[aaa=0].Bpoy;
                    if (BallNum[aaa=1].x>=(AREA_RIGHT-(aaa=AREA_LEFT))/2+AREA_LEFT){
                      
                     BallNum[aaa=1].x=BallNum[aaa=0].x-50;
                     BallNum[aaa=1].lx=BallNum[aaa=0].x-50;
                   }else
                   {
                     BallNum[aaa=1].lx=BallNum[aaa=0].x+50; 
                     BallNum[aaa=1].x=BallNum[aaa=0].x+50;                  
                   }
               }else
               {
                    BallNum[aaa=0].visible=1;
                    BallNum[aaa=0].vx=BallNum[aaa=1].vx+3;
                    BallNum[aaa=0].vy=BallNum[aaa=1].vy+3;
                    BallNum[aaa=0].y=BallNum[aaa=1].y;
                    
                    BallNum[aaa=0].ly=BallNum[aaa=1].y;
                    BallNum[aaa=0].Bpox=BallNum[aaa=1].Bpox;
                    BallNum[aaa=0].Bpoy=BallNum[aaa=1].Bpoy;
                    if (BallNum[aaa=0].x>=(AREA_RIGHT-(aaa=AREA_LEFT))/2+AREA_LEFT){
                      
                     BallNum[aaa=0].x=BallNum[aaa=1].x-20;
                     BallNum[aaa=0].lx=BallNum[aaa=1].x-20;
                   }else
                   {
                     BallNum[aaa=0].lx=BallNum[aaa=1].x+20; 
                     BallNum[aaa=0].x=BallNum[aaa=1].x+20;                  
                   }
               
               }                                  
         }
         
    }          
    
    TotalScore=TotalScore+50;
}
long GameLoop()
{
    int x,y,lx,ly;
    long lScore;
    int Bpox,Bpoy,lBpox,lBpoy;
    int StkOffset,xOffset;
    int BallTurn;
    char ms;

    Start:

    Block(122,42,156,56,0);
    Box(122,42,156,56,1,0);

    tBall.speed=STD_SPEED;
    tBall.Strength=2;
    tStick.Length=STICK_LENGTH;
    tStick.lLength=tStick.Length;
    tStick.Left=AREA_LEFT+(AREA_RIGHT+(aaa=AREA_LEFT)-tStick.Length)/2;
    tStick.lLeft=tStick.Left;
    tBall.MixProperty=0;

    gainITEM.itemID=0;
    
    BallNum[aaa=0].isDock=1;
    IsAlive=1;
    StkOffset=tStick.Length/2+50;
  
        
    BallTurn=0;
    BallNum[aaa=0].y=STICK_HEIGHT-(aaa=20);
    BallNum[aaa=0].x=StkOffset+tStick.Left; 
    BallNum[aaa=0].visible=1;
    BallNum[aaa=0].Bpox=(BallNum[aaa=0].x+70)/BLOCK_WIDTH;
    BallNum[aaa=0].Bpoy=(BallNum[aaa=0].y+30)/BLOCK_HEIGHT;
    
    BallNum[aaa=1].y=STICK_HEIGHT+(aaa=20);
    BallNum[aaa=1].x=StkOffset+tStick.Left-40; 
    BallNum[aaa=1].vy=0;
    BallNum[aaa=1].vx=0;     
    BallNum[aaa=1].visible=0; 
      
    BallNum[aaa=1].Bpox=(BallNum[aaa=1].x+70)/BLOCK_WIDTH;
    BallNum[aaa=1].Bpoy=(BallNum[aaa=1].y+30)/BLOCK_HEIGHT;

    SetLife(tBall.life);
    

  
    while(IsAlive && !CheckKey(ESC_KEY) && TotalBlock>0){ 
     ms=Getms();
            TotalScore=TotalScore+(lTotal-TotalBlock)*5;
      if (CheckKey(112)){
         ReleaseKey(129);
         WriteBlock(2,1,110,78,68,imgmask);
         Box(37,39,72,52,1,0);
         Box(37,39,72,52,0,1);         
         TextOut(40,40,"Pause",65);
         getchar();
         getchar();
         
      }
      if (lScore-TotalScore){
         SetScore(TotalScore);
         
      }      
      lScore=TotalScore;
      lTotal=TotalBlock;

      tStick.lLeft=tStick.Left;
      tStick.Left=tStick.Left+((CheckKey(RIGHT_KEY))-(CheckKey(LEFT_KEY)))*STICK_SPEED;
      if (tStick.Left<AREA_LEFT-(aaa=10)) tStick.Left=AREA_LEFT-(aaa=10);
      if (tStick.Left>AREA_RIGHT-tStick.Length+(aaa=10)) tStick.Left=AREA_RIGHT-tStick.Length+(aaa=10);
      BallTurn=0;
     loop1:
       
      vx=BallNum[BallTurn].vx;
      vy=BallNum[BallTurn].vy;    
      x=BallNum[BallTurn].x;  
      y=BallNum[BallTurn].y;  
      lBpox=BallNum[BallTurn].Bpox;
      lBpoy=BallNum[BallTurn].Bpoy;   
      IsDock=BallNum[BallTurn].isDock;
      if  (!BallNum[BallTurn].visible) {vx=0;vy=0;}
    
      lx=x;ly=y;
      
      if (IsDock) x=x+tStick.Left-tStick.lLeft;
      

      if (x>AREA_RIGHT) {vx=-vx ;x=AREA_RIGHT;};
      if (x<AREA_LEFT) {vx=-vx ;x=AREA_LEFT;};
      
      
      if (y<AREA_TOP) {vy=-vy ;y=AREA_TOP;};
      if (y>=STICK_HEIGHT-(aaa=20) && y<STICK_HEIGHT+(aaa=30)) {
         StkOffset=x-tStick.Left;
         if (StkOffset<=tStick.Length+20 && StkOffset+20>=0){
              vx=0;vy=0;
              if (tBall.MixProperty & BALL_MAG){
                  IsDock=1;
                  
                  y=STICK_HEIGHT-(aaa=20);
                  x=StkOffset+tStick.Left;
                  if (abs(x-BallNum[!BallTurn].x)<20 && BallNum[!BallTurn].y==y) {
                  
                    if (x>=tStick.Left+tStick.Length/2) 
                    {
                        x=x-20;
                        BallNum[!BallTurn].x=BallNum[!BallTurn].x+10;
                    }else
                    {
                     x=x+20;    
                     BallNum[!BallTurn].x=BallNum[!BallTurn].x-10;
                    }   
                  }           
              }
              if (CheckKey(ENTER_KEY)) IsDock=0;
              if (!IsDock)
              {
              
                xOffset=StkOffset-tStick.Length/2;
                vx=tBall.speed*Sin(abs(xOffset)*100/tStick.Length+5)/1024;
                if (xOffset<0)  vx=-vx;
                vy=-tBall.speed*Cos(abs(xOffset)*100/tStick.Length+5)/1024;
               
                  
              }

              
         }
        
      }
      if (y>=STICK_HEIGHT+(aaa=40))
      {
         if (!(tBall.MixProperty & BALL_RELIFE))
        {
             BallNum[BallTurn].visible=0;
             BallNum[BallTurn].vy=0;
             BallNum[BallTurn].vx=0;  
             if (BallNum[aaa=0].visible==0 & BallNum[aaa=1].visible==0){
                IsAlive=0;
             }
         }else
         {
             vy=-vy;
             tBall.MixProperty=tBall.MixProperty -BALL_RELIFE;
        }
        
      }
      
      Bpox=(x+70)/100;
      Bpoy=(y+30)/50;

            if (abs(Bpox-lBpox) && abs(Bpoy-lBpoy)){ 
              if ( Bpox>0 && Bpox<12 && Bpoy>0 && Bpoy<12 && Blocks[Bpox-1][Bpoy-1] && !Blocks[lBpox-1][Bpoy-1]
                       && !Blocks[Bpox-1][lBpoy-1]) {
                       
                                  
                        if  (tBall.Strength==3){
                           if (Blocks[Bpox-1][Bpoy-1]<3){
                               TotalBlock--;
                           }
                           Blocks[Bpox-1][Bpoy-1]=0;
                            
                        }else
                        {
                           if (tBall.Strength>=Blocks[Bpox-1][Bpoy-1]) Blocks[Bpox-1][Bpoy-1]--;
                           if (!Blocks[Bpox-1][Bpoy-1]){
                               TotalBlock--;
                               CreatItem(y);  
      
                           }
                        }                                             
                         DrawBlock(Bpox-1,Bpoy-1,Blocks[Bpox-1][Bpoy-1]);
                        
                                                                      if (!(tBall.MixProperty & BALL_THROUGH)) {vx=-vx;vy=-vy;Bpox=lBpox;Bpoy=lBpoy;}

                 } 
                if (lBpox>0 && lBpox<12 && Bpoy>0 && Bpoy<12){
                
                     if (Blocks[lBpox-1][Bpoy-1]) {
                     
                        
                        if (tBall.Strength==3){
                           if (Blocks[lBpox-1][Bpoy-1]<3){
                               TotalBlock--;
                               CreatItem(y); 

                           }       
                                         

                           Blocks[lBpox-1][Bpoy-1]=0;

                        }else
                        {
                           if (tBall.Strength>=Blocks[lBpox-1][Bpoy-1]) Blocks[lBpox-1][Bpoy-1]--;
                           if (!Blocks[lBpox-1][Bpoy-1]){
                               TotalBlock--;
                               CreatItem(y); 

                           }   

                        }
                        DrawBlock(lBpox-1,Bpoy-1,Blocks[lBpox-1][Bpoy-1]);
                        
                        if (!(tBall.MixProperty & BALL_THROUGH)) {vy=-vy;Bpoy=lBpoy;}

                     }
                     
                }
                
                if (Bpox>0 && Bpox<12 && lBpoy>0 && lBpoy<12){
                    if (Blocks[Bpox-1][lBpoy-1]) {
                       
                                  
                        if (tBall.Strength==3){
                           if (Blocks[Bpox-1][lBpoy-1]<3){
                               TotalBlock--;
                               CreatItem(y); 
                           }
                           Blocks[Bpox-1][lBpoy-1]=0;

                        }else
                        {
                           if (tBall.Strength>=Blocks[Bpox-1][lBpoy-1]) Blocks[Bpox-1][lBpoy-1]--;
                           if (!Blocks[Bpox-1][lBpoy-1]){
                               TotalBlock--;
                               CreatItem(y); 

                           }
                        }                                             
                         DrawBlock(Bpox-1,lBpoy-1,Blocks[Bpox-1][lBpoy-1]);
                         
                         if (!(tBall.MixProperty & BALL_THROUGH)){ vx=-vx;Bpox=lBpox; }    
                  }
                   
                }
                               


            }else
            {
              if (Bpox>0 && Bpox<12 && Bpoy>0 && Bpoy<12){
            
                if (Blocks[Bpox-1][Bpoy-1]){

                   
                        if (tBall.Strength==3){
                           if (Blocks[Bpox-1][Bpoy-1]<3){
                           CreatItem(y); 

                               TotalBlock--;
                           }
                           Blocks[Bpox-1][Bpoy-1]=0;
                           
                        }else
                        {
                           if (tBall.Strength>=Blocks[Bpox-1][Bpoy-1]) Blocks[Bpox-1][Bpoy-1]--;
                           if (!Blocks[Bpox-1][Bpoy-1]){
                               TotalBlock--;
                               CreatItem(y); 

                           }
                        }                   
                   DrawBlock(Bpox-1,Bpoy-1,Blocks[Bpox-1][Bpoy-1]);
                   
                   if (!(tBall.MixProperty & BALL_THROUGH)){
                      if (abs(Bpox-lBpox) ){
                        vx=-vx;Bpox=lBpox;
                     }
                      if (abs(Bpoy-lBpoy) ){
                        vy=-vy;Bpoy=lBpoy;
                    }
                   }
                 }

              }
         
          
            }
      
      
      BallNum[BallTurn].lx=lx;
      BallNum[BallTurn].ly=ly;
      BallNum[BallTurn].vx=vx;
      BallNum[BallTurn].vy=vy;    
      BallNum[BallTurn].x=x+vx;  
      BallNum[BallTurn].y=y+vy;  
      BallNum[BallTurn].Bpox=Bpox;
      BallNum[BallTurn].Bpoy=Bpoy;  
      BallNum[BallTurn].isDock=IsDock;
      
  End1:  
     
      if (!BallTurn) {BallTurn=BallTurn+1;goto loop1;}
      

        
        Refresh();
   
        
        if (gainITEM.itemID) {

            gainITEM.y=gainITEM.y+5;
            if (gainITEM.y<STICK_HEIGHT+(aaa=10) && gainITEM.y>STICK_HEIGHT-(aaa=30)){
                 if ((gainITEM.x>=tStick.Left && gainITEM.x<=tStick.Left+tStick.Length) || 
                         (gainITEM.x+8>=tStick.Left && gainITEM.x+8<=tStick.Left+tStick.Length)){
                    Gain(gainITEM.itemID);
                    gainITEM.itemID=0;
               
                    Block(122,42,156,56,0);
                    Box(122,42,156,56,1,0);
                 }
            }
            if (gainITEM.y>STICK_HEIGHT+(aaa=20)){
                gainITEM.itemID=0;
            
               Block(122,42,156,56,0);
               Box(122,42,156,56,1,0);
               
            }
            Box(gainITEM.x/10-4,gainITEM.y/10,gainITEM.x/10+4,gainITEM.y/10+3,0,2);

      }

      
       if (BallNum[aaa=0].visible){
    
                WriteBlock(BallNum[aaa=0].x/10-2,BallNum[aaa=0].y/10-2,4,4,67,ball);

        }      
        if (BallNum[aaa=1].visible){
                 WriteBlock(BallNum[aaa=1].x/10-2,BallNum[aaa=1].y/10-2,4,4,67,ball);

        }   
        Box(tStick.Left/10,STICK_HEIGHT/(aaa=10),(tStick.Left+tStick.Length)/10, STICK_HEIGHT/(aaa=10)+(aaa=1),0,1);
      



         
        Delay(100);

    }
    
    if (!IsAlive){
       TextOut(30,60,"You Miss!",67);
       Box(1,0,160,80,1,2);
       
       ReleaseKey(129);
       
       getchar();
       tBall.life--;
       if (tBall.life) {
         goto Start;
       }
       else
       {
         Box(1,0,160,80,1,1);
         TextOut(50,40,"GAME OVER",66);
         ReleaseKey(129);
       
         getchar(); 
         getchar(); 
       }
    }
    if (TotalBlock<=0){
         TextOut(30,60,"Stage Clear!",67);
         Box(1,0,160,80,1,2);
         
         ReleaseKey(129);
         getchar(); 
         Box(1,0,160,80,1,2);

         return 1;
    }
    return -1;
}

void HighScoreCheck(){
    char str_Score[10];
    if (TotalScore>999999) TotalScore=999999; 
 
    sprintf(str_Score,"Your Score:%d",TotalScore);

 
    if (TotalScore>HighScores){
         ClearScreen();
         WriteBlock(8,8,124,29,1,Msg_HighScore);
    
         Refresh();
         TextOut(0,40,str_Score,65);
         
         ReleaseKey(129);
       
         getchar(); 
         getchar(); 
         HighScores=TotalScore;
    
    }

}

void ShowIntro(){
  ClearScreen();
  TextOut(50,30,"CSKSOFT",1);
  TextOut(50,45,"Present",1);
  Refresh();
 // Delay(2000);
}
void ClsSrc(){
 /* char i;
  for (i=1;i<160+80;i++){
     Line(i,0,i-80,79,0);
  }*/
}
void main()
{
 
   char buf[20];
   char Scorepf;
   int INTBUF[2];
   int i,j;
  


   ShowIntro();
   
   Scorepf=fopen("/LavaData/cballrank.lst","rb");
   
   if (Scorepf==0) {
  //   Scorepf=fopen("/LavaData/cballrank.lst","wb");
     HighScores=0;
   }else
   {
     fread(INTBUF,1,2,Scorepf);
     HighScores=INTBUF[aaa=0];
   }
   fclose(Scorepf);
   
   fp=fopen("/LavaData/stagepack.dat","rb");
   if (fp==0) return;
   rewind(fp);
  
   
   if (fread(buf,1,3,fp)==0) {fclose(fp);return ;}
   totalstage=buf[aaa=0];

   
   
  //  ClsSrc();
   CreateImgList();
   
  start2:  
   
   if ( ShowMain()==-1) goto end1;
   ReleaseKey(129);
   TotalScore=0;
   theStage=0;
   tBall.life=3;
   CreatSence();
 start1:
   theStage++;
   if (theStage<=totalstage){


 
      IniStage(theStage);
 
      if (GameLoop()==1) goto start1;
   
   }
   else
   {
        
         
         ClearScreen();
         WriteBlock(20,10,114,27,1,Msg_Congration);
    
         Refresh();
         TextOut(0,40,"You have finish All Stages!",65);
         ReleaseKey(129);
       
         getchar(); 
         getchar(); 
   }
    HighScoreCheck();
    goto start2;
    end1:
       fclose(fp);
       Scorepf=fopen("/LavaData/cballrank.lst","wb");
      
       INTBUF[aaa=0]=HighScores;
       fwrite(INTBUF,1,2,Scorepf);
       fclose(Scorepf);
      // if (fwrite(buf,1,20,fp)==0) {fclose(fp);Beep();return ;}
       
       exit(0);
}

