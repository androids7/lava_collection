char tt;

void settype(int type)
{
	tt = type;
}

void line(int xa, int ya, int xb, int yb, int type)
{
	int dx, dy;
	int p;
	int twoDy, twoDyDx;
	int x, y, xEnd;
	char n;

	dx = abs(xa - xb);
	dy = abs(ya - yb);
	p = (dy << 1) - dx;
	twoDy = dy << 1;
	twoDyDx = (dy - dx) << 1;
	if (xa > xb)
	{
		x = xb;
		y = yb;
		xEnd = xa;
	}
	else
	{
		x = xa;
		y = ya;
		xEnd = xb;
	}
	Point(x, y, type);
	n = 1;
	while (x++ < xEnd)
	{
		if (p < 0)
		{
			p = p + twoDy;
		}
		else
		{
			y++;
			p = p + twoDyDx;
		}
		if (tt)
		{
			if (n = n ^ 1) Point(x, y, type);
		}
		else
		{
			Point(x, y, type);
		}
	}
}

void cpoint(int xCenter, int yCenter,int x, int y, int fill, int type)
{
	if(fill)
	{
		Line(xCenter - x, yCenter + y, xCenter + x, yCenter + y, type);
		Line(xCenter - x, yCenter - y, xCenter + x, yCenter - y, type);
		Line(xCenter - y, yCenter + x, xCenter + y, yCenter + x, type);
		Line(xCenter - y, yCenter - x, xCenter + y, yCenter - x, type);
	}
	else
	{
		Point(xCenter + x, yCenter + y, type);
		Point(xCenter - x, yCenter + y, type);
		Point(xCenter + x, yCenter - y, type);
		Point(xCenter - x, yCenter - y, type);
		Point(xCenter + y, yCenter + x, type);
		Point(xCenter - y, yCenter + x, type);
		Point(xCenter + y, yCenter - x, type);
		Point(xCenter - y, yCenter - x, type);
	}
}

void circle(int xCenter, int yCenter, int radius, int fill, int type)
{
	int x;
	int p;
	char n;

	cpoint(xCenter, yCenter, 0, radius, fill, type);
	x = 0;
	p = (n = 1) - radius;
	while (x++ < radius)
	{
		if (p < 0)
		{
			p = p + (x << 1) + 1;
		}
		else
		{
			radius--;
			p = p + ((x - radius) << 1) + 1;
		}
		if(tt)
		{
			if (n = n ^ 1) cpoint(xCenter, yCenter, x, radius, fill, type);
		}
		else
		{
			cpoint(xCenter, yCenter, x, radius, fill, type);
		}
	}
}

void epoint(int xCenter, int yCenter, int x, int y, int fill, int type)
{
	if(fill)
	{
		Line(xCenter - x, yCenter + y, xCenter + x, yCenter + y, type);
		Line(xCenter - x, yCenter - y, xCenter + x, yCenter - y, type);
	}
	else
	{
		Point(xCenter + x, yCenter + y, type);
		Point(xCenter - x, yCenter + y, type);
		Point(xCenter + x, yCenter - y, type);
		Point(xCenter - x, yCenter - y, type);
	}
}

void ellispe(int xCenter, int yCenter, int Rx, int Ry, int fill, int type)
{
	int Rx2, Ry2;
	int twoRx2, twoRy2;
	long p;
	int x, y;
	long px, py;
	char n;

	x = px = 0;
	Rx2 = Rx * Rx;
	Ry2 = Ry * Ry;
	twoRx2 = Rx2 << 1;
	twoRy2 = Ry2 << (n = 1);
	y = Ry;
	py = twoRx2 * y;
	epoint(xCenter, yCenter, x, y, fill, type);
	p = Ry2 - Rx2 * Ry + ((Rx2 + 2) >> 2);
	while (px < py)
	{
		x++;
		px = px + twoRy2;
		if (p < 0)
		{
			p = p + Ry2 + px;
		}
		else
		{
			y--;
			py = py - twoRx2;
			p = p + Ry2 + px - py;
		}
		if (tt)
		{
			if (n = n ^ 1) epoint(xCenter, yCenter, x, y, fill, type);
		}
		else
		{
			epoint(xCenter, yCenter, x, y, fill, type);
		}
	}
	p = Ry2 * x * x + Ry2 * x + Rx2 * (y - 1) * (y - 1) - Rx2 * Ry2 + ((Ry2 + 2) >> 2);
	while (y-- > 0)
	{
		py = py - twoRx2;
		if (p > 0)
		{
			p = p + Rx2 - py;
		}
		else
		{
			x++;
			px = px + twoRy2;
			p = p + Rx2 - py + px;
		}
		if (tt)
		{
			if (n = n ^ 1) epoint(xCenter, yCenter, x, y, fill, type);
		}
		else
		{
			epoint(xCenter, yCenter, x, y, fill, type);
		}
	}
}

//numpoint 多边形点数 points保存多边形顶点坐标的数组（x1,y1,x2,y2顺序）
void drawpoly(int numpoint, int &points[][2], int type)
{
	int i;

	if (numpoint < 2) return;
	for (i = 1; i < numpoint; i++) Line(points[i - 1][0], points[i - 1][1], points[i][0], points[i][1], type);
	Line(points[0][0], points[0][1], points[numpoint - 1][0], points[numpoint - 1][1], type);
}

void MoveDown(char type)
{
	long buf[81][5];

	memset(buf[0], 0, 20);
	GetBlock(0, 0, 160, 80, type, buf + 20);
	WriteBlock(0, 0, 160, 80, type, buf);
}

void MoveUp(char type)
{
	long buf[81][5];

	memset(buf[80], 0, 20);
	GetBlock(0, 0, 160, 80, type, buf);
	WriteBlock(0, 0, 160, 80, type, buf + 20);
}

void Shutter(int dat)
{
	long buf[10][8][5];
	char i, j;

	GetBlock(0, 0, 160, 80, 0, buf);
	for(i = 0; i < 8; i++)
	{
		for (j = 0; j <10; j++)
		{
			memmove(buf[j][i], dat + ((j << 3) + i) * 20, 20);
		}
		WriteBlock(0, 0, 160, 80, 1, buf);
		Refresh();
		Delay(50);
	}
}       
                                 ///     倍数   类型   地址
void DrawPoint(int x,int y,int weith,int h,char d,int type,long buf)//1 缓冲区作图/0x41 屏幕作图 0X43画镂空图
{
	int x1;
	char b, c;
	char n, n2, w, i;

	w = weith >> 3;
	x1 = x;
	for (n2 = 0; n2 < h; n2++)
	{
		i = 0;
		for (i = 0; i < w; i++)
		{
			b = *(buf + w * n2 + i);
			for (n = 0; n < 8; n++)
			{
				c = (b&0x80) >> 7;
				if (type == 0x43)
				{
					if (c) Block(x, y, x + d, y + d, 1);
				}
				else if (type == 1)
				{
					Block(x, y, x + d, y + d, c);
				}
				else
				{
					Box(x, y, x + d, y + d, 1, c);
				}
				b = b << 1;
				x = x + d + 1;
			}
		}
		x = x1;
		y = y + d + 1; 
	}
}

void main()
{ClearScreen();Refresh();
 settype(1);

 getchar();
}