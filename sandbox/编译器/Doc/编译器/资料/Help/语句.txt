*简介:
 语句用来向虚拟机发出操作指令，一个程序包含若干语句。函数包含声明部分和执行部分，声明部分不应称为语句。如:int a;不是语句，它不产生操作，只是对变量的定义。语句可以分为以下5类:
 1.控制语句:
  条件语句:if()~else~
  循环语句:for() ~
  循环语句:while()~
  循环语句:do~while()
  结束本次循环语句:continue
  终止执行循环语句:break
  跳转语句:goto
  从函数返回语句:return
  上面8种语句中的括号()表示其中是一个条件，~表示内嵌的语句。
 2.函数调用语句。
  有函数调用加一个分号构成语句，如:printf("a\n");
 3.表达式语句。
  由一个表达式构成语句，如:a = 3是表达式，而a = 3;是语句。可以看到一个表达式的最后加一个分号就成了语句。语句必须在最后出现分号，分号是语句中不可缺少的一部分。
 4.空语句。
  只有一个分号的语句，它什么也不做。
 5.可以用{}把一些语句括起来成为复合语句，如:
  {
   z = x + y;
   t = z / 100;
   printf("%d", t);
  }
 允许一行写几个语句，也与一个语句拆开写在几行上，书写格式无固定要求。
*表达式:
 1.关系表达式，有6种关系运算符:
  小于     :<
  小于等于 :<=
  大于     :>
  大于等于 :>=
  等于     :==
  不等于   :!=
  <, <=, >, >=优先级相同
  ==, !=优先级也相同
  但前4种高于后2种。
  关系运算符的优先级低于算术运算符。关系运算符的优先级高于赋值运算符。用关系运算符将两个表达式（可以是算术、关系、逻辑、赋值、字符表达式）连接起来的式子称为关系表达式。关系表达式的值是一个逻辑值，即真或假。以-1代表真，以0代表假（注意:C/C++的语法是以1代表真，以0代表假）。
  如:表达式:(3 > 1) == 2的值为真，即为-1。
 2.逻辑表达式，有3种逻辑运算符:
  与:&&
   如：a && b 若a, b为真，则a && b为真。
  或:||
   如：a || b 若a, b之一为真，则a || b为真
  非:!
   如：!a 若a为真，则!a为假
  &&和||是双目运算符,它要求有两个运算量(操作数),如(a > b) && (x > y),(a > b) || (x > y)。
  !是一目运算符,只要求有一个运算量,如!(a > b)。
  它们的优先级为:
   1.!高于&&高于||，即!为三者中最高的。
   2.逻辑运算符中的&&和||低于关系运算符，!高于关系运算符。
  逻辑表达式的值应该是一个逻辑量'真'或'假'，编译系统在给出逻辑运算结果时，以数值-1代表真，以0代表假（注意:C/C++的语法是以1代表真，以0代表假），但是在判断一个量是否为真时，以0代表假，以非0代表真。
 3.算术表达式，有5种基本运算符:
  +(加法运算符或正值运算符)
  -(减法运算符或负值运算符)
  *(乘法运算符)
  /(除法运算符)
  %(模运算符或称求余运算符)
  用算术运算符和括号将运算对象链接起来，称算术表达式。
  运算对象包括常量，变量，函数等。
  如:a*b/c-'a'。运算符的优先级和结合性为*,/,%高于+,-，有括号则先算括号里的，而且是从左到右算（结合），这和我们平常的数学计算一样。
 4.求字节数运算符(sizeof)，是一种单目操作符，如其他操作符++、--等。它并不是函数。sizeof操作符以字节形式给出了其操作数的存储大小。操作数可以是一个表达式或括在括号内的类型名。操作数的存储大小由操作数的类型决定。
  用法:
  1.用于数据类型
   格式：sizeof (type)
   数据类型必须用括号括住。如sizeof (int);
  2.用于变量
   格式：sizeof(var_name)或sizeof var_name
   变量名可以不用括号括住
   如：int a;sizeof(a);sizeof(int);结果都是2。
  可以对数组求字节数，结果为总占用空间大小。
  如：int a[10][10];sizeof(a);结果为200。
  可以用sizeof求数组元素大小。
  如：int a[10][10];sizeof a[0][0];结果为2。而sizeof a[0];结果为1维大小20。
  也可以对结构体等构造体求字节数，结果为结构体占用空间大小。
  如：struct TT t;sizeof(t);sizeof(struct TT)。结果是一样的。
  注意:sizeof操作符不能用于函数类型。
 5.位运算表达式，有6种基本运算符:
  按位与:&
  按位或:|
  按位异或:^
  按位取反:~
  左移:<<
  右移:>>
  位运算符除了~以外，均为二元运算符，即要求两侧各有一个运算量。
  运算量只能是整形或字符型的数据。
  &,|,^优先级在位运算符中最低，~最高，<<,>>居中。
  按位与:&
   参加运算的两个数据，按2进制进行'与'运算，如果两个相应的2进制位都为1，则该位的结果为1，否则为0，即:0&0=0,0&1=0,1&0=0,1&1=1。
   如：3&5=1;
   按位与的用途：
    1.指定的位清零
    2.取指定的位
    3.保留指定的位
  按位或:|
   两个相应的2进制位中只要有一个为1，则该位的结果为1，即:0|0=0,0|1=1,1|0=1,1|1=1。
   如：3|5=7;
   该运算符可以使指定的位为1
  按位异或:^
   若参加运算的两个2进制位同号，则该位的结果位0，异号则为1，即:0^0=0,0^1=1,1^0=1,1^1=0。
   如：3^5=6；
   按位异或的用途：
    1.使指定的位翻转
    2.交换两个值:a=a^b;b=b^a;a=a^b;
  按位取反:~
   2进制位取反，即:0变1，1变0
   如：~0x03=0xfc;
  左移:<<
   将数据的各个位左移若干位，如：a = a << 2;
   将a左移2位，右补0，若a=15,即:00001111,左移2位得:00111100,即60，高位左移后溢出，舍弃不起作用。左移1位相当于乘以2，左移比乘法运算快得多。
  右移:>>
   将数据的各个位右移若干位，如：a = a >> 2;
   将a右移2位，左补0，若a=15,即:00001111,右移2位得:00000011,即3，低位右移后溢出，舍弃不起作用（注意与C/C++语法的区别，C/C++区分无符号和有符号数，有符号数右移高位补1）。右移1位相当于整除2，右移比整除运算快得多。
 6.其它的如：指针运算符(* &)，分量运算符(.)，下标运算符([])等等。限于篇幅就不介绍了（可以参考C/C++语言相关书籍）。
*赋值语句:
 赋值语句是由赋值表达式加上一个分号构成。赋值号'='是一个运算符。作为赋值表达式可以包含在其他表达式中。如:if((a=b)>0)t=a;，其作用是:先进行赋值运算（将b的值赋给a），然后判断a是否大于0，如大于0，执行t=a。在此语句中a=b不是赋值语句而是赋值表达式，这样写是合法的。如果写成:if((a=b;)>0)t=a;就错了。
*条件语句:
 条件语句是用if语句来实现的。共有3种形式的if语句:
 1.if(表达式)语句。
  如:if(a)pirntf("a");即如果a为真则打印字母a。
 2.if(表达式)语句1 else 语句2。
  如:if (x > 0) y = 1; else y = -1;
  即如果x > 0为真则y = 1，否则y = -1。
 3.if(表达式1)语句1 else if(表达式2)语句2 else if(表达式3)语句3……else 语句n。哪一条表达式为真，则执行那一条后面的语句。
 if语句可以嵌套使用。
*跳转语句:
 一般形式为:goto 语句标号;
 语句标号用标识符表示，它的命名规则与变量名相同，即由字母、数字和下划线组成。其第一个字符必须为字母或下划线。
 结构化程序设计方法主张限制使用goto语句，因为滥用goto语句将使程序流程无规律，可读性差。但也不是绝对禁止使用goto语句。一般来说可以有两种用途:
 1.与if语句一起构成许循环结构。
 2.从循环体中跳到循环体外，但可以用break语句和continue语句跳出本层循环和结束本次循环，只是需要从多层循环的内层循环跳转到外层循环或能大大提高效率时才用到goto语句。如:
      i = 0;
 loop:
      if (i < 10)
      {
       s = s + i;
       i++;
       goto loop;
      }
*循环语句:
 循环语句有3种结构:
 1.while(表达式)语句。当表达式为真（非0）时，执行while语句种的内嵌语句。
  其特点是:先判断表达式，后执行语句。如:s=i=0;while(i<10){s=s+i;i++;}
 2.do{语句}while(表达式)。
  其特点是:先执行语句，后判断表达式。如:s=i=0;do{s=s+i;i++;}while(i<10)
 3.for(表达式1;表达式2;表达式3)语句。它的执行过程:1.求解表达式1。2.判断表达式2，当为真时，执行for语句的内嵌语句，然后执行第3步，否则转到第5步。3.求解表达式3。4.转回第2步。5.循环结束，执行for语句下面的语句。
  for语句最简单的应用形式:for(循环变量赋初值;循环条件;循环变量增值)语句。如:(i=0;i<10;i++)s=s+i;
  for语句可以改写为while语句:表达式1;while(表达式2){语句;表达式3;}
  注意:for语句种的表达式1、2、3都可以省略，但分号不能省略。如果表达式2省略，则循环无终止地进行下去。
*break语句和continue语句:
 这种语句只能出现在循环体内。它们的一般形式为:break;或continue;。
 break语句用来从循环体内跳出循环体，即提前结束循环，接着执行循环下面的语句。如:for(;;){a=p*r;if(a>10)break;r++;}
 continue语句用来结束本次循环，即跳过循环体中下面尚未执行的语句，接着进行下一次是否执行循环的判断。它只结束本次循环，而不是终止整个循环的执行。而break语句则是结束整个循环过程，不再判断执行循环的条件是否成立。
 注意:break语句和continue语句本质是goto语句。