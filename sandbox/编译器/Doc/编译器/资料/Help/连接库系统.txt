       连接库系统
*简介:
 连接库系统包括两个部分：头文件系统和链接库系统。二者都是为了加快编译速度，妥善使用连接库系统不仅可以加快编译速度，还可以简化程序的开发。
*头文件系统:
 头文件系统分布在预处理器中，它能处理由#include包含的头文件(*.h)（#include命令的用法请参见'帮助'→'语法'→'命令'），头文件是由源程序经过预处理器处理生成的文件。将一些功能完善，接口独立的一组函数做成头文件，可以避免以后开发程序重新设计功能类似的函数，减少程序开发时间并且使源程序模块化。如果头文件功能需要改进，还可以修改它然后重新生成头文件，非常灵活。但是加快编译速度并不明显（需要经过编译器编译）。
 头文件只能放在'/FunData'文件夹中。
*制作方法:
 在'设置'→'编译系统'→'编译为*.h文件？'选择是，保存设置，然后退出。这时编译器会将源程序编译为头文件(*.h)。比如：要把sqrt函数做成头文件，1.打开编辑器:'文件'→'新建'，写入代码（sqrt函数），然后保存成'math.txt'文件（该文件会被保存在'/文本文件'里）。2.编译该文件:'文件'→'编译'，选择'/文本文件'目录下的'math.txt'，这时编译器会把'math.txt'编译成'math.h'并保存在'/FunFata'中。这样头文件就制作完成了。
*调用方法:
 我们在设计一个程序时，如果需要用到头文件里的函数，比如要使用到sqrt函数，那么就直接在源程序的头部添加'#include <math.h>'（不包括'号），这时源程序就可以直接调用sqrt函数了。
*注意:
 1.不能把main函数做成头文件，因为main是所有程序的入口，而且在程序中只能有一个main函数，这是系统定义的。
 2.使用include命令只能包含*.y和*.h格式的文件（与C/C++语言语法有区别）。
*链接库系统:
 链接库系统又分为查看器、链接器、生成器。查看器可以查看链接库文件的相关信息（'查看'→'链接库'选择要查看的链接库文件），链接器分布在编译器中，它能处理由#include包含的链接库文件(*.y)，生成器则是链接库文件的制作程序，是由已经编译好的程序(*.lav)加上接口文件和说明文件而生成的文件，它除了有头文件的优点以外还可以加快编译速度（不需要经过编译器编译），无法查看代码。但是不灵活，无法修改，增加了目标文件的长度且并不是所有函数都是我们需要的，这样增加了符号表需要存储的个数，浪费了变量区空间，如果变量区空间紧张的话，尽量不用链接库文件，当然合理的使用链接库可以加快编译速度的，比如程序开发过程中将不需要改动的一组函数做成链接库，再使用文件包含，则可以加快编译速度，简化源程序。
 链接库文件只能放在'/LibData'文件夹中。
*制作方法:
 制作一个链接库文件需要三个文件：程序文件(*.lav)、接口文件(接口.txt)、说明文件(说明.txt)。程序文件是函数体的实际代码，没有包含函数的相关信息，接口文件是函数说明文件，它包含了程序文件没有的函数的相关信息（是否作为接口 函数名，是否有返回值），说明文件则是链接库文件的可见部分，可以用查看器查看，它包含了链接库文件作者的说明。
 1.程序文件:把要制作成链接库文件的函数经由编译系统编译生成程序文件。比如要把sqrt函数做成链接库文件，在'设置'→'编译系统'→'编译为*.h文件？'选择否，保存设置，然后退出。把sqrt函数保存在'math.txt'中并添加一个空的main函数（没有main函数是无法编译的），然后'文件'→'文件'选择'math.txt'，这时会在程序目录生成一个'math.lav'文件，这个就是我们需要的文件。
 2.接口文件:它的格式是:
  是否作为接口（0:不做接口，1:作为接口。接口是指生成链接库文件后，外部只能调用作为接口的函数，即作为接口的函数对外部是可见的，如果该函数不想被人调用，则这一项应为0） 函数名 是否有返回值（0:没有返回值，1:有返回值）。
  每一项用空格隔开。如果有多个函数，那么每个函数对应一条信息顺序写入文件中（不作为接口的函数也要写入信息，即所有的函数（除了main函数）都要按照函数的顺序写下来）:
  是否作为接口 函数名 是否有返回值
  是否作为接口 函数名 是否有返回值
  ......
  比如:
  1 sqrt 1
  0 pow  2
  按照这个格式写：新建一个'接口.txt'文件，写入'1 sqrt 1'，然后保存到'/文本文件'文件夹中。
 3.说明文件:新建一个'说明.txt'，写入改链接库文件可以使用的接口函数及其用法，其他信息可以自己添加，然后保存到'/文本文件'文件夹中。
 4.生成链接库文件:在'文件'→'编译'→'链接生成'选择程序文件（比如'math.lav'），生成器会在'/LibData'文件夹下生成'math.y'文件，这样链接库文件就制作完成了。
*调用方法:
 我们在设计一个程序时，如果需要用到链接库文件的函数，比如要使用到sqrt函数，那么就直接在源程序的头部添加'#include <math.y>'（不包括'号），这时源程序就可以直接调用sqrt函数了。
*注意:
 1.要做成链接库文件的函数可以使用全局变量或静态变量，但是不能对变量进行取地址操作，如:&a,&b。因为地址的本质是数字，程序无法识别到底是数字还是地址，从而无法进行偏移计算。如果int a[10];要对a取地址，可以这样:&a[0]而不要&a（对本编译器有效，其他编译器无效），还有要做成连接库的lav程序请不要优化它，否则出错的几率更大！众所周知，LavaX中的变量是从0x2000开始定义变量的（最开始定义的那个变量的地址是0x2000），而位置相邻的变量的地址是连续的，最后才是LavaX程序运行栈（函数调用生成的堆栈），除了运行栈以外，其他都是在编译阶段分配好的，也就是说全局变量的地址是永远不会改变的。那么链接库是怎么插入到你的源程序当中呢？要知道链接库是已经编译过的代码，而它也是从0x2000开始定义变量的，位置相邻的变量的地址是连续的。如果直接插入到源程序中就会造成地址冲突，因为链接库和源程序共用了同一段内存，所以程序就长生了错误。如何解决这个错误？为了避免地址冲突，就需要在链接的时候对链接库的变量进行地址偏移，让它移到源程序所有变量之后不久行了？对，编译器在处理链接库的时候就是这样把链接库插入到你的源程序中的。但是链接库毕竟是编译过的代码而不是源程序，不能直接看出哪个是全局变量，哪个是局部变量。怎么分清全局变量是个问题。虽然大部分的代码是容易辨认的，但是有一点确是分不清的：LavaX语言是无类型语言，地址和数字在语法上是一样的，所以在制作链接库的时候一定要注意这一点！什么样的变量会被当成数字看待呢？数组会被当成数字看，比如：char a[10];printf("%d",a);这里的a的值是a的地址，编译器是把它当作数字看的，在制作链接库的时候可以把它写成&a[i=0]（i是临时变量）。还有对全局变量取地址时也是当成数字看的，比如：char a;&a;应该避免这种写法。其余，在增加了若干编译命令后：#start,#skip,#unstart,#loaddata，这些都跟地址有关系的，所以链接库对偏移地址范围做了限制，只偏移0x2000~0x7000以内的变量，所有如果用以上几个编译命令定义变量时如果超出0x2000~0x7000就进行地址偏移了。
 2.可以在源程序的任意地方调用链接库文件，即#include <math.y>可以出现在源程序的任意地方，不象头文件调用有限制。
 3.只能调用作为接口的函数，当然那些不能调用的函数可以作为内部函数。
 4.在源程序中main函数一定要放在所有函数之后，然后在编译生成程序文件。main函数的信息不能也不必写入'接口.txt'中。
 5.链接库里可以包含另外的链接库，在写接口.txt时必须把所有函数罗列下来（包括被调用的链接库），这样才不会出错。
 6.少用全局变量，不用或少用（推荐不用）全局引用，不要在库中建立复杂的数据结构！