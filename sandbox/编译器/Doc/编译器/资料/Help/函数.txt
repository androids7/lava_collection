*简介:
 一个较大的程序一般应分为若干个程序模块，每一个模块用来实现一个特定的功能。所有高级语言都有子程序这个概念，用子程序实现模块的功能。子程序的作用是由函数完成的。一个LavaX程序可由一个主函数（main函数）和若干个函数构成的。由主函数调用其他函数，其他函数也可以互相调用。同一个函数可以被一个或多个函数调用任意多次。
 先举一个例子:
 void print_msg()
 {
  printf("Hello World!\n");
 }
 void print_star()
 {
  printf("*************\n");
 }
 void main()
 {
  print_star();
  print_msg();
  print_star();
 }
 可以看出:
 1.一个源程序由一个或多个函数组成。一个源程序文件是一个编译单位，即以源程序为单位编译而不是以函数为单位编译。
 2.程序的执行从main函数开始，调用其他函数后流程返回到main函数，在main函数中结束整个程序的运行。main函数是系统定义的。
 3.所有函数都是平行的，即在定义函数时是互相独立的，一个函数并不从属于另一个函数。函数间可以互相调用，但不能调用main函数。
 4.从用户使用的角度看，函数有两种:
  ①系统函数。这是由系统提供的，用户不必自己定义这些函数，可以直接使用它们。但是不同的WQX提供的系统函数的数量和功能不同，当然有一些基本的函数是共同的。编译器没有包含这些系统函数，系统函数信息保存在函数文件（*.fun）中，软件编译时会自动载入该文件。在'帮助'→'索引'中可以查看当前函数文件中的系统函数信息。要选择载入不同的函数文件可以在'设置'→'编译系统'→'选择要载入的函数文件'中设定。
  ②用户自己定义的函数。由用户按需要写的函数。对于用户自定义函数，在使用前一定要先声明它们，否则就不必了。
 5.LavaX语言的函数兼有其它语言中的函数和过程两种功能，从这个角度看，又可把函数分为有返回值函数和无返回值函数两种:
  ①有返回值函数。此类函数被调用执行完后将向调用者返回一个执行结果， 称为函数返回值。如数学函数即属于此类函数。 由用户定义的这种要返回函数值的函数，必须在函数定义和函数说明中明确返回值的类型。
  ②有参函数。此类函数用于完成某项特定的处理任务，执行完成后不向调用者返回函数值。这类函数类似于其它语言的过程。由于函数无须返回值，用户在定义此类函数时可指定它的返回为“空类型”，空类型的说明符为“void”。
 6.从主调函数和被调函数之间数据传送的角度看又可分为无参函数和有参函数两种：
  ①无参函数。函数定义、函数说明及函数调用中均不带参数。主调函数和被调函数之间不进行参数传送。此类函数通常用来完成一组指定的功能，可以返回或不返回函数值。例如以上例子中的print_msg和print_star就是无参函数。
  ②有参函数。也称为带参函数。在函数定义及函数说明时都有参数，称为形式参数(简称为形参)。在函数调用时也必须给出参数，称为实际参数(简称为实参)。进行函数调用时，主调函数将把实参的值传送给形参，供被调函数使用。
*函数定义的一般形式:
 1.无参函数的一般形式
 类型标识符 函数名()
 {
  定义部分
  语句
 }
 类型标识符和函数名称为函数头。类型标识符指明了本函数的类型，函数的类型实际上是函数返回值的类型。函数名是由用户定义的标识符，函数名后有一个空括号，其中无参数，但括号不可少。{}中的内容称为函数体。在函数体中也有类型说明，这是对函数体内部所用到的变量的类型说明。在很多情况下都不要求无参函数有返回值，此时函数类型标识符写为void。
 2.有参函数的一般形式
 类型标识符 函数名(形式参数表列)
 {
  定义部分
  语句
 }
 有参函数比无参函数多了两个内容，其一是形式参数表，其二是形式参数类型说明。在形参表中给出的参数称为形式参数，它们可以是各种类型的变量，各参数之间用逗号间隔。在进行函数调用时，主调函数将赋予这些形式参数实际的值。形参既然是变量，当然必须给以类型说明。例如，定义一个函数，用于求两个数中的大数，可写为：
  int max(int a, int b)
  {
   if (a > b)
   {
    return a;
   }
   else
   {
    return b;
   }
  }
 第一行说明max函数是一个整型函数，其返回的函数值是一个整数。形参为a,b。a,b 的具体值是由主调函数在调用时传送过来的。在{}中的函数体内，除形参外没有使用其它变量，因此只有语句而没有变量类型说明。
 可以有空函数，即:
 类型说明符 函数名(){}
 如:int max(){}
 调用此函数时，什么工作也不做，没有任何实际作用，等以后扩充函数功能时补充上。
*函数参数:
 函数定义时函数名后面括号中的参数称为形参，在主调用函数中调用一个函数时，函数名后面括号中的参数称为实参。形参可以是变量，也可以是引用，但不能是数组、结构体或共用体。如:
 long max(long x, long y)
 {
  if (x > y)
  {
   return(x);
  }
  else
  {
   return(y);
  }
 }
 void main()
 {
  long a, b, c;

  a = 7;
  b = 8;
  c = max(a, b);
  printf("Max is %d", c);
  getchar();
 }
 程序中第1～4行是一个函数定义（注意第1行的末尾没有;号），第1行定义了一个函数名max和指定的2个形参x，y及其类型。第7行包含一个调用函数，max后面括号内的a，b是实参。通过函数调用，使两个函数的数据联系起来。关于形参与实参的说明:
 1.定义函数中指定的形参，在为出现函数调用时，它们并不占内存，只有在函数调用时，max中的形参才被分配内存，在调用结束后，形参所占的内存也被释放。
 2.在被定义的函数中，必须指定形参的类型。
 3.实参可以时常量、变量或表达式，如:max(3,a+b);，但要求它们由确定的值。在调用时将实参的值赋给形参。
 4.实参变量对形参变量的数据传递时值传递，即单向传递，只由实参传给形参，而不能由形参传回来给实参。在内存中，实参与形参在不同的单元中。
*不定参数:
 注意这里的不定参数与C/C++语法不同！
 在原有的LavaX语法中是不支持不定参数(即函数的参数不确定)的，为了支持不定参数，必须调用GetArg库的GetArg函数来传递参数，在通过#attr编译命令是函数忽略函数参数个数检查（#attr语法参见帮助->语法->命令），如:
 #include <GetArg.y>

 void fun1(char n)//不定参数的函数fun1有且只有一个参数n（值为参数个数）
 {
  char i;
  long arg[9];

  #attr(fun1, -1, -1, -1, 7, -1, -1, -1, -1, 0);//修改函数fun1为不定参数函数，其中的7表示该函数（fun1）为void型，如果为8表示long型
  GetArg(arg, n);
  printf("fun1: %d个参数\n", n);
  for (i = 0; i < n; i++)
  {
   printf("%d ", arg[i]);
  }
  printf("\n");
  getchar();
 }
 void main()
 {
  SetScreen(1);
  fun1(10);//一个参数
  fun1(30, 20, 14);//三个参数
  fun1();//没有参数
 }
 使用不定参数可以实现一些特殊的函数，如:scanf,sscanf等。
*函数返回值:
 通常，希望通过函数调用时主调用函数能得到一个确定的值，这就是函数的返回值。下面对函数的返回值做一些说明:
 1.函数的返回值时通过函数中的return语句获得的。return语句将被调用函数中的一个确定值带回主调用函数中去。一个函数中可以有一个以上的return语句，执行到哪个return语句就哪个语句起作用。return语句后面的括号可以不要，如:return a;它与return(a);等价。return后面的值可以是一个表达式。
 2.函数返回值的类型。在定义函数时应指定函数的类型标识符），函数定义必须有类型标识符。下面语句是错误的:
 main(){语句}应该写成:void main(){语句}
 而且函数的类型标识符只能为void或long即使定义为int或char型，其效果和定义为long一样，即return语句不因函数返回值的类型而进行类型转换。如:
 int add(int x,int y){return x+y;}
 尽管定义的返回值是int，但仍返回long值。
 如果函数没有返回值，则函数的类型标识符为void型（无类型或空类型）。
*函数调用:
 函数调用的一般形式为:
 函数名(实参表列)
 如果是调用无参函数，则实参表列可以没有，但括号不能省略。如果实参表列包含多个实参，则各参数间用,号隔开。实参与形参的个数应相等并且按顺序对应，然后一一传递数据。函数有以下三种调用方式:
 1.函数语句。把函数调用作为一个语句。如:max(1,2);
 2.函数表达式。函数调用出现在表达式中，但要求函数有返回值。如:c=2*max(a,b);
 3.函数参数。函数调用作为一个函数的实参，但要求函数有返回值。如:m=max(a,max(b,c));
*函数指针:
 函数也可以作为一种资源被程序使用，通过函数指针就可以构造高级软件架构甚至面向对象。函数指针必须有fptr库和#attr命令的支持。如:
 #include<fptr.y>

 int fun(int a, int b)//被fptr函数调用的函数
 {
  return a + b;
 }

 void main()
 {
  int a = 3, b = 7;

  SetScreen(1);
  printf("%d + %d = %d\n", a, b, fptr(a, b, fun));//这里是直接调用fun函数，所以不需要#attr辅助
  getchar();
 }
 再如:
 #include<fptr.y>

 int fun(int a, int b)//被fptr函数调用的函数
 {
  return a + b;
 }

 void ff(int a, int b, long f)
 {
  printf("%d + %d = %d\n", a, b, fptr(a, b, #attr(f, 1, 2)));//f有2个参数且有返回值
 /*
  * 因为f不是函数，所以只能用#attr命令临时修改f的属性，使其转换为函数。
  * 注意#attr的用法，参见帮助。
  *
  */
 }

 void main()
 {
  int a = 3, b = 7;

  SetScreen(1);
  ff(a, b, fun);
  getchar();
 }
*函数声明:
 被调用的函数必须出现在主调用函数的前面或被调用函数必须在主调用函数的前面声明。声明的作用是把函数的名字，函数类型以及形参信息通知编译系统，以便在调用该函数是系统对其进行合法性检查（如函数名是否正确，实参与形参个数是否一致）。
 函数声明的一般形式为:
 1.函数类型 函数名(参数类型1,参数类型2...);
 2.函数类型 函数名(参数类型1 参数名1,参数类型2 参数名2...);
 第1种形式是基本形式，为了便于阅读程序，也允许在函数声明中加上参数名，就成了第2种形式，但编译系统不检查参数名，因此参数名是什么都无所谓。如:long add(long,long);。应当保证函数声明与函数首部写法上一致，即函数类型、函数名、参数个数和参数顺序必须相同。注意函数声明一定要在函数外部声明（函数内部不能声明）。