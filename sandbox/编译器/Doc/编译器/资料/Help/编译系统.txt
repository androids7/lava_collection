       编  译系统
*简介:
 包括编译部分、优化部分和批处理部分。
*编译部分:
 编译部分是本软件最重要的组成部分，是将用户所写的源程序代码(*.txt)翻译成虚拟机可以运行的程序(*.lav)。
 编译部分支持用LavaX语言写的源程序。LavaX语言是一种特别适合于手持计算设备（包括掌上电脑、电子词典等）的跨平台高级语言。它基于C/C++语言的语法，并做了适当的改善，以适应LavaX语言跨平台、安全、易于掌握的特点。
 编译部分又可分为预处理器、编译器和连接器，其工作流程大体是这样的：源程序代码(*.txt)→中间代码(*.h)→目标代码(*.lav)，如果源程序代码中包含了头文件(*.h)则在生成中间代码中对头文件进行连接，如果源程序代码中包含了链接库文件(*.y)则在生成目标代码中对链接库文件进行连接。在任何源程序的编译中都会生成中间文件(*.h)，如果不需要保留这个文件可以到'设置'→'编译部分'→'编译后删除h文件？'中选择是。
*结构:
预处理器：LavaX语言的语法是基于C/C++语言的语法，源程序中的预处理命令不是C/C++语言本身的组成部分，不能直接对它们进行编译（因为编译器不识别它们），因此在对源程序编译之前都需要经过预处理（即根据预处理命令对源程序作相应的处理）才能交给编译器编译。源程序经过预处理器处理后生成中间代码，当然如果是中间代码的源程序是不需要预处理的。
 预处理器的主要工作是响应预处理命令。预处理器提供的预处理功能主要又以下三种：
 1.宏定义
 2.文件包含
 3.条件编译
 分别用宏定义命令、文件包含命令、条件编译命令来实现，具体使用方法请参考'帮助'→'语法'→'命令'。为了与一般的语句相区别，这些命令以符号"#"开头。
 除此之外，预处理器还对源程序的冗余信息（注释、多余的换行符、空格符）进行删除，检查大括号、中括号、小括号是否配对，一些转义字符的替换和执行预处理命令。
*注意：注释符不能嵌套使用。如：
 /*
 ......
  /*
  ......
  */
 ......
 */
 中的第三个省略号没有被注释掉（因为无法嵌套使用），就产生了错误。
编译器：编译器采用流水线的方式处理预处理好的文件。它可分为符号表管理器、词法分析器、语句分析器、语法分析器、错误报告器，各个系统又有错综复杂的联系。在编译器开始工作时，需要将系统函数的相关信息载入到内存中，需要载入什么机型的系统函数（不同的WQX支持不同的系统函数）可以到'设置'→'编译部分'→'选择加载的函数文件'中选择（函数文件以*.fun结尾）。编译成功则会出现编译成功画面并显示当前生成的文件名、大小、类型和所在目录，是否自动退出可以到'设置'→'编译部分'→'编译结束后自动退出?'中选择。
 1.符号表管理器:常数、变量、标号、函数、运算符、关键字、界符等统称为符号。在编译器工作过程中，需要为源程序中出现的符号建立表格。这些表格用以收集和存储这些符号的属性，如名称、类型、数据结构、存储位置及相应的值等。随着编译的各个阶段的推进，对这些符号的各登记项将不断地会有建立、定义、引用、更新等操作。可以说编译的不少时间是花在建表、查表和表的更新等操作上的。编译器中完成这些功能的一组程序便是符号表管理器。本管理器只为符号建立一个表（各种符号都放在一起），因此不能存在同名符号（局部变量不能与全局变量同名，自定义函数不能和系统函数重名），这点要切记。
 2.词法分析器:对源程序进行扫描，从中识别出符合此法规则的符号，将识别的符号用一种内部码来表示。如果在词法分析过程中发现不符词法规则的非法符号，则作词法出错处理。
 3.语句分析器:对各种控制语句（条件语句、循环语句、跳转语句）进行分析，记录转移点。转移点的相关信息记录在一个建立在内存中的表格，并随时写入相关信息。
 4.语法分析器:是以词法分析识别出的符号为基本单位，根据语法规则对符号串进行分析，识别它们是否正确构成各类语法单位，如短语、子句、句子、程序等。凡不符语法规则的作出错处理。
 5.错误报告器:能帮助用户迅速而准确地发现源程序中的各类错误，给出错误的相关信息，错误类型，出错的源程序位置以及简单的建议等。
 经过以上几个部分分析直接生成相应的目标代码(*.lav)，因此没有对源程序进行优化（优化需要较长的时间，这无法让人忍受），生成的文件一般要比电脑上编译器编译的大，但对程序的执行速度影响不大。如果对程序运行速度有相当要求的话可以采取以下优化措施或者使用'工具'→'优化'进行优化。
*优化:
 注意以下优化措施指针对LavaX语言，对于其他语言（如C/C++语言）可能不适用！
 优化的本质是让编译器生成的程序越短越好，但必须把握一个度，因为优化经常会使源程序很难看懂，出错了也不好检查。
 1.常数优化
  ①在含有常数的表达式中，将常数放在其他符号后面。
   如:a=5+b+c;
   优化为:a=b+5+c;或:a=b+c+5;
  ②常数之间的运算直接写结果。
   如:a=b+160/20;a=8+a-5;
   优化为:a=b+8;a=a+3;
 2.结合优化
  表达式能结合的结合起来。
  如:a=b;b++;c=0;d=0;
  优化为:a=b++;c=d=0;
  再如:Line(a+b,c+d,a+b,c+d+50,1);
  优化为:Line(e=a+b,f=c+d,e,f+50,1);
 3.运算优化
  ①能用加减法的地方尽量用加减法。
  ②用乘除法的地方尽量用位移实现。
   乘除法比其他运算慢很多，因此尽量不用。
   如:a=b/8;b=c*16;
   优化为:a=b>>3;b=c<<4;
  ③尽量用&或|替换&&或||（慎用！）。
 4.类型优化
  能用char型变量的地方尽量用char型变量，char型处理速度比int型或long型快。
 5.语句优化
  ①for语句可以优化为while语句。
   如:for(i=0;i<80;i++){~;}
   优化为i=0;while(i<80){~;i++;}
  ②尽量简化逻辑表达式。
   如:if(a==0)~;else if(b!=0)~;
   优化为:if(!a)~;else if(b)~;
  ③能不用if(~)~;else~;尽量不用它。
  ④尽量用for(;;){~;}代替while(1){~;}或do{~;}while(1)
   （注意如果是C/C++编程，应用while(1){~;}代替for(;;){~;}）。
 6.函数优化
  尽量使用系统提供的函数，但不要重复使用。
  如:for(i=0;i<strlen(s);i++){~;}
  优化为:len=strlen(s);i=0;while(i<len){~;i++;}
  因为函数strlen(s)被重复运行了strlen(s)次，这没必要。
 7.数组优化
  能不用数组的地方尽量不用数组，因为数组寻址和指针寻址本质相同，所花的时间比基础类型（char,int,long）的多。
 8.在文件头加#loadall可以加快程序的运行速度。
  但必须保证程序的长度加上程序所用内存不得超出机器最大内存（比如：TC800最大内存为24K）当然这不需要你去计算，编译器会自动计算的，超出预定值会发生编译错误。
 以上是手工优化的一些措施，现在编译器已经集成了优化系统，除了第5点语句优化外都可以交由优化系统优化。
*优化部分:
 由编译部分生成的代码是没有经过优化的，这对程序运行的速度有影响，因此在发布程序之前对程序进行优化是有必要的。优化程序可以提高程序的运行速度（当然，要大幅提高速度还是要靠算法实现的），并且可以检查编译部分无法检查出的错误，使得程序更加安全！
 要对代码进行优化，只需进入'工具'→'优化'，然后选择lav文件即可。
 优化部分对代码重新分析，建立表达式树，使用规约算法优化表达式树，所以优化部分只是优化表达式部分，而没有优化跳转部分。
*注意:
 1.优化部分支持优化LavaX3.5的代码（当然也支持1.0和3.0的了）。
 2.由于电脑上老的编译器生成的代码末尾有0xff，无法通过优化，可以用16进制编辑器去掉末尾0xff，然后就可以优化代码了。
 3.制作链接库的lav文件最好不要优化！
*批处理部分:
 对于一个工程来说，需要一个一个的去编译文件是非常麻烦的，而批处理部分解决了这个问题。批处理部分可以编译多个文件，链接生成多个链接库，优化多个程序等等。批处理命令保存在文本文件中，只需选择'文件'→'编译'→'批处理'，选择批处理命令文件即可。
 批处理部分支持以下命令：
 #lava 绝对路径
 该命令是将*.txt文本文件编译成*.lav程序文件，生成的文件保存在程序目录中。
 #head 绝对路径
 该命令是将*.txt文本文件编译成*.h文件，生成的文件保存在/FunData中。
 #link 绝对路径
 该命令是将*.lav程序文件编译成*.y链接库文件，生成的文件保存在/LibData中。
 #optimize 绝对路径
 该命令是优化*.lav程序文件，生成的文件保存在原目录中。
 #copy 绝对路径1 绝对路径2
 该命令是将绝对路径1的文件复制到绝对路径2中。
 #delete 绝对路径
 该命令是删除文件。
 举个例子:
 #head /文本文件/program.txt
 #lava /文本文件/program.txt
 #optimize /GVmaker/program.lav
 #delete /FunData/program.h
 #copy /GVmaker/program.lav /code/program.lav
 #copy /code/说明.txt /文本文件/说明.txt
 #copy /code/接口.txt /文本文件/接口.txt
 #link /GVmaker/mylink.lav
 等等。
*注意:
 如果批处理过程中出现错误，命令行会给出信息，前面的数字是指第几条命令。
 该系统请在电力充足下运行，以免造成数据错误。