#define DTIME 50*256/1000
#define swidth 144//屏幕的宽度
#define sheight 80//屏幕的高度
#define ESC 27//跳出键
#define KEY_Z 122
#define KEY_UP 20//定义方向键
#define KEY_DOWN 21//定义方向键
#define KEY_LEFT 23//定义方向键
#define KEY_RIGHT 22//定义方向键
#define basetimemax 180
#define pausetimemax 180
#define supertimemax 220
#define mspeed 4//游戏者的移动速度
#define egc 2
#define bc 4
#define showtimemax 80
#define showtimehalf 40
#define mapright 17
#define itemmaxtime 160
#define RCtimeMax 40
#define NRtimeMax 40
#define DtimeMax 40
int arrowsleep;
int mapmode=0;
int menuframe=0;
int RCtime;
int NRtime;
int Dtime;
int ec= 2;//敌人的总数
int hite;
int myroundmax;
int optionid=0;
int gunlevel=0;
int hitblockx[4];
int hitblocky[4];
int enemyshowx[3];
int enemyshowid=0;
int lastenemy;
int life;
int edied;
int Tx,Ty;
int Round;
int BV;
int xun;//程序需要的循环变量
int xun1;
int arrowkey;//定义方向
int key;//定义其它键盘的操作
int key1;
int level;
int delaytime;

///宝物的变量
int basetime;
int pausetime;
int supertime;
///宝物的变量


char base[]={0x00, 0x00,0x00, 0x00, 0x03, 0x80, 0x05, 0x40, 0x02, 0x40, 0x02, 0x40, 0xFC, 0x3F, 0x52, 0x4A, 0x29, 0x94, 0x14, 0x28, 0x08, 0x50, 0x02, 0x40, 0x02, 0x40, 0x05, 0x60, 0x0A, 0xB0, 0x00, 0x00};
//宝物的变量
int itemx;
int itemy;
int itemtime;
int itemstyle;
int itemstate;


char WAWA[200]={255,255,255,255,224,128,0,0,0,32,128,0,0,0,32,128,0,120,0,32,130,56,132,0,32,146,69,2,0,32,136,154,193,0,32,132,154,193,0,32,176,130,1,0,32,136,70,1,0,32,128,185,2,0,32,129,0,132,0,32,130,124,122,0,32,131,255,1,0,32,131,1,200,128,32,132,0,124,64,32,132,0,4,64,32,132,0,8,32,32,132,0,0,32,32,132,0,0,16,32,132,0,0,16,32,132,0,0,8,32,132,0,0,8,32,130,0,0,196,32,130,0,1,36,32,129,0,1,4,32,128,128,1,188,32,128,64,7,152,32,128,255,255,8,32,142,255,251,252,32,191,247,255,255,32,135,207,255,248,160,184,55,255,7,32,135,200,0,248,32,128,15,255,0,32,128,0,0,0,32,128,0,0,0,32,128,0,0,0,32,128,0,0,0,32,255,255,255,255,224};
//宝物的变量
char menu[]={
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
0xFF, 0xFF, 0xFF, 0xFF, 
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
0xFF, 0xFF, 0xFF, 0xFF, 
0xF0, 0x3F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xFF, 0xFF, 0xFF, 
0xFF, 0xFF, 0xFF, 0x8F, 
0xEF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xF7, 0xFF, 0xFF, 0xFF, 
0xFF, 0xFF, 0xFF, 0xF7, 
0xF9, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x5F, 0xFF, 0xFF, 0xFF, 0xFF, 0xD7, 0xFF, 0xFF, 0xFF, 
0xFF, 0xFF, 0xFF, 0x9B, 
0xD7, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x7F, 0xC1, 0xDE, 0xF6, 0xEF, 0xF7, 0xFF, 0xFF, 0xFF, 
0xFF, 0xFF, 0xFF, 0xEB, 
0xDF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x7F, 0xF7, 0xAE, 0xF6, 0xDF, 0xF7, 0xFF, 0xFF, 0xFF, 
0xFF, 0xFF, 0xFF, 0xFB, 
0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x7F, 0xF7, 0xAE, 0x76, 0xBF, 0xF4, 0x00, 0x60, 0x00, 
0x00, 0x18, 0x00, 0xFF, 
0xDE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x7F, 0xF7, 0xAE, 0xB6, 0x7F, 0xF4, 0x00, 0x60, 0x00, 
0x00, 0x18, 0x00, 0x7B, 
0xDE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x7F, 0xF7, 0x76, 0xD6, 0x7F, 0xF4, 0x00, 0x60, 0x00, 
0x00, 0x18, 0x00, 0x7B, 
0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x7F, 0xF7, 0x06, 0xE6, 0xBF, 0xF4, 0x00, 0xF0, 0x00, 
0x00, 0x18, 0x00, 0x7B, 
0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x7F, 0xF7, 0x76, 0xF6, 0xDF, 0xF4, 0x00, 0xB0, 0x00, 
0xFF, 0xF8, 0x00, 0x7B, 
0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x7F, 0xF6, 0xFA, 0xF6, 0xEF, 0xF4, 0x00, 0xB0, 0x00, 
0xFF, 0xF8, 0x00, 0x7B, 
0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x5F, 0xFF, 0xFF, 0xFF, 0xFF, 0xD4, 0x00, 0xF0, 0x00, 
0xC0, 0x00, 0x00, 0x7F, 
0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xF4, 0x00, 0xF0, 0x01, 
0xE0, 0x00, 0x00, 0x7F, 
0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x01, 0xF8, 0x01, 
0xE0, 0x00, 0x00, 0x7F, 
0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0x00, 0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFC, 0x01, 0x38, 0x03, 
0xF0, 0x00, 0x00, 0x7F, 
0xFE, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x78, 0x03, 
0x70, 0x00, 0x00, 0x7F, 
0xFE, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x78, 0x03, 
0x70, 0x00, 0x00, 0x7F, 
0xFE, 0x00, 0x00, 0x00, 0x1B, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xF8, 0x03, 
0xF0, 0x00, 0x00, 0x7F, 
0xFE, 0x00, 0x00, 0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
0xFF, 0xFF, 0x00, 0x7F, 
0xFE, 0x00, 0x00, 0x01, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
0xFF, 0xFA, 0x80, 0x7F, 
0xFE, 0x00, 0x00, 0x01, 0xBF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
0xFF, 0xF6, 0x80, 0x7F, 
0xFE, 0x00, 0x00, 0x01, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x0E, 0x80, 0x7F, 
0xFE, 0x00, 0x00, 0x01, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x0E, 0x80, 0x7F, 
0xFE, 0x00, 0x00, 0x01, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x0E, 0x80, 0x7F, 
0xFE, 0x00, 0x00, 0xFF, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x0E, 0x80, 0x7F, 
0xFF, 0xFF, 0xFF, 0xFF, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x0E, 0x80, 0x7F, 
0xFF, 0xFF, 0xFF, 0xCF, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x0E, 0x80, 0x7F, 
0xFE, 0x00, 0x00, 0xFF, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x0E, 0x80, 0x7F, 
0xFE, 0x00, 0x00, 0xFF, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x0E, 0x80, 0x7F, 
0xFE, 0x00, 0x00, 0x01, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x0E, 0x80, 0x7F, 
0xFE, 0x00, 0x00, 0x01, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x0E, 0xF8, 0x7F, 
0xFE, 0x00, 0x00, 0x01, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x0E, 0x9F, 0xFF, 
0xFE, 0x00, 0x00, 0x01, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x0E, 0xFF, 0xFF, 
0xFE, 0x00, 0x00, 0x01, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x0E, 0xF8, 0x7F, 
0xFE, 0x00, 0x00, 0x01, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x0E, 0x80, 0x7F, 
0xFE, 0x00, 0x00, 0x01, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x0E, 0x80, 0x7F, 
0xFF, 0xFF, 0x00, 0x01, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x0E, 0x80, 0x7F, 
0xFF, 0xFF, 0x00, 0x3F, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x0E, 0x80, 0x7F, 
0xFE, 0x03, 0xFF, 0xE3, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x0E, 0x80, 0x7F, 
0xFE, 0x03, 0xFF, 0xFF, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x0E, 0x80, 0x7F, 
0xFE, 0x03, 0x00, 0x3F, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x0E, 0xF8, 0x7F, 
0xFE, 0x03, 0x00, 0x01, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x0E, 0x9F, 0xFF, 
0xFE, 0x03, 0x00, 0x01, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x0E, 0xFF, 0xFF, 
0xFE, 0x03, 0x00, 0x01, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x0E, 0xF8, 0x7F, 
0xFE, 0x03, 0x00, 0x01, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x0E, 0x80, 0x7F, 
0xFE, 0x03, 0x00, 0x7F, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x0E, 0x80, 0x7F, 
0xFE, 0x03, 0x03, 0xC3, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x0E, 0x80, 0x7F, 
0xFE, 0x03, 0x02, 0x7F, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x0E, 0x80, 0x7F, 
0xFE, 0x03, 0x03, 0xFF, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x0E, 0x80, 0x7F, 
0xFE, 0x03, 0xFF, 0xC3, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x0E, 0xF8, 0x7F, 
0xFE, 0x03, 0xFF, 0xFF, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x0E, 0x9F, 0xFF, 
0xFE, 0x00, 0x03, 0xFF, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x0E, 0xFF, 0xFF, 
0xFE, 0x00, 0x00, 0x7F, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x0E, 0xF8, 0x7F, 
0xFE, 0x00, 0x00, 0x01, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x0E, 0x80, 0x7F, 
0xFE, 0x00, 0x00, 0x01, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x0E, 0x80, 0x7F, 
0xFE, 0x00, 0x00, 0x01, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x0E, 0x80, 0x7F, 
0xFE, 0x00, 0x00, 0x01, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x0E, 0x80, 0x7F, 
0xFE, 0x00, 0x00, 0x01, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x0E, 0x80, 0x7F, 
0xFE, 0x00, 0x00, 0x01, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x0E, 0xF8, 0x7F, 
0xFE, 0x00, 0x00, 0x0F, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x0E, 0x9F, 0xFF, 
0xFE, 0x00, 0x00, 0x1F, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x0E, 0xFF, 0xFF, 
0xFE, 0x00, 0x00, 0xF9, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x0E, 0xF8, 0x7F, 
0xFF, 0xFF, 0xFF, 0x9F, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x0E, 0x80, 0x7F, 
0xFF, 0xFF, 0xFF, 0xFF, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x0E, 0x80, 0x7F, 
0xFE, 0x00, 0x00, 0xFF, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x0E, 0x80, 0x7F, 
0xFE, 0x00, 0x00, 0x1F, 0xBF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
0xFF, 0xF6, 0x80, 0x7F, 
0xFE, 0x00, 0x00, 0x0F, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
0xFF, 0xFA, 0x80, 0x7F, 
0xFE, 0x00, 0x00, 0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
0xFF, 0xFE, 0x80, 0x7F, 
0xFE, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x01, 0x80, 0x7F, 
0xFE, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
0xFF, 0xFF, 0x00, 0x7F, 
0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x7F, 
0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x7F, 
0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x7B, 
0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x7B, 
0xDF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x7F, 
0xDF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
0xFF, 0xFF, 0xFF, 0xFB, 
0xD7, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
0xFF, 0xFF, 0xFF, 0xEB, 
0xD9, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
0xFF, 0xFF, 0xFF, 0x9B, 
0xEF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
0xFF, 0xFF, 0xFF, 0xF7, 
0xF0, 0x1F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
0xFF, 0xFF, 0xFF, 0x0F
};
char pause[]={
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x3F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 
0x5F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFA, 
0x6F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF6, 
0x77, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xEE, 
0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1E, 
0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1E, 
0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1E, 
0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1E, 
0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0x01, 0x80, 0x00, 0xA4, 0x08, 0x40, 0x1E, 
0x78, 0x7C, 0x18, 0x66, 0x3C, 0x7E, 0x0E, 0x42, 0x80, 0x40, 0x71, 0x35, 0x0B, 0xF0, 0x1E, 
0x78, 0x66, 0x3C, 0x66, 0x66, 0x60, 0x08, 0xF4, 0x40, 0x40, 0x11, 0x2D, 0x10, 0x40, 0x1E, 
0x78, 0x66, 0x66, 0x66, 0x60, 0x60, 0x08, 0x4B, 0xA0, 0x40, 0x12, 0x66, 0x27, 0xF8, 0x1E, 
0x78, 0x66, 0x66, 0x66, 0x30, 0x60, 0x08, 0xA0, 0x00, 0xA0, 0x13, 0xBF, 0xBD, 0x48, 0x1E, 
0x78, 0x7C, 0x66, 0x66, 0x18, 0x7C, 0x08, 0xFE, 0xA0, 0xA0, 0x11, 0x24, 0x08, 0xC0, 0x1E, 
0x78, 0x60, 0x7E, 0x66, 0x0C, 0x60, 0x08, 0x2A, 0xA1, 0x10, 0x12, 0xE6, 0x11, 0x40, 0x1E, 
0x78, 0x60, 0x66, 0x66, 0x06, 0x60, 0x08, 0x3E, 0xA1, 0x10, 0x13, 0x2D, 0x3B, 0xF8, 0x1E, 
0x78, 0x60, 0x66, 0x66, 0x66, 0x60, 0x08, 0xEA, 0xA2, 0x08, 0x10, 0x75, 0x00, 0x40, 0x1E, 
0x78, 0x60, 0x66, 0x3C, 0x3C, 0x7E, 0x08, 0x2E, 0x24, 0x04, 0x13, 0xA4, 0x3C, 0xA0, 0x1E, 
0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0E, 0x2A, 0x68, 0x02, 0x72, 0x3F, 0x83, 0x10, 0x1E, 
0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1E, 
0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1E, 
0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1E, 
0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1E, 
0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1E, 
0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1E, 
0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1E, 
0x77, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xEE, 
0x6F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF6, 
0x5F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFA, 
0x3F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFC, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
char loading[]={0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x3F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 
0x5F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFA, 
0x6F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF6, 
0x77, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xEE, 
0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1E, 
0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1E, 
0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1E, 
0x78, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x36, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1E, 
0x78, 0x00, 0x00, 0x00, 0x03, 0x0E, 0x39, 0xF0, 0xFB, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x1E, 
0x78, 0x00, 0x00, 0x00, 0x03, 0x1B, 0x6D, 0xB6, 0xDB, 0x60, 0x00, 0x00, 0x00, 0x00, 0x1E, 
0x78, 0x00, 0x00, 0x00, 0x03, 0x1B, 0x6D, 0xB6, 0xDB, 0x60, 0x00, 0x00, 0x00, 0x00, 0x1E, 
0x78, 0x00, 0x00, 0x00, 0x03, 0x1B, 0x1D, 0xB6, 0xDB, 0x60, 0x00, 0x00, 0x00, 0x00, 0x1E, 
0x78, 0x00, 0x00, 0x00, 0x03, 0x1B, 0x6D, 0xB6, 0xDB, 0x60, 0x00, 0x00, 0x00, 0x00, 0x1E, 
0x78, 0x00, 0x00, 0x00, 0x03, 0x1B, 0x6D, 0xB6, 0xDB, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x1E, 
0x78, 0x00, 0x00, 0x00, 0x03, 0x1B, 0x6D, 0xB6, 0xD8, 0x63, 0x33, 0x00, 0x00, 0x00, 0x1E, 
0x78, 0x00, 0x00, 0x00, 0x03, 0xCE, 0x7D, 0xF6, 0xDB, 0x63, 0x33, 0x00, 0x00, 0x00, 0x1E, 
0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x1E, 
0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1E, 
0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1E, 
0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1E, 
0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1E, 
0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1E, 
0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1E, 
0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1E, 
0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1E, 
0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1E, 
0x77, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xEE, 
0x6F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF6, 
0x5F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFA, 
0x3F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFC, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
char bomman[]={
0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 
0x7F, 0x7F, 0x7F, 0x7E, 
0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 
0x7F, 0x7F, 0x7F, 0x7E, 
0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 
0x7F, 0x7F, 0x7F, 0x7E, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 
0xF7, 0xF7, 0xF7, 0xF7, 0xF7, 0xF7, 0xF7, 0xF7, 0xF7, 0xF7, 0xF7, 0xF7, 0xF7, 0xF7, 0xF7, 0xF7, 
0xF7, 0xF7, 0xF7, 0xF6, 
0xF7, 0xF7, 0xF7, 0xF7, 0xF7, 0xF7, 0xF7, 0xF7, 0xF7, 0xF7, 0xF7, 0xF7, 0xF7, 0xF7, 0xF7, 0xF7, 
0xF7, 0xF7, 0xF7, 0xF6, 
0xF7, 0xF7, 0xF7, 0xF7, 0xF7, 0xF7, 0xF7, 0xF7, 0xF7, 0xF7, 0xF7, 0xF7, 0xF7, 0xF7, 0xF7, 0xF7, 
0xF7, 0xF7, 0xF7, 0xF6, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 
0x7E, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFC, 0x00, 0x00, 0x00, 0x00, 0xFD, 0x02, 0x00, 
0xFC, 0x00, 0xFD, 0x7E, 
0x7E, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x06, 0x00, 0x00, 0x00, 0x01, 0x06, 0xB4, 0x01, 
0x06, 0x01, 0x07, 0x7E, 
0x7E, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x3E, 0x00, 0x00, 0x00, 0x01, 0x76, 0xFC, 0x01, 
0x76, 0x01, 0x77, 0x7E, 
0x00, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x3E, 0x00, 0x00, 0x00, 0x01, 0x47, 0xFE, 0x01, 
0x46, 0x01, 0x46, 0x00, 
0xF7, 0x32, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x3E, 0x00, 0x00, 0x00, 0x01, 0x47, 0x32, 0x01, 
0x46, 0x01, 0x47, 0xF6, 
0xF6, 0x48, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xFE, 0x00, 0x00, 0x00, 0x01, 0x0F, 0xFE, 0x01, 
0x0E, 0x01, 0x0F, 0xF6, 
0xF6, 0x48, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xFE, 0x00, 0x00, 0x00, 0x01, 0xFF, 0x7A, 0x01, 
0xFE, 0x01, 0xFF, 0xF6, 
0x00, 0x48, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFC, 0x00, 0x00, 0x00, 0x00, 0xFC, 0x84, 0x00, 
0xFC, 0x00, 0xFC, 0x00, 
0x7E, 0x00, 0xFC, 0x78, 0x78, 0x78, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0x78, 0xFC, 
0xFC, 0x00, 0xFD, 0x7E, 
0x7E, 0x01, 0x06, 0xFC, 0xFC, 0xFD, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x06, 0xFD, 0x07, 
0x06, 0x01, 0x07, 0x7E, 
0x7E, 0x01, 0x77, 0xC7, 0xC7, 0xC7, 0x77, 0x77, 0x3F, 0x77, 0x77, 0x77, 0x77, 0x77, 0xC7, 0x77, 
0x76, 0x01, 0x77, 0x7E, 
0x00, 0x01, 0x47, 0xAF, 0xAF, 0xAF, 0x47, 0x47, 0x3F, 0x47, 0x47, 0x47, 0x47, 0x47, 0xAF, 0x47, 
0x46, 0x01, 0x46, 0x00, 
0xF6, 0x01, 0x47, 0xD7, 0xD7, 0xD7, 0x47, 0x47, 0x3F, 0x47, 0x47, 0x47, 0x47, 0x47, 0xD7, 0x47, 
0x46, 0x01, 0x47, 0xF6, 
0xF6, 0x01, 0x0F, 0xFF, 0xFF, 0xFF, 0x0F, 0x0F, 0xFF, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0xFF, 0x0F, 
0x0E, 0x01, 0x0F, 0xF6, 
0xF6, 0x01, 0xFE, 0xFC, 0xFC, 0xFD, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0xFD, 0xFF, 
0xFE, 0x01, 0xFF, 0xF6, 
0x00, 0x00, 0xFC, 0x00, 0x00, 0x00, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0x00, 0xFC, 
0xFC, 0x00, 0xFC, 0x00, 
0x7E, 0xFC, 0x00, 0x00, 0x00, 0x00, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0x00, 0x00, 0x00, 0x78, 0x00, 
0xFC, 0x00, 0xFD, 0x7E, 
0x7F, 0x06, 0x00, 0x00, 0x00, 0x01, 0x07, 0x07, 0x07, 0x07, 0x06, 0x00, 0x00, 0x00, 0xFC, 0x01, 
0x06, 0x01, 0x07, 0x7E, 
0x7F, 0x76, 0x00, 0x00, 0x00, 0x01, 0x3F, 0x3F, 0x3F, 0x3F, 0x3E, 0x00, 0x00, 0x01, 0xC6, 0x01, 
0x76, 0x01, 0x77, 0x7E, 
0x01, 0x46, 0x00, 0x00, 0x00, 0x01, 0x3F, 0x3F, 0x3F, 0x3F, 0x3E, 0x00, 0x00, 0x01, 0xAE, 0x01, 
0x46, 0x01, 0x46, 0x00, 
0xF7, 0x46, 0x00, 0x00, 0x00, 0x01, 0x3F, 0x3F, 0x3F, 0x3F, 0x3E, 0x00, 0x00, 0x01, 0xD6, 0x01, 
0x46, 0x01, 0x47, 0xF6, 
0xF7, 0x0E, 0x00, 0x00, 0x00, 0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0x00, 0x00, 0x01, 0xFE, 0x01, 
0x0E, 0x01, 0x0F, 0xF6, 
0xF7, 0xFE, 0x00, 0x00, 0x00, 0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0x00, 0x00, 0x00, 0xFC, 0x01, 
0xFE, 0x01, 0xFF, 0xF6, 
0x00, 0xFC, 0x00, 0x00, 0x00, 0x00, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 
0xFC, 0x00, 0xFC, 0x00, 
0x7E, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0x78, 0x00, 
0xFC, 0x00, 0xFD, 0x7E, 
0x7F, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x06, 0xFC, 0x01, 
0x06, 0x01, 0x07, 0x7E, 
0x7F, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0xC6, 0x01, 
0x76, 0x01, 0x77, 0x7E, 
0x01, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0xAE, 0x01, 
0x46, 0x01, 0x46, 0x00, 
0xF7, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0xD6, 0x01, 
0x46, 0x01, 0x47, 0xF6, 
0xF7, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0xFE, 0x01, 
0x0E, 0x01, 0x0F, 0xF6, 
0xF7, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0xFC, 0x01, 
0xFF, 0x03, 0xFF, 0xF6, 
0x00, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0x00, 0x00, 
0xFC, 0xB4, 0xFC, 0x00, 
0x7E, 0xFC, 0xFC, 0xFC, 0x00, 0x00, 0x00, 0x00, 0xFC, 0x00, 0x00, 0x20, 0x40, 0xFC, 0x78, 0x00, 
0xFC, 0xFC, 0xFD, 0x7E, 
0x7F, 0x07, 0x07, 0x06, 0x00, 0x00, 0x00, 0x01, 0x06, 0x00, 0x00, 0x16, 0x81, 0x06, 0xFC, 0x01, 
0x07, 0xFF, 0x07, 0x7E, 
0x7F, 0x77, 0x77, 0x76, 0x01, 0x02, 0x00, 0x01, 0x76, 0x00, 0x00, 0x1F, 0x81, 0x77, 0xC6, 0x01, 
0x77, 0x33, 0x77, 0x7E, 
0x01, 0x47, 0x47, 0x46, 0x00, 0xB4, 0x00, 0x01, 0x46, 0x00, 0x00, 0x3F, 0xC1, 0x47, 0xAE, 0x01, 
0x47, 0xFF, 0x46, 0x00, 
0xF7, 0x47, 0x47, 0x46, 0x00, 0xFC, 0x00, 0x01, 0x46, 0x00, 0x00, 0x26, 0x41, 0x47, 0xD6, 0x01, 
0x47, 0x7B, 0x47, 0xF6, 
0xF7, 0x0F, 0x0F, 0x0E, 0x01, 0xFE, 0x00, 0x01, 0x0E, 0x00, 0x00, 0x3F, 0xC1, 0x0F, 0xFE, 0x01, 
0x0E, 0x85, 0x0F, 0xF6, 
0xF7, 0xFF, 0xFF, 0xFE, 0x01, 0x32, 0x00, 0x01, 0xFE, 0x00, 0x00, 0x2F, 0x41, 0xFE, 0xFC, 0x01, 
0xFE, 0x01, 0xFF, 0xF6, 
0x00, 0xFC, 0xFC, 0xFC, 0x01, 0xFE, 0x00, 0x00, 0xFC, 0x00, 0x00, 0x10, 0x80, 0xFC, 0x00, 0x00, 
0xFC, 0x00, 0xFC, 0x00, 
0x7E, 0x00, 0xFC, 0x00, 0xFD, 0x7A, 0x78, 0xFC, 0x00, 0x78, 0x78, 0x00, 0xFC, 0xFC, 0x78, 0x00, 
0xFC, 0x00, 0xFD, 0x7E, 
0x7E, 0x01, 0x06, 0x01, 0x06, 0x84, 0xFD, 0x06, 0x00, 0xFC, 0xFC, 0x01, 0x07, 0x06, 0xFC, 0x01, 
0x06, 0x01, 0x07, 0x7E, 
0x7E, 0x01, 0x76, 0x01, 0x76, 0x01, 0xC7, 0x76, 0x01, 0xC7, 0xC6, 0x01, 0x77, 0x77, 0xC6, 0x01, 
0x76, 0x01, 0x77, 0x7E, 
0x00, 0x01, 0x46, 0x01, 0x46, 0x01, 0xAF, 0x46, 0x01, 0xAF, 0xAE, 0x01, 0x47, 0x47, 0xAE, 0x01, 
0x46, 0x01, 0x46, 0x00, 
0xF6, 0x01, 0x46, 0x01, 0x46, 0x01, 0xD7, 0x46, 0x01, 0xD7, 0xD6, 0x01, 0x47, 0x47, 0xD6, 0x01, 
0x46, 0x01, 0x47, 0xF6, 
0xF6, 0x01, 0x0E, 0x01, 0x0E, 0x01, 0xFF, 0x0E, 0x01, 0xFF, 0xFE, 0x01, 0x0F, 0x0F, 0xFE, 0x01, 
0x0E, 0x01, 0x0F, 0xF6, 
0xF6, 0x79, 0xFE, 0x01, 0xFE, 0x00, 0xFD, 0xFE, 0x00, 0xFC, 0xFC, 0x01, 0xFF, 0xFE, 0xFC, 0x01, 
0xFE, 0x01, 0xFF, 0xF6, 
0x00, 0xFC, 0xFC, 0x00, 0xFC, 0x00, 0x00, 0xFC, 0x00, 0x00, 0x00, 0x00, 0xFC, 0xFC, 0x00, 0x00, 
0xFC, 0x00, 0xFC, 0x00, 
0x7F, 0xB6, 0xFC, 0x00, 0xFC, 0x00, 0x78, 0xFC, 0x00, 0x78, 0x78, 0x00, 0xFC, 0xFC, 0x78, 0xFC, 
0xFC, 0x00, 0xFD, 0x7E, 
0x7F, 0xB7, 0x06, 0x01, 0x06, 0x00, 0xFD, 0x06, 0x00, 0xFC, 0xFC, 0x01, 0x07, 0x06, 0xFD, 0x07, 
0x06, 0x01, 0x07, 0x7E, 
0x7F, 0xFF, 0x76, 0x01, 0x76, 0x01, 0xC7, 0x76, 0x01, 0xC7, 0xC6, 0x01, 0x77, 0x77, 0xC7, 0x77, 
0x76, 0x01, 0x77, 0x7E, 
0x00, 0x01, 0x46, 0x01, 0x46, 0x01, 0xAF, 0x46, 0x01, 0xAF, 0xAE, 0x01, 0x47, 0x47, 0xAF, 0x47, 
0x46, 0x01, 0x46, 0x00, 
0xF6, 0xC5, 0x46, 0x01, 0x46, 0x01, 0xD7, 0x46, 0x01, 0xD7, 0xD6, 0x01, 0x47, 0x47, 0xD7, 0x47, 
0x46, 0x01, 0x47, 0xF6, 
0xF6, 0x6D, 0x0E, 0x01, 0x0E, 0x01, 0xFF, 0x0E, 0x01, 0xFF, 0xFE, 0x01, 0x0F, 0x0F, 0xFF, 0x0F, 
0x0E, 0x01, 0x0F, 0xF6, 
0xF6, 0x01, 0xFE, 0x01, 0xFE, 0x00, 0xFD, 0xFE, 0x00, 0xFC, 0xFC, 0x01, 0xFF, 0xFE, 0xFD, 0xFF, 
0xFE, 0x01, 0xFF, 0xF6, 
0x00, 0x00, 0xFC, 0x00, 0xFC, 0x00, 0x00, 0xFC, 0x00, 0x00, 0x00, 0x00, 0xFC, 0xFC, 0x00, 0xFC, 
0xFC, 0x00, 0xFC, 0x00, 
0x7E, 0x00, 0xFC, 0x00, 0x00, 0x00, 0x78, 0xFC, 0x00, 0x78, 0x78, 0x00, 0x00, 0x00, 0x00, 0xFC, 
0xFC, 0x00, 0xFD, 0x7E, 
0x7E, 0x01, 0x06, 0x00, 0x00, 0x00, 0xFD, 0x06, 0x00, 0xFC, 0xFC, 0x00, 0x00, 0x00, 0x01, 0x07, 
0x06, 0x01, 0x07, 0x7E, 
0x7E, 0x01, 0x76, 0x00, 0x00, 0x01, 0xC7, 0x76, 0x01, 0xC7, 0xC6, 0x00, 0x00, 0x00, 0x01, 0x77, 
0x76, 0x01, 0x77, 0x7E, 
0x00, 0x01, 0x46, 0x00, 0x00, 0x01, 0xAF, 0x46, 0x01, 0xAF, 0xAE, 0x00, 0x00, 0x00, 0x01, 0x47, 
0x46, 0x01, 0x46, 0x00, 
0xF6, 0x01, 0x46, 0x00, 0x00, 0x01, 0xD7, 0x46, 0x01, 0xD7, 0xD6, 0x00, 0x00, 0x00, 0x01, 0x47, 
0x46, 0x01, 0x47, 0xF6, 
0xF6, 0x01, 0x0E, 0x00, 0x00, 0x01, 0xFF, 0x0E, 0x01, 0xFF, 0xFE, 0x00, 0x00, 0x00, 0x01, 0x0F, 
0x0E, 0x01, 0x0F, 0xF6, 
0xF6, 0x01, 0xFE, 0x00, 0x00, 0x00, 0xFD, 0xFE, 0x00, 0xFC, 0xFC, 0x00, 0x00, 0x00, 0x01, 0xFF, 
0xFE, 0x01, 0xFF, 0xF6, 
0x00, 0x00, 0xFC, 0x00, 0x00, 0x00, 0x00, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFC, 
0xFC, 0x00, 0xFC, 0x00, 
0x7E, 0x00, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0x00, 0x78, 0x78, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 
0xFC, 0x00, 0xFD, 0x7E, 
0x7E, 0x01, 0x07, 0x07, 0x07, 0x07, 0x07, 0x06, 0x00, 0xFC, 0xFD, 0x07, 0x07, 0x07, 0x07, 0x07, 
0x06, 0x01, 0x07, 0x7E, 
0x7E, 0x01, 0x77, 0x77, 0x77, 0x77, 0x77, 0x76, 0x01, 0xC7, 0xC7, 0x77, 0x77, 0x77, 0x77, 0x77, 
0x76, 0x01, 0x77, 0x7E, 
0x00, 0x01, 0x47, 0x47, 0x47, 0x47, 0x47, 0x46, 0x01, 0xAF, 0xAF, 0x47, 0x47, 0x47, 0x47, 0x47, 
0x46, 0x01, 0x46, 0x00, 
0xF6, 0x01, 0x47, 0x47, 0x47, 0x47, 0x47, 0x46, 0x01, 0xD7, 0xD7, 0x47, 0x47, 0x47, 0x47, 0x47, 
0x46, 0x01, 0x47, 0xF6, 
0xF6, 0x01, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0E, 0x01, 0xFF, 0xFF, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 
0x0E, 0x01, 0x0F, 0xF6, 
0xF6, 0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0x00, 0xFC, 0xFD, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
0xFE, 0x01, 0xFF, 0xF6, 
0x00, 0x00, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0x00, 0x00, 0x00, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 
0xFC, 0x00, 0xFC, 0x00
};


char title[]={
0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3E, 0x07, 0x87, 0x80, 0x00, 0x00, 0x18, 
0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x03, 0x38, 0x00, 0x00, 0x00, 0x01, 0xC1, 0xDC, 0x68, 0x40, 0x00, 0x1F, 0xE7, 
0xC3, 0xC0, 0x00, 0x00, 
0x40, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x20, 0x00, 0x60, 0x00, 
0x3C, 0x30, 0x00, 0x00, 
0x80, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x20, 0x00, 0x80, 0x00, 
0x00, 0x10, 0x00, 0x00, 
0x80, 0x01, 0x00, 0x04, 0x01, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x40, 0x40, 0x00, 0x80, 0x00, 
0x00, 0x08, 0x00, 0x00, 
0x80, 0x03, 0x00, 0x04, 0x06, 0x00, 0x00, 0x00, 0x02, 0x01, 0x00, 0x41, 0x80, 0x00, 0x60, 0x00, 
0x40, 0x08, 0x00, 0x00, 
0x60, 0x06, 0x00, 0x0F, 0x38, 0x00, 0x00, 0x00, 0x01, 0xC3, 0xC0, 0xC4, 0x00, 0x00, 0x1F, 0xC0, 
0xC0, 0x10, 0x00, 0x00, 
0x1E, 0x0F, 0x00, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3E, 0x63, 0xF8, 0x00, 0x00, 0x00, 0x61, 
0x80, 0x70, 0x00, 0x00, 
0x01, 0xF3, 0x87, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1C, 0x00, 0x00, 0x00, 0x00, 0x1F, 
0xCD, 0x80, 0x00, 0x00, 
0x00, 0x00, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x30, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xC0, 0x07, 0x01, 
0x1F, 0x01, 0x0C, 0x0C, 
0x01, 0xF0, 0x01, 0xC0, 0x47, 0xC0, 0x43, 0x03, 0x27, 0xC0, 0x67, 0xC0, 0x1C, 0x30, 0x1C, 0x07, 
0xFC, 0x07, 0x7F, 0x7C, 
0x07, 0x0C, 0x07, 0x01, 0xFF, 0x01, 0xDF, 0xDF, 0xFF, 0x01, 0xFF, 0x00, 0x30, 0x0C, 0x30, 0x0F, 
0xF0, 0x0F, 0xFF, 0xFC, 
0x0C, 0x03, 0x0C, 0x03, 0xFC, 0x03, 0xFF, 0xFF, 0xFC, 0x03, 0xFC, 0x02, 0x60, 0x02, 0x60, 0x01, 
0xE0, 0x01, 0xAA, 0xA8, 
0x18, 0x00, 0x98, 0x00, 0x78, 0x00, 0x6A, 0xAA, 0xB8, 0x00, 0x78, 0x00, 0xC6, 0x72, 0x46, 0x71, 
0xC6, 0x71, 0x55, 0x54, 
0x31, 0x9C, 0x91, 0x9C, 0x71, 0x9C, 0x55, 0x55, 0x71, 0x9C, 0x71, 0x9C, 0xC6, 0x03, 0xC6, 0x01, 
0xC6, 0x01, 0x2A, 0x28, 
0x31, 0x80, 0xF1, 0x80, 0x71, 0x80, 0x4A, 0x8A, 0xB1, 0x80, 0x71, 0x80, 0x86, 0x01, 0x86, 0x01, 
0x86, 0x01, 0x00, 0x00, 
0x21, 0x80, 0x61, 0x80, 0x61, 0x80, 0x40, 0x00, 0x21, 0x80, 0x61, 0x80, 0x86, 0x01, 0x86, 0x01, 
0x86, 0x01, 0x00, 0x00, 
0x21, 0x80, 0x61, 0x80, 0x61, 0x80, 0x40, 0x00, 0x21, 0x80, 0x61, 0x80, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0xF0, 0x70, 0x38, 
0x71, 0xC1, 0xC0, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0xF0, 0x70, 0x3C, 
0x71, 0xC3, 0x80, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0xF8, 0x3C, 
0x71, 0xC7, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0xF8, 0x3E, 
0x71, 0xCE, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x01, 0xFF, 0xFF, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x01, 0xDC, 0x3F, 
0x71, 0xDC, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x07, 0xFF, 0xFF, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x01, 0xDC, 0x3F, 
0x71, 0xFE, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x0F, 0xF0, 0x07, 0x03, 0xDE, 0x3B, 
0xF1, 0xFE, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x17, 0xFF, 0x7F, 0xEF, 0xFF, 0xFF, 0xFF, 0xFF, 0xB0, 0x07, 0x03, 0x8E, 0x3B, 
0xF1, 0xC7, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x17, 0xFF, 0x7F, 0xE8, 0x00, 0x00, 0x00, 0x1C, 0x30, 0x07, 0x03, 0xFE, 0x39, 
0xF1, 0xC3, 0x80, 0x00, 
0x00, 0x00, 0x00, 0x17, 0xFF, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFC, 0x30, 0x07, 0x07, 0xFF, 0x38, 
0xF1, 0xC3, 0x80, 0x00, 
0x00, 0x00, 0x00, 0x17, 0xFF, 0x70, 0x07, 0xFF, 0xFF, 0xFF, 0xFF, 0xB0, 0x07, 0x07, 0x07, 0x38, 
0xF1, 0xC1, 0xC0, 0x00, 
0x00, 0x00, 0x02, 0x17, 0xFF, 0x7F, 0xE4, 0x00, 0x00, 0x00, 0x0F, 0xF0, 0x07, 0x0E, 0x03, 0xB8, 
0x71, 0xC1, 0xE0, 0x00, 
0x00, 0x00, 0x02, 0x37, 0xFF, 0xFF, 0xFA, 0x00, 0x7F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x02, 0x37, 0xFE, 0x00, 0x01, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x0F, 0x80, 0x00, 0xFF, 0xBF, 0xFF, 0xAE, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x1F, 0xBF, 0x7E, 0xAA, 0xBF, 0xFF, 0xAF, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x1F, 0xBF, 0x7E, 0xFF, 0xBF, 0xFF, 0xAF, 0xB0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x0A, 0xBF, 0x7E, 0xBE, 0xBF, 0xFF, 0xFF, 0xD8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x05, 0x3F, 0x7C, 0xFF, 0xBF, 0xFF, 0xAF, 0xEC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 
0x00, 0x3F, 0xFF, 0xFF, 0xFF, 0xFB, 0x00, 0x3F, 0xFF, 0xF6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 
0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x3E, 
0x1C, 0x1C, 0x0E, 0x00, 
0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x7F, 
0x3E, 0x3E, 0x1E, 0x00, 
0x03, 0x3F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x77, 
0x77, 0x77, 0x3E, 0x00, 
0x06, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 
0x77, 0x77, 0x6E, 0x00, 
0x04, 0xD5, 0x4C, 0xAA, 0xA6, 0x55, 0x53, 0x2A, 0x99, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0E, 
0x77, 0x77, 0xEE, 0x00, 
0x01, 0x84, 0xAD, 0x55, 0x56, 0xAA, 0xAB, 0x55, 0x5A, 0x42, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1C, 
0x77, 0x77, 0xFF, 0x00, 
0x01, 0x43, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0xE2, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 
0x77, 0x77, 0xFF, 0x00, 
0x01, 0x00, 0x5F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFA, 0xD2, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 
0x3E, 0x3E, 0x0E, 0x00, 
0x01, 0x43, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFA, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 
0x1C, 0x1C, 0x0E, 0x00, 
0x01, 0x80, 0x52, 0x94, 0xA5, 0x29, 0x4A, 0x52, 0x84, 0x72, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 
0x00, 0xD5, 0x29, 0x4A, 0x52, 0x94, 0xA5, 0x29, 0x4A, 0x46, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 
0x00, 0x63, 0x9C, 0xE7, 0x39, 0xCE, 0x73, 0x9C, 0xE7, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 
0x00, 0x33, 0xDE, 0xF7, 0xBD, 0xEF, 0x7B, 0xDE, 0xF7, 0x98, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 
0x00, 0x19, 0x8C, 0x63, 0x18, 0xC6, 0x31, 0x8C, 0x63, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 
0x00, 0x0C, 0xE7, 0x39, 0xCE, 0x73, 0x9C, 0xE7, 0x39, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 
0x54, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 
0x2A, 0xA0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xAA, 0x80, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 
0x7D, 0xFD, 0xFD, 0xFD, 0xFD, 0xFD, 0xFD, 0xFD, 0xFD, 0xFD, 0xF7, 0xF7, 0xF7, 0xF7, 0xF7, 0xF7, 
0xF7, 0xF7, 0xF7, 0xE0, 
0x2A, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xA8, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 
0xAA, 0xAA, 0xAA, 0xA0, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00
};
char menusize[]={0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF0, 0x3F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x8F, 0xEF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xF7, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF7, 0xF9, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x5F, 0xFF, 0xFF, 0xFF, 0xFF, 0xD7, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x9B, 0xD7, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x7F, 0xC1, 0xDE, 0xF6, 0xEF, 0xF7, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xEB, 0xDF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x7F, 0xF7, 0xAE, 0xF6, 0xDF, 0xF7, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFB, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x7F, 0xF7, 0xAE, 0x76, 0xBF, 0xF4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xDE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x7F, 0xF7, 0xAE, 0xB6, 0x7F, 0xF4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7B, 0xDE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x7F, 0xF7, 0x76, 0xD6, 0x7F, 0xF4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7B, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x7F, 0xF7, 0x06, 0xE6, 0xBF, 0xF4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7B, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x7F, 0xF7, 0x76, 0xF6, 0xDF, 0xF4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7B, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x7F, 0xF6, 0xFA, 0xF6, 0xEF, 0xF4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7B, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x5F, 0xFF, 0xFF, 0xFF, 0xFF, 0xD4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xF4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0xFE, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0xFE, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7B, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7B, 0xDF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 
0xDF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFB, 0xD7, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xEB, 0xD9, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x9B, 0xEF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF7, 0xF0, 0x1F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x0F};
char frame[]={0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1B, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x01, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFA, 0x80, 0x00, 0x00, 0x00, 0x01, 0xBF, 0xFF, 0xFF, 0xFF, 0xFF, 
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF6, 0x80, 0x00, 0x00, 0x00, 0x01, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0E, 0x80, 0x00, 0x00, 0x00, 0x01, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0E, 0x80, 0x00, 0x00, 0x00, 0x01, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0E, 0x80, 0x00, 0x00, 0x00, 0xFF, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0E, 0x80, 0xFF, 0xFF, 0xFF, 0xFF, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0E, 0x80, 0xFF, 0xFF, 0xFF, 0xCF, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0E, 0x80, 0x00, 0x00, 0x00, 0xFF, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0E, 0x80, 0x00, 0x00, 0x00, 0xFF, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0E, 0x80, 0x00, 0x00, 0x00, 0x01, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,0x00, 0x0E, 0x80, 0x00, 0x00, 0x00, 0x01, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0E, 0x80, 0x00, 0x00, 0x00, 0x01, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0E, 0x80, 0x00, 0x00, 0x00, 0x01, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0E, 0x80, 0x00, 0x00, 0x00, 0x01, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0E, 0x80, 0x00, 0x00, 0x00, 0x01, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0E, 0x80, 0x00, 0x00, 0x00, 0x01, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0E, 0x80, 0xFF, 0xFF, 0x00, 0x01, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0E, 0x80, 0xFF, 0xFF, 0x00, 0x3F, 0xC0, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0E, 0x80, 0x00, 0x03, 0xFF, 0xE3, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0E, 0x80, 0x00, 0x03, 0xFF, 0xFF, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0E, 0x80, 0x00, 0x03, 0x00, 0x3F, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0E, 0x80, 0x00, 0x03, 0x00, 0x01, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0E, 0x80, 0x00, 0x03, 0x00, 0x01, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0E, 0x80, 0x00, 0x03, 0x00, 0x01, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0E, 0x80, 0x00, 0x03, 0x00, 0x01, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0E, 0x80, 0x00, 0x03, 0x00, 0x7F, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0E, 0x80, 0x00, 0x03, 0x03, 0xC3, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0E, 0x80, 0x00, 0x03, 0x02, 0x7F, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0E, 0x80, 0x00, 0x03, 0x03, 0xFF, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0E, 0x80, 0x00, 0x03, 0xFF, 0xC3, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0E, 0x80, 0x00, 0x03, 0xFF, 0xFF, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0E, 0x80, 0x00, 0x00, 0x03, 0xFF, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0E, 0x80, 0x00, 0x00, 0x00, 0x7F, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0E, 0x80, 0x00, 0x00, 0x00, 0x01, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0E, 0x80, 0x00, 0x00, 0x00, 0x01, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0E, 0x80, 0x00, 0x00, 0x00, 0x01, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0E, 0x80, 0x00, 0x00, 0x00, 0x01, 0xC0, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0E, 0x80, 0x00, 0x00, 0x00, 0x01, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0E, 0x80, 0x00, 0x00, 0x00, 0x01, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0E, 0x80, 0x00, 0x00, 0x00, 0x0F, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0E, 0x80, 0x00, 0x00, 0x00, 0x1F, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0E, 0x80, 0x00, 0x00, 0x00, 0xF9, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0E, 0x80, 0xFF, 0xFF, 0xFF, 0x9F, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0E, 0x80, 0xFF, 0xFF, 0xFF, 0xFF, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0E, 0x80, 0x00, 0x00, 0x00, 0xFF, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0E, 0x80, 0x00, 0x00, 0x00, 0x1F, 0xBF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF6, 0x80, 0x00, 0x00, 0x00, 0x0F, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFA, 0x80, 0x00, 0x00, 0x00, 0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0x80, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00};char menuup[]={0xFF, 0xFF, 0xFF, 0xFE, 0xFF, 0xFF, 0xFF, 0xFE, 0xFF, 0xFF, 0xFF, 0xFE, 0xFF, 0xFF, 0xFF, 0xFE, 0xFF, 0xFF, 0xFF, 0xFE, 0xFF, 0xFF, 0xFF, 0xFE, 0xFF, 0xFF, 0xFF, 0xFE, 0x30, 0x00, 0x00, 0x0C, 0x30, 0x00, 0x00, 0x0C, 0x30, 0x00, 0x00, 0x0C, 0x78, 0x00, 0x00, 0x0C, 0x58, 0x00, 0x7F, 0xFC, 0x58, 0x00, 0x7F, 0xFC, 0x78, 0x00, 0x60, 0x00, 0x78, 0x00, 0xF0, 0x00, 0xFC, 0x00, 0xF0, 0x00, 0x9C, 0x01, 0xF8, 0x00, 0xBC, 0x01, 0xB8, 0x00, 0xBC, 0x01, 0xB8, 0x00, 0xFC, 0x01, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
char menuleft[]={0xF0, 0xFE, 0x3F, 0xFE, 0xFF, 0xFE, 0xF0, 0xFE, 0x00, 0xFE, 0x00, 0xFE, 0x00, 0xFE, 0x00, 0xFE, 0x00, 0xFE, 0x00, 0xFE, 0xF0, 0xFE, 0x3F, 0xFE, 0xFF, 0xFE, 0xF0, 0xFE, 0x00, 0xFE, 0x00, 0xFE, 0x00, 0xFE, 0x00, 0xFE, 0x00, 0xFE, 0xF0, 0xFE, 0x3F, 0xFE, 0xFF, 0xFE, 0xF0, 0xFE, 0x00, 0xFE, 0x00, 0xFE, 0x00, 0xFE, 0x00, 0xFE, 0x00, 0xFE, 0xF0, 0xFE, 0x3F, 0xFE, 0xFF, 0xFE, 0xF0, 0xFE};

char item[6][8]={
0x18, 0x28, 0x18, 0xFF, 0x5A, 0x24, 0x18, 0x7E,//base
0x3C, 0x7E, 0xBD, 0x99, 0xFF, 0x7E, 0x24, 0x18, //bomb
0x18, 0x2C, 0x3C, 0x3C, 0x3C, 0x3C, 0x00, 0x3C, //gun
0x66, 0x7E, 0x7E, 0x5A, 0x66, 0x7E, 0x3C, 0x18, //super
0x00, 0x18, 0xE4, 0x3E, 0x41, 0xAB, 0x7E, 0x00, //tank
0x18, 0x3C, 0x42, 0x91, 0x9D, 0x81, 0x42, 0x3C//time
};
int roundmax;

int roundmaxsave=17;
int map[18][10][18]={
//第1关场景
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,2,0,2,2,0,2,2,0,0,2,2,0,2,2,0,2,0,
0,2,0,2,2,0,2,2,2,2,2,2,0,2,2,0,2,0,
0,2,0,2,2,0,2,2,0,0,2,2,0,2,2,0,2,0,
0,0,0,2,2,0,2,2,0,0,2,2,0,2,2,0,0,0,
3,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,3,
3,3,3,0,0,0,4,4,4,4,4,4,0,0,0,3,3,3,
4,4,4,0,2,2,0,0,0,0,0,0,2,2,0,4,4,4,
0,0,0,0,2,2,0,3,3,3,0,0,2,2,0,0,0,0,
0,0,0,0,3,3,0,3,10,3,0,0,3,3,0,0,0,0,

//第2关场景
0,0,0,0,4,4,0,0,0,2,2,0,0,0,0,0,0,0,
0,2,2,0,4,4,0,0,0,2,2,0,2,2,0,3,3,0,
0,2,2,0,2,2,0,0,0,2,2,0,2,2,0,3,3,0,
0,2,2,0,2,2,0,0,0,0,0,0,2,2,0,3,3,0,
0,0,0,0,2,2,0,0,4,4,4,4,2,2,0,3,3,0,
3,3,3,0,0,0,0,0,0,2,2,2,0,0,0,0,0,0,
3,3,3,0,0,0,4,4,4,2,2,2,0,0,3,3,3,3,
4,4,4,0,0,0,0,0,0,0,0,0,0,0,3,3,3,3,
0,0,0,0,3,3,0,3,3,3,0,3,3,0,0,0,0,0,
0,0,0,0,3,3,0,3,10,3,0,3,3,0,0,0,0,0,

//第3关场景
0,0,2,2,0,3,3,0,0,0,0,0,0,4,4,0,0,0,
0,0,2,2,0,3,3,0,2,2,2,2,2,4,4,0,0,0,
0,0,0,0,0,3,3,0,2,2,2,2,2,4,4,0,0,0,
0,0,3,3,0,0,0,0,0,0,0,0,0,0,0,0,3,3,
0,0,3,3,0,2,2,2,2,2,2,2,2,2,2,0,3,3,
4,4,3,3,0,0,0,0,0,0,0,0,2,2,2,0,3,3,
4,4,3,3,0,0,4,4,4,4,4,0,2,2,2,0,3,3,
0,0,3,3,0,0,0,0,0,0,0,0,2,2,2,0,0,0,
0,0,0,0,2,2,0,3,3,3,0,0,0,0,4,4,0,0,
0,0,0,0,2,2,0,3,10,3,0,0,0,0,4,4,0,0,

//第4关场景
0,0,0,2,2,2,0,0,2,2,2,0,0,0,0,0,0,0,
0,0,0,2,2,2,0,0,2,2,2,0,4,4,0,0,0,0,
0,0,0,2,2,2,0,0,2,2,2,0,4,4,0,1,0,0,
3,3,0,0,0,0,0,0,2,2,2,0,4,4,0,1,0,0,
3,3,0,0,2,2,2,2,2,2,2,0,0,0,0,1,0,0,
0,0,0,0,2,2,2,4,4,2,2,0,0,0,0,0,0,0,
3,3,3,3,3,0,0,0,0,0,0,0,3,3,3,3,3,4,
4,4,4,4,4,0,0,0,0,0,0,0,3,3,3,3,3,4,
0,0,0,0,0,0,0,3,3,3,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,3,10,3,0,0,0,0,0,0,0,0,

//第5关场景
0,0,0,3,3,0,0,0,0,0,0,0,3,3,0,0,0,0,
0,0,0,3,3,0,0,0,0,0,0,0,3,3,0,0,0,0,
1,1,1,0,0,2,2,2,2,2,2,2,0,0,0,1,1,1,
1,1,1,0,0,2,2,2,2,2,2,2,0,0,0,1,1,1,
1,1,1,0,0,3,3,3,3,3,3,3,0,0,0,1,1,1,
1,1,1,0,0,3,3,3,3,3,3,3,0,0,0,1,1,1,
1,1,1,2,2,0,0,3,3,3,0,0,2,2,0,1,1,1,
4,4,4,2,2,0,0,0,0,0,0,0,2,2,0,4,4,4,
0,0,0,2,2,0,0,3,3,3,0,0,2,2,0,0,0,0,
0,0,0,2,2,0,0,3,10,3,0,0,2,2,0,0,0,0,

//第6关场景
0,0,0,2,4,0,0,0,0,0,4,4,4,0,0,0,0,0,
0,0,4,2,4,0,0,0,0,0,0,0,0,0,2,2,0,0,
0,0,4,2,4,0,4,4,4,4,0,4,2,4,2,2,0,0,
2,2,4,0,0,0,2,2,2,2,0,4,2,4,2,2,0,0,
2,2,4,0,0,0,4,4,4,4,0,4,2,4,2,2,4,4,
0,0,0,0,2,2,2,2,2,2,2,4,0,0,0,0,0,0,
4,4,4,4,2,4,4,4,4,2,2,4,4,4,4,4,0,0,
2,2,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,
2,2,0,0,4,0,0,3,3,3,0,0,0,4,0,4,4,4,
2,2,0,0,4,0,0,3,10,3,0,0,0,4,0,0,0,0,

//第7关场景
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,2,0,3,0,0,0,0,0,0,3,0,2,0,0,0,
0,3,3,2,0,3,0,0,0,0,0,0,3,0,2,3,3,0,
0,2,2,2,0,0,0,2,2,2,2,0,0,0,2,2,2,0,
0,0,0,0,0,0,0,3,3,3,3,0,0,0,0,0,0,0,
3,3,0,0,0,0,4,2,2,2,2,4,0,0,0,0,3,3,
3,3,3,0,0,0,0,0,4,4,0,0,0,0,0,3,3,3,
0,0,3,3,0,2,0,0,0,0,0,0,2,0,3,3,0,0,
0,0,3,3,0,2,0,3,3,3,0,0,2,0,3,3,0,0,
0,0,3,3,0,2,0,3,10,3,0,0,2,0,3,3,0,0,

//第8关场景
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,3,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,
0,3,4,3,0,3,4,3,0,3,4,3,0,3,4,3,0,0,
0,0,3,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,
3,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,3,3,
4,4,0,3,4,3,0,3,4,3,0,3,4,3,0,0,4,4,
0,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,0,0,
0,3,3,0,0,0,0,0,0,0,0,0,0,0,3,3,0,0,
0,3,3,0,2,2,0,3,3,3,0,2,2,0,3,3,0,0,
0,0,0,0,2,2,0,3,10,3,0,2,2,0,0,0,0,0,

//第9关场景
0,0,0,2,0,0,0,0,0,0,0,0,0,0,2,0,0,0,
0,0,0,2,0,0,0,1,1,1,1,0,0,0,2,0,0,0,
2,0,0,2,0,0,1,1,4,4,1,1,0,0,2,0,0,2,
2,2,0,0,0,1,1,0,1,1,0,1,1,0,0,0,2,2,
2,2,2,0,0,1,1,0,1,1,0,1,1,0,0,2,2,2,
2,2,2,0,0,1,1,1,1,1,1,1,1,0,0,2,2,2,
2,2,0,0,0,0,3,3,0,0,3,3,0,0,0,0,2,2,
2,0,4,4,0,3,3,0,0,0,0,3,3,0,4,4,0,2,
0,0,0,0,0,0,0,3,3,3,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,3,10,3,0,0,0,0,0,0,0,0,

//第10关场景
0,0,0,0,3,3,0,0,0,0,0,0,3,3,0,0,0,0,
2,2,2,0,3,3,0,0,0,0,0,0,3,3,0,2,2,2,
2,2,2,0,3,3,0,2,2,2,2,0,3,3,0,2,2,2,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,3,3,3,0,4,0,4,4,4,4,0,4,0,3,3,3,0,
0,0,0,3,0,4,0,0,0,0,0,0,4,0,3,0,0,0,
3,3,0,3,0,4,4,0,0,0,0,4,4,0,3,0,3,3,
0,0,0,3,0,0,0,0,0,0,0,0,0,0,3,0,0,0,
0,3,3,3,0,0,0,3,3,3,0,0,0,0,3,3,3,0,
0,0,0,0,0,0,0,3,10,3,0,0,0,0,0,0,0,0,

//第11关场景
0,0,0,0,0,3,0,0,0,0,0,3,0,0,0,0,0,0,
0,0,0,0,0,3,0,0,0,0,0,3,0,0,0,0,0,0,
0,0,0,0,0,3,0,0,0,0,0,3,0,0,0,0,3,3,
3,0,3,0,0,1,4,0,0,0,4,0,0,0,0,0,3,3,
3,3,3,0,2,0,0,0,0,0,0,0,2,0,2,0,0,0,
3,3,3,0,2,2,2,4,4,4,2,2,2,0,2,2,0,0,
0,0,0,0,0,2,2,3,3,3,2,2,0,0,2,2,0,0,
0,2,3,0,0,0,0,0,0,0,0,0,0,3,0,3,0,0,
0,2,3,0,0,3,0,3,3,3,0,3,0,3,0,3,0,0,
0,2,3,0,0,3,0,3,10,3,0,3,0,3,0,3,0,0,

//第12关场景
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,3,0,0,0,2,2,2,2,0,0,0,3,0,0,0,
0,0,0,3,0,0,0,2,2,2,2,0,0,0,3,0,0,0,
2,0,0,3,0,0,0,0,0,0,0,0,0,0,3,0,0,2,
2,2,0,0,0,2,2,4,4,4,4,2,2,0,0,0,2,2,
0,0,0,3,3,0,0,0,0,0,0,0,0,3,3,0,0,0,
4,1,1,3,3,1,1,1,1,1,1,1,1,3,3,1,1,4,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
1,0,0,0,1,1,0,3,3,3,0,0,1,1,0,0,0,1,
1,0,0,0,1,1,0,3,10,3,0,0,1,1,0,0,0,1,

//第13关场景
0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,1,1,0,0,0,0,0,0,0,0,3,3,3,0,0,2,
0,0,0,0,0,0,0,3,3,3,3,3,0,0,0,3,0,2,
4,4,1,1,1,0,0,0,0,0,0,3,3,3,3,3,0,2,
0,0,1,1,1,0,0,4,4,0,3,0,0,0,0,0,3,0,
0,0,1,1,1,1,1,0,0,3,0,3,0,3,0,3,0,3,
0,0,0,0,0,1,1,0,0,0,3,3,3,3,3,3,3,0,
0,3,3,3,3,3,3,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,3,3,3,0,0,0,0,4,4,4,4,
0,0,0,0,0,0,0,3,10,3,0,0,0,0,0,0,0,0,

//第14关场景
0,2,0,0,2,2,0,0,0,0,0,2,2,0,0,2,0,0,
0,0,0,0,2,2,0,2,2,2,0,2,2,0,0,0,0,0,
0,0,0,0,2,2,0,0,0,0,0,2,2,0,0,0,0,0,
2,2,0,2,2,0,0,2,2,2,0,0,2,2,0,0,2,2,
2,2,0,2,2,0,0,2,2,2,0,0,2,2,0,0,2,2,
2,2,0,2,2,0,0,0,4,0,0,0,2,2,0,0,2,2,
2,2,3,3,3,0,0,0,0,0,0,0,3,3,3,0,2,2,
2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,
0,0,0,0,0,3,0,3,3,3,0,3,0,0,0,0,0,0,
0,0,0,0,0,3,0,3,10,3,0,3,0,0,0,0,0,0,

//第15关场景
0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,2,0,0,
0,0,0,2,0,0,0,0,0,0,0,0,2,2,0,2,0,0,
1,1,0,0,0,0,2,2,2,2,2,0,2,2,0,0,0,0,
1,1,0,0,0,0,2,2,2,2,2,0,2,2,0,3,3,3,
1,1,0,2,2,0,0,0,0,0,0,0,2,2,0,0,0,0,
0,0,0,2,2,0,0,4,4,3,3,0,0,0,0,0,0,0,
0,0,0,2,2,0,0,4,4,3,3,0,0,0,2,2,2,2,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,
0,0,1,1,0,0,0,3,3,3,0,0,0,0,0,0,0,0,
0,0,1,1,0,0,0,3,10,3,0,0,0,0,0,0,0,0,

//第16关场景
0,0,0,0,0,3,0,0,0,0,0,0,0,1,1,0,0,0,
0,0,0,0,0,3,0,0,0,4,0,0,0,1,1,0,0,0,
3,3,3,3,0,3,3,0,0,4,0,0,0,1,1,0,0,0,
0,0,3,3,0,3,3,0,0,4,0,0,0,0,0,0,1,1,
0,0,3,3,0,0,0,0,0,4,0,3,3,4,0,0,0,0,
0,0,3,3,0,0,4,4,4,4,0,1,1,4,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,4,4,4,
1,1,1,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,
1,1,1,0,3,0,0,3,3,3,0,0,3,2,2,0,0,0,
0,0,0,0,3,0,0,3,10,3,0,0,3,2,2,0,0,0,

//第17关场景
0,4,3,0,0,2,2,0,0,0,2,2,0,0,4,3,0,0,
0,4,3,0,0,2,2,0,0,0,2,2,0,0,4,3,0,0,
0,0,3,0,0,2,2,0,0,0,2,2,0,0,0,3,0,0,
0,0,3,0,0,0,0,0,2,0,0,0,0,0,0,3,0,0,
0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,
2,2,2,2,2,0,0,4,4,4,0,0,0,2,2,2,2,2,
2,2,2,2,2,3,3,0,0,0,0,3,3,2,2,2,2,2,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,2,2,0,0,3,3,3,0,0,0,2,2,0,0,0,
0,0,0,2,2,0,0,3,10,3,0,0,0,2,2,0,0,0,

//第18关场景
0,0,0,3,3,0,0,0,0,0,0,0,0,3,3,0,0,0,
0,0,0,3,3,0,3,0,0,0,3,0,0,3,3,0,0,0,
0,2,0,0,0,0,3,0,0,0,3,0,0,0,0,0,2,0,
2,2,0,0,0,0,3,3,3,3,3,0,0,0,0,0,2,2,
2,2,0,0,3,0,0,3,3,3,0,0,0,3,0,0,2,2,
0,0,0,3,3,0,0,0,3,0,0,0,0,3,3,3,0,0,
3,3,3,3,3,0,0,0,4,0,0,0,0,3,3,3,3,3,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,1,0,0,0,3,3,3,0,0,0,0,1,0,0,0,
0,0,0,1,1,0,0,3,10,3,0,0,0,1,1,0,0,0
};





int sence[20][10];//定义地图
int rvalue;//返回的数据
int blx, bly;
int XOffset, YOffset;
int temp;
struct enemy//Enemy的结构数据
{
int x;//敌人的X坐标
int y;//敌人的Y坐标
int state;//定义敌人的状态
int xspeed;//定义敌人的速度
int yspeed;
int style;//定义敌人的样式
int earrrnd;//敌人的活泼程度
int movesleep;//敌人移动的休息时间
int sleepid;//敌人休息的指示器
int frame;//敌人动画的使用帧
int arrow;//
int life;
int showtime;
int canmove;
int movesleepmax;
};

struct menuitem//Enemy的结构数据
{
int x;//敌人的X坐标
int y;//敌人的Y坐标
int state;
char info;
};


struct playergun
{
int x;
int y;
int xspeed;
int yspeed;
int state;
int arrow;
};
struct enemygun
{
int x;
int y;
int xspeed;
int yspeed;
int state;
int arrow;
int sleep;

};
struct bomb
{
int x;
int y;
int state;
int id;
int bs;
};
int selid=0;
char maininfo[6][9]={"开始战斗",
"游戏设定",
"读取进度",
"新片预告",
"战地手册",
"退出战役"
};
struct menuitem mainmenu[6];
struct bomb b[5];
struct playergun pg;
struct enemygun eg[10];
struct enemy en[16];//定义Enemy所需要的变量
int eblock;
int mx,my;//小人的坐标变量
int mstate;//小人的当前状态,表明小人的当前移动形式是上下左右的那种状态
int mauto;//自动移动，以适应8倍数的地图
int mframe;//小人当前动作使用的帧
int pgxset[4];
int pgyset[4];
int egxset[4];
int egyset[4];

//程序的图形数据
char picnull[8]={0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};//空图形
char block[4][8]={0x7E,0x83,0xBB, 0xA3, 0xA3, 0x87, 0xFF, 0x7E,//砖头
0x7F,0x7F,0x7F, 0x00, 0xF7, 0xF7, 0xF7, 0x00,//钢板
0x7E,0x83,0x9F,0x9F,0x9F,0xFF,0xFF,0x7E,//石头
0x3C, 0x7E, 0xCB, 0x95, 0xEF, 0xD5, 0x7E, 0x00//土块
};

char enemya[4][8]={0x18, 0x18, 0xFF, 0x42, 0xDB, 0x5A, 0xC3, 0x7E,
0x7E, 0xC3, 0x5A, 0xDB, 0x42, 0xFF, 0x18, 0x18,
0x2A, 0x3F, 0x21, 0xED, 0xED, 0x21, 0x3F, 0x2A,
0x54, 0xFC, 0x84, 0xB7, 0xB7, 0x84, 0xFC, 0x54};


char enemyb[4][8]={0x18, 0x18, 0x18, 0xFF, 0x66, 0x66, 0xE7, 0xBD,
0xBD, 0xE7, 0x66, 0x66, 0xFF, 0x18, 0x18, 0x18,
0x13, 0x1E, 0x1F, 0xF1, 0xF1, 0x1F, 0x1E, 0x13,
0xC8, 0x78, 0xF8, 0x8F, 0x8F, 0xF8, 0x78, 0xC8};


char enemyc[4][8]={0x18, 0x5A, 0x5A, 0xA5, 0xE7, 0xA5, 0xDB, 0x7E,
0x7E, 0xDB, 0xA5, 0xE7, 0xA5, 0x5A, 0x5A, 0x18,
0x1E, 0x6B, 0x1D, 0xE3, 0xE3, 0x1D, 0x6B, 0x1E,
0x78, 0xD6, 0xB8, 0xC7, 0xC7, 0xB8, 0xD6, 0x78};


char tank[4][8]={0x24, 0x24, 0xA5, 0x7E, 0xC3, 0x5A, 0xC3, 0xBD,
0xBD, 0xC3, 0x5A, 0xC3, 0x7E, 0xA5, 0x24, 0x24,
0x2B, 0x1E, 0xF1, 0x15, 0x15, 0xF1, 0x1E, 0x2B,
0xD4, 0x78, 0x8F, 0xA8, 0xA8, 0x8F, 0x78, 0xD4};


char pgun1[]={0x10,0x08,0x10,0x08,0x10,0x08,0x10,0x08};
char pgun2[]={0x00,0x00,0x00,0x55,0xAA,0x00,0x00,0x00};

char bomb[4][8]={0x00,0x00,0x28,0x10,0x28,0x14,0x00,0x00,
0x00,0x40,0x1A,0x24,0x2C,0x18,0x42,0x00,
0x01,0x5A,0x34,0x66,0x6A,0x72,0x34,0x82,
0xB9,0x64,0xEA,0xDE,0xE4,0x6C,0xB2,0x11};


char show1[]={0x81,0x5A,0x3C,0x6E,0x7E,0x3C,0x5A,0x81};
char show2[]={0x10,0x18,0x3C,0x6F,0xFE,0x3C,0x18,0x08};
//程序的图形数据


int ShowMenu()
{

for(xun=-100;xun<=0;xun=xun+20)
{
	ClearScreen();

	WriteBlock(xun,0,152,72,1,frame);

	Block(xun+152,0,159,74,0);
	
	WriteBlock(0,0,160,80,3,menusize);



	Refresh();
//	Delay(50);
}

for(xun=-24;xun<=0;xun=xun+2)
{
	ClearScreen();
	WriteBlock(111,xun,32,24,1,menuup);
	if (xun<-24+7)
	{
		Block(111,7,145,70,0);	
	}
	else
	{
		Block(111,xun+24,145,70,0);			
	}
	WriteBlock(0,0,152,72,3,frame);
	WriteBlock(0,0,160,80,3,menusize);
	Refresh();
//	Delay(50);
}


for(xun=160;xun>=145;xun=xun-3)
{
	ClearScreen();
	WriteBlock(xun,32,16,32,1,menuleft);
	if (xun-7>152)
	{
	Block(8,30,152,66,0);
	}
	else
	{
	Block(8,30,xun-7,66,0);	
	}
			
	WriteBlock(111,0,32,24,3,menuup);
	WriteBlock(0,0,152,72,3,frame);
	WriteBlock(0,0,160,80,3,menusize);
	Refresh();
//	Delay(50);
}

}


int HideMenu()
{
for(xun=145;xun<=160;xun=xun+3)
{
	ClearScreen();
	WriteBlock(xun,32,16,32,1,menuleft);
	if (xun-7>152)
	{
	Block(8,30,152,66,0);
	}
	else
	{
	Block(8,30,xun-7,66,0);	
	}
			
	WriteBlock(111,0,32,24,3,menuup);
	WriteBlock(0,0,152,72,3,frame);
	WriteBlock(0,0,160,80,3,menusize);
	Refresh();
//	Delay(50);
}


for(xun=0;xun>=-24;xun=xun-2)
{
	ClearScreen();
	WriteBlock(111,xun,32,24,1,menuup);
	if (xun<-24+7)
	{
		Block(111,7,145,70,0);	
	}
	else
	{
		Block(111,xun+24,145,70,0);			
	}
	WriteBlock(0,0,152,72,3,frame);
	WriteBlock(0,0,160,80,3,menusize);
	Refresh();
//	Delay(50);
}



for(xun=0;xun<=60;xun=xun+8)
{
	ClearScreen();

	WriteBlock(0,xun,152,72,1,frame);
	Block(0,xun+72,159,74,0);
	WriteBlock(0,0,160,80,3,menusize);

//Delay(100);
	Refresh();

}

}


void DrawInfo()
{
	 char str_life[2];
	Block(145,0,160,80,0);
	Rectangle(145,0,160,80,1);
    WriteBlock(148,3,8,8,1,enemya[0]);
	if (lastenemy>0)
	{
	 for (xun=1;xun<=lastenemy;xun++)	
	 {
	 	Block(151,xun*2+12,153,xun*2+12,1);
	 }
	}
	Rectangle(149,12,155,54,1);
	
	Rectangle(145,56,159,56,1);	
	WriteBlock(148,58,8,8,1,tank[0]);

    sprintf(str_life,"%d",life);
    TextOut(150,67,str_life,1);	
}

//////绘制场景////////////////////
void DrawSence()
{
int jd;
int txun1,txun2;
ClearScreen();
Refresh();
//绘制游戏需要的场景
jd=0;
for(txun2=0;txun2<=9;txun2++)
{
	for(txun1=0;txun1<=mapright;txun1++)
	{
		jd=jd+1;
	 WriteBlock(txun1*8,txun2*8,8,8,1,block[sence[txun1][txun2]]);
	WriteBlock(20,24,120,32,65,loading);
	Rectangle(28,43,131,49,65);
	Block(30,45,30+jd/2,47,65);	

	}
	 WriteBlock(64,72,8,8,1,item[0]);	
}
//绘制游戏需要的场景


DrawInfo();
}
//////绘制场景//////////////////
int SaveConfig()
{

	int ta;
  	char fp;
    int t;
        if ((fp=fopen("/LavaData/TankCfig.dat","w+"))==0)
    {

    }
    else{
        putc(level,fp);
        putc(delaytime,fp);
        putc(mapmode,fp);
	}
        fclose(fp); 	
}



int ReadConfig ()
{	int mp;
	int ta;
  	char fp;
    int t;

    if ((fp=fopen("/LavaData/TankCfig.dat","r"))==0)
    {

    }
    else{
        level=getc(fp);
        delaytime=getc(fp);
		mapmode=getc(fp);
		if ((mp=fopen("/LavaData/TankMap.dat","r"))==0)
				{
					mapmode=0;
					roundmax=roundmaxsave;
					SaveConfig();
					myroundmax=-1;
				}
			    else {
		     rewind(mp);
	 	  myroundmax=getc(mp);

			 
				}
		fclose(mp);
				
		
		if (mapmode==0) roundmax=roundmaxsave;
		
		
		if (mapmode==1)  roundmax=myroundmax;
	}
        fclose(fp);
         
}

int ReadGame(int mode)
{

int ta;
  char fp;
    int t;

if (mode==1)
{
	WriteBlock(20,24,120,32,65,loading);
	TextOut(28,30,"                 ",65);	
	TextOut(28,34,"读盘吗? Y-是 N-否",65);
	for(;;)
	{
	
	key=getchar();
	if (key==121) break;
	if (key==110) return 1;
	}
}	



    if ((fp=fopen("/LavaData/TankSave.dat","r"))==0)
    {
		 
		 getchar();
		  fclose(fp);
    }
    else{
    	rewind(fp);




        	for(xun=0;xun<=17;xun++)
        	{
        		for(xun1=0;xun1<=9;xun1++)
        		{
        		   sence[xun][xun1]=getc(fp)-1;
        			
        		}
        	
        	}
        	for(xun=1;xun<=3;xun++)
        	{
        		en[xun].x=getc(fp);
        		en[xun].y=getc(fp);
        		en[xun].state=getc(fp);
        		en[xun].xspeed=getc(fp);
        		en[xun].yspeed=getc(fp);
        		
        		ta=getc(fp);
        		if (ta==1) en[xun].xspeed=-1*en[xun].xspeed;
        		
        		ta=getc(fp);
        		if (ta==1) en[xun].yspeed=-1*en[xun].yspeed;
        		
        		en[xun].earrrnd=getc(fp);
        		en[xun].movesleep=getc(fp);
        		en[xun].sleepid=getc(fp);
        		en[xun].frame=getc(fp);
        		en[xun].arrow=getc(fp);
        		en[xun].life=getc(fp);
        		en[xun].showtime=getc(fp);
        		en[xun].canmove=getc(fp);
        		en[xun].style=getc(fp);
        		en[xun].movesleepmax=getc(fp);        		
        	
        	}
        	
        	 for(xun=1;xun<=egc;xun++)
        	{
        		eg[xun].x=getc(fp);
        		eg[xun].y=getc(fp);
        		eg[xun].xspeed=getc(fp);
        		eg[xun].yspeed=getc(fp);
        		ta=getc(fp);
        		if (ta==1) eg[xun].xspeed=-1*eg[xun].xspeed;
        		
        		ta=getc(fp);
        		if (ta==1) eg[xun].yspeed=-1*eg[xun].yspeed;        		
        		
        		eg[xun].state=getc(fp);
        		eg[xun].arrow=getc(fp);
        		eg[xun].sleep=getc(fp);


        	
        	}
        	
        	ec=getc(fp);
        	
        	
        	
        	itemx=getc(fp);
			itemy=getc(fp);
			itemtime=getc(fp);
			itemstyle=getc(fp);
			itemstate=getc(fp);
        	
        for (xun=1;xun<=bc;xun++)//爆炸图形
		{
			b[xun].x=getc(fp);
			b[xun].y=getc(fp);
			b[xun].state=getc(fp);
			b[xun].id=getc(fp);
			b[xun].bs=getc(fp);
		
		}
        	
        life=getc(fp);//游戏者生命
		lastenemy=getc(fp);//剩余敌人数目
		Round=getc(fp);
		mx=getc (fp);
		my=getc (fp);
		mstate=getc (fp);
		mauto=getc (fp);
		gunlevel=getc(fp);	
		
				//游戏者子弹
	pg.x=getc(fp);
	pg.y=getc(fp);
	pg.xspeed=getc(fp);
	pg.yspeed=getc(fp);
	ta=getc(fp);
	if (ta==1) pg.xspeed=pg.xspeed*-1;

	ta=getc(fp);
	if (ta==1) pg.yspeed=pg.yspeed*-1;	
	pg.state=getc(fp);
	pg.arrow=getc(fp);
	
	pausetime=getc(fp);
	supertime=getc(fp);
	basetime=getc(fp);	
	RCtime=getc(fp);
	NRtime=getc(fp);
	Dtime=getc(fp);
	mapmode=getc(fp);	
	roundmax=getc(fp);
	myroundmax=getc(fp);
	roundmaxsave=getc(fp);

        //游戏者子弹
        
		
		
			    	

        }
        

        fclose(fp); 
if (mode==0) HideMenu();
        return 0;


}

int SaveGame()
{
    char fp;
    int t;
	WriteBlock(20,24,120,32,65,loading);
	TextOut(28,30,"                 ",65);	
	TextOut(28,34,"存盘吗? Y-是 N-否",65);
	for(;;)
	{
	
	key=getchar();
	if (key==121) break;
	if (key==110) return 0;
	}
	
	WriteBlock(20,24,120,32,65,loading);
	TextOut(28,30,"                 ",65);	
	TextOut(28,34,"正在存盘,请等待..",65);
		
    if ((fp=fopen("/LavaData/TankSave.dat","w+"))==0)
    {
    	fclose(fp);
    }
    else{
    	rewind(fp);


        

        	for(xun=0;xun<=17;xun++)//保存场景
        	{
        		for(xun1=0;xun1<=9;xun1++)
        		{
        			putc(sence[xun][xun1]+1,fp);
        			
        		}
        	
        	}

        	for(xun=1;xun<=3;xun++)//保存敌人数据
        	{
        		putc(en[xun].x,fp);
        		putc(en[xun].y,fp);
        		putc(en[xun].state,fp);
        		putc(abs(en[xun].xspeed),fp);
        		putc(abs(en[xun].yspeed),fp);
        		if (en[xun].xspeed<0)
        		{
        			putc(1,fp);
        		}
        		else
        		{
        			putc(0,fp);
        		}
 
         		if (en[xun].yspeed<0)
        		{
        			putc(1,fp);
        		}
        		else
        		{
        			putc(0,fp);
        		}
        		
        		
        		putc(en[xun].earrrnd,fp);
        		putc(en[xun].movesleep,fp);
        		putc(en[xun].sleepid,fp);
        		putc(en[xun].frame,fp);
        		putc(en[xun].arrow,fp);
        		putc(en[xun].life,fp);
        		putc(en[xun].showtime,fp);
        		putc(en[xun].canmove,fp);
        		putc(en[xun].style,fp);
        		putc(en[xun].movesleepmax,fp);
        	
        	}
     	for(xun=1;xun<=egc;xun++)//保存敌人子弹数据
        	{
        		putc(eg[xun].x,fp);
        		putc(eg[xun].y,fp);
        		putc(abs(eg[xun].xspeed),fp);
        		putc(abs(eg[xun].yspeed),fp);
        		
        		
           		if (eg[xun].xspeed<0)
        		{
        			putc(1,fp);
        		}
        		else
        		{
        			putc(0,fp);
        		}
 
         		if (eg[xun].yspeed<0)
        		{
        			putc(1,fp);
        		}
        		else
        		{
        			putc(0,fp);
        		}
        		     		
        		
        		
        		putc(eg[xun].state,fp);
        		putc(eg[xun].arrow,fp);
        		putc(eg[xun].sleep,fp);


        	
        	}

        	putc(ec,fp);
			putc(itemx,fp);//升级元素
			putc(itemy,fp);
			putc(itemtime,fp);
			putc(itemstyle,fp);
			putc(itemstate,fp);

			

		for (xun=1;xun<=bc;xun++)//爆炸图形
		{
			putc(b[xun].x,fp);
			putc(b[xun].y,fp);
			putc(b[xun].state,fp);
			putc(b[xun].id,fp);
			putc(b[xun].bs,fp);
		
		}
		
		
		putc(life,fp);
		putc(lastenemy,fp);
		putc (Round,fp);
		putc (mx,fp);
		putc (my,fp);
		putc (mstate,fp);
		putc (mauto,fp);
		putc(gunlevel,fp);		
		//游戏者子弹
	putc(pg.x,fp);
	putc(pg.y,fp);
	putc(abs(pg.xspeed),fp);
	putc(abs(pg.yspeed),fp);
	
	if (pg.xspeed<0) 
	{putc(1,fp);}
	else
	{putc(0,fp);}
	if (pg.yspeed<0) 
	{putc(1,fp);}
	else
	{putc(0,fp);}
	
	putc(pg.state,fp);
	putc(pg.arrow,fp);
	
	putc(pausetime,fp);
	putc(supertime,fp);
	putc(basetime,fp);
	putc(RCtime,fp);
	putc(NRtime,fp);
	putc(Dtime,fp);	
	putc(mapmode,fp);
	putc(roundmax,fp);
	putc(myroundmax,fp);
	putc(roundmaxsave,fp);

        //游戏者子弹
      }
        

        fclose(fp); 


}



int GameOver()
{
ShowMenu();
	for(;;)
	{
		WriteBlock(0,0,160,80,1,menu);
		TextOut(50,30,"坦克全部牺牲!",1);
		TextOut(52,46,"很遗憾,将军!",1);
		Refresh();
		Delay(100);
		if (getchar()==13) break;
	}	

}

int RoundInfo(int mode)
{
char r[20];
ReleaseKey(128);
ShowMenu();
for(;;)
{
	if (mode==0)
	{
		sprintf(r,"准备进入第%d关",Round+1);
		WriteBlock(0,0,160,80,1,menu);
		TextOut(45,40,r,1);
		Refresh();
		Delay(100);		
		if (getchar()==13) break;

	}
	else
	{

		WriteBlock(0,0,160,80,1,menu);
		TextOut(50,30,"胜利完成任务!",1);
		TextOut(52,46,"将军,祝贺你!",1);
		Refresh();
		Delay(100);
		if (getchar()==13) break;	
	}
}
}

int RoundFirst()
{
char r[20];
for(;;)
{


	//if (roundmax>2)  roundmax=2;测试版本就是添加了这行代码
	if (Round>roundmax) Round=0;
	if (Round<0) Round=roundmax;
	

		sprintf(r,"准备进入第%d关",Round+1);
		WriteBlock(0,0,160,80,1,menu);
		TextOut(45,40,r,1);
		Refresh();
key=getchar();		
if (key==KEY_UP) Round=Round-1;
if (key==KEY_DOWN) Round=Round+1;
if (key==27) return 1;
if (key==13) return 0;

}
}




int ClearSence()
{
	int bvalue;
	    char fp;
	int txun1,txun2;
	nodat:
if (mapmode==0)
{

	
	
	for(txun2=0;txun2<=9;txun2++)
	{
		for(txun1=0;txun1<=mapright;txun1++)
		{
			sence[txun1][txun2]=-1;
			sence[txun1][txun2]=(map[Round][txun2][txun1])-1;
		
		}
	
	}
}
else
{

	    if ((fp=fopen("/LavaData/TankMap.dat","r"))==0)
		{
			mapmode=0;
			roundmax=roundmaxsave;
			SaveConfig();
			goto nodat;
		}
	    else {
     rewind(fp);
	roundmax=getc(fp);
	fseek(fp,Round*180+1,0);
	
	
	for (xun=0;xun<=9;xun++)		
	for (xun1=0;xun1<=17;xun1++)
	
	{{
	      bvalue=  getc(fp) ;
	
	      sence[xun1][xun]=bvalue-1;
	
	}}
	
	        fclose(fp); 
	
	    }
	
	}

}

//设定宝物////////////////////
void SetItem(int x,int y)
{
if (rand()%5!=0) return;
if (itemstate==1) WriteBlock(itemx,itemy,8,8,1,picnull);
itemx=x;
itemy=y;
itemstate=1;
itemtime=itemmaxtime;
itemstyle=rand()%6;

}




///////设定爆炸的图形
void SetBomb(int x,int y)
{
	for (xun1=1;xun1<=bc;xun1++)
	{
		if (b[xun1].state==0)
		{
			b[xun1].state=1;
			b[xun1].id=0;
			b[xun1].x=x;
			b[xun1].y=y;
		
			break;
		
		}
	}

}

//////设定爆炸的图形

int GunHitBlock(int x,int y, int Arrow,int gid,int player) 
{
int tempvalue;
Tx=x/8;
Ty=y/8;
if (x<0 || y<0 || x>136||y>72)
{
	tempvalue=-2;
}
    if (Tx <= 17 && Tx >= 0 && Ty >= 0 && Ty <= 9 )
    {
        tempvalue = sence[Tx][Ty];
    }

 
    if (tempvalue !=-1 ) 
        {
		


            if (tempvalue == 0 || tempvalue == 1) 
            {
                sence[Tx][Ty] = -1;
	            SetBomb (Tx * 8, Ty * 8);                      
              	WriteBlock(Tx*8,Ty*8,8,8,1,picnull);  
                
            }
            if (tempvalue == 2) 
            {
              //  sence[Tx][Ty] = 0;
              //  WriteBlock(Tx*8,Ty*8,8,8,1,block[0]);

               if (player==1 && gunlevel>=1) 
               	{
               	sence[Tx][Ty] = -1;
                WriteBlock(Tx*8,Ty*8,8,8,1,picnull);
                SetBomb (Tx * 8, Ty * 8);                 	
               	}
               	else
               	{
               		sence[Tx][Ty] = 0;
                  WriteBlock(Tx*8,Ty*8,8,8,1,block[0]);               	
               	}                
                
            } 
            if (tempvalue == 3) 
            {
               if (player==0) sence[Tx][Ty] = 3;
               if (player==1 && gunlevel==2) 
               	{
               	sence[Tx][Ty] = -1;
                WriteBlock(Tx*8,Ty*8,8,8,1,picnull);  
				SetBomb (Tx * 8, Ty * 8);                                	
               	}
               	else
               	{
                  WriteBlock(Tx*8,Ty*8,8,8,1,block[3]);               	
               	}
               
  
            } 
            if (tempvalue==9 && player==1) 
            {
            		 WriteBlock(64,72,8,8,1,item[0]);
            }

            if (tempvalue==9 && player==0) 
            {
            		supertime=0;
            		sence[8][9]=-1;
            		SetBomb(64,72);
            		Dtime=DtimeMax;
            		SetBomb(mx,my);

            }
         			tempvalue=-2;
        }
	

	if (tempvalue==-2 )
	{
	    if (player==0)
        {
        	eg[gid].state=0;
        }
        else
        {
        	pg.state=0;
        }
        
	}
    return tempvalue;
    
}



int  CheckBlock(int X, int Y, int Xd,int Yd,int IsMan,int eid) 
{
int over;
over=0;
if (IsMan==0 && pausetime>0) return -1;

	rvalue=0;
	XOffset=0;
	YOffset=0;
	if (Xd < 0)  XOffset = 0;
	if (Xd > 0)  XOffset = 1;
	if (Yd < 0)  YOffset = 0;
	if (Yd > 0)  YOffset = 1;
	Tx = X + Xd;
	Ty = Y + Yd;
	if (Tx < 0)
	{
	    Tx = 0;
	    rvalue = 1;
	    over=20;
	}
	if (Tx > swidth - 8)
	{
	    Tx = swidth - 8;
	    rvalue=1;
	    over=20;	    
	}
	if (Ty < 0)
	{
	    Ty = 0;
	    rvalue=1;
	    over=20;
	}
	
	if (Ty > sheight - 8 )
	{
	    Ty = sheight - 8;
	    rvalue=1;
	    over=20;
	}
	
	  temp=0;
	  if (Xd<0||Yd<0) temp=1;
	  if (Yd>0&& Ty%8!=0) temp=1;
	  if (Xd>0&& Tx%8!=0) temp=1;
	  blx = Tx / 8+XOffset; 
	  bly = Ty / 8+YOffset; 
	  	rvalue=sence[blx][bly];
		if (sence[blx][bly] != -1 && sence[blx][bly]<50  && temp==1 ){
		Tx=X;
		Ty=Y;
		}	
	
	       
	        if (IsMan==1)//如果是游戏者那么调整游戏者的姿态
	        {
	        mx = Tx;      
			my = Ty;
			}
	        if (IsMan==0)//如果是敌人那么调整敌人的状态
	        {
	        en[eid].x = Tx;      
			en[eid].y = Ty;
			}
		if (over==20) rvalue=over;			
	    return rvalue;
    
    
   
}








void GamePause()
{
	for(;;)
	{
	WriteBlock(20,24,120,32,65,pause);
	if (getchar()==13) return;
	}

}



//////敌人调整方向
void SetEnemyArrow(int eid)
{

int a;

a=rand()%4;
en[eid].arrow=a;
en[eid].xspeed=0;
en[eid].yspeed=0;
if( en[eid].style==1)
{
	if(a==0) en[eid].yspeed=-2;
	if(a==1) en[eid].yspeed=2;
	if(a==2) en[eid].xspeed=-2;
	if(a==3) en[eid].xspeed=2;	
}
else
{
	if(a==0) en[eid].yspeed=-1;
	if(a==1) en[eid].yspeed=1;
	if(a==2) en[eid].xspeed=-1;
	if(a==3) en[eid].xspeed=1;
}
}




//敌人调整方向



//设定敌人的出现
void SetEnemy()
{

for(xun=1;xun<=ec;xun++)
{
	if (en[xun].state==0 && en[xun].showtime==0) 
	{
	en[xun].x=enemyshowx[enemyshowid];
	en[xun].y=0;
	en[xun].state=0;

	en[xun].style=rand()%3;
	SetEnemyArrow(xun);	
	en[xun].showtime=showtimemax;
	enemyshowid=enemyshowid+1;
	if (en[xun].style==0)
	 {en[xun].life=1;
	 	en[xun].movesleep=0;
	 	en[xun].movesleepmax=1;
	 	en[xun].earrrnd=14;
	 }
	 	
	if (en[xun].style==1)
	 {en[xun].life=1;
	 en[xun].movesleep=0;
	 	en[xun].movesleepmax=0;	 
		en[xun].earrrnd=18;	 	
	 }
	 
	if (en[xun].style==2)
	{ en[xun].life=3;
	 en[xun].movesleep=0;
	 	en[xun].movesleepmax=1;	 
	 	en[xun].earrrnd=22;	 	
	}
	

	
	if (enemyshowid>2 ) enemyshowid=0;

	break;
}


}
}
//设定敌人的出现
int SetPlayer()
{
	supertime=140;
	mx=48;
	my=72;
	mauto=0;//小人当前状态为人工控制状态
	mstate=0;//小人当前的状态为停止状态
}

void NextRound()
{
supertime=0;
pausetime=0;
basetime=0;
pg.state=0;

for (xun=1;xun<=egc;xun++)
{
eg[xun].state=0;

}
for (xun=1;xun<=4;xun++)
{
b[xun].state=0;
}

for(xun=1;xun<=3;xun++)
{

en[xun].state=0;
en[xun].x=0;
en[xun].y=0;
en[xun].state=0;
en[xun].xspeed=0;
en[xun].yspeed=0;
en[xun].showtime=0;
}

lastenemy=20;
enemyshowid=0;


for(xun=1;xun<=ec;xun++)
{
SetEnemy();
}

itemstate=0;
SetPlayer();
}




int CheckEnemy()
{
if (RCtime>0 || NRtime>0) return 0;
			lastenemy=lastenemy-1;
			if (lastenemy<0) lastenemy=0;
			DrawInfo();
			if (lastenemy<=0)
			{
			
				if (en[0].state==0 && en[1].state==0 && en[2].state==0 &&en[0].showtime==0 && en[1].showtime==0 && en[2].showtime==0)
				{

					Round=Round+1;
					if (Round>roundmax) 
					{
						RCtime=RCtimeMax;
					}
					else
					{
						NRtime=NRtimeMax;
					}
				}	
					
			}
			else
			{

			SetEnemy();
			}
}
//敌人发射子弹
void EnemyShoot(int etx,int ety,int arrow)
{
	int a;
if (pausetime>0) return;

	a=rand()%3;
	if (a==1)
	{
	for (xun1=1;xun1<=egc;xun1++)
	{
		if (eg[xun1].state==0)
		{
			eg[xun1].state=1;
			eg[xun1].arrow=arrow;
			eg[xun1].x=etx;
			eg[xun1].y=ety;
			eg[xun1].xspeed=egxset[arrow+1];
			eg[xun1].yspeed=egyset[arrow+1];
			eg[xun1].sleep=0;
			break;
			
		}
	}
	}

}
////////////////敌人发射子弹


void main()
{
hitblockx[0]=0;
hitblocky[0]=0;

hitblockx[1]=0;
hitblocky[1]=4;

hitblockx[2]=0;
hitblocky[2]=0;

hitblockx[3]=4;
hitblocky[3]=0;


pgxset[1]=0;
pgyset[1]=-8;

pgxset[2]=0;
pgyset[2]=8;

pgxset[3]=-8;
pgyset[3]=0;

pgxset[4]=8;
pgyset[4]=0;

egxset[1]=0;
egyset[1]=-8;

egxset[2]=0;
egyset[2]=8;

egxset[3]=-8;
egyset[3]=0;

egxset[4]=8;
egyset[4]=0;



enemyshowx[0]=0;
enemyshowx[1]=64;
enemyshowx[2]=136;
lastenemy=20;
enemyshowid=0;

ClearScreen();
WriteBlock(5,20,40,40,1,WAWA);
TextOut(40,0," 电脑蛙蛙作品 ",2);
TextOut(54,24,"程序:郝新利",1);
TextOut(54,44,"QQ:64107764",1);
TextOut(4,64,"Mail:haoxinli1234@163.com",1);
Refresh();
MakeDir("/LavaData");
ReadConfig();
getchar();



WriteBlock(0,0,160,80,1,title);
Refresh();
getchar();
newgame:
CheckKey(128);


Round=0;
life=3;
gunlevel=0;
enemyshowid=0;
selid=0;

mainmenu[0].x=36;
mainmenu[0].y=24;
mainmenu[0].state=2;

mainmenu[1].x=90;
mainmenu[1].y=24;
mainmenu[1].state=1;


mainmenu[2].x=36;
mainmenu[2].y=38;
mainmenu[2].state=1;

mainmenu[3].x=90;
mainmenu[3].y=38;
mainmenu[3].state=1;


mainmenu[4].x=36;
mainmenu[4].y=52;
mainmenu[4].state=1;

mainmenu[5].x=90;
mainmenu[5].y=52;
mainmenu[5].state=1;




//游戏的主菜单
labmainmenu:
ShowMenu();
for (;;)
{

WriteBlock(0,0,160,80,1,menu);
	for (xun=0;xun<=5;xun++)
	{
		TextOut(mainmenu[xun].x,mainmenu[xun].y,maininfo[xun],mainmenu[xun].state);
	}
	
	Refresh();

	key=getchar();
	
	if (key==(KEY_LEFT))
	{
		mainmenu[selid].state=1;
		selid=selid-1;
		if (selid<0) selid=0;
		mainmenu[selid].state=2;
	}
	if (key==(KEY_RIGHT))
	{
		mainmenu[selid].state=1;
		selid=selid+1;
		if (selid>5) selid=5;
		mainmenu[selid].state=2;	
	}	
	if (key==(KEY_UP))
	{
		mainmenu[selid].state=1;
		if (selid>1) selid=selid-2;
	
		mainmenu[selid].state=2;		
	}
	if (key==(KEY_DOWN))
	{
		mainmenu[selid].state=1;
		if (selid<4) selid=selid+2;

		mainmenu[selid].state=2;	
	}
	if (key==27)
	{
	ClearScreen();
	TextOut(38,20,"感谢你的赏玩!",1);
	TextOut(12,45,"请期待蛙蛙的更精彩作品!",1);
	TextOut(8,65,"请按 [网络] 等功能键返回!",1);
	Refresh();

	getchar();
		exit(0);
	}
	
	if (key==13) break;
}
///////游戏的主菜单


if (selid==5) 
{
ClearScreen();
TextOut(38,20,"感谢你的赏玩!",1);
TextOut(12,45,"请期待蛙蛙的更精彩作品!",1);
TextOut(8,65,"请按 [网络] 等功能键返回!",1);
getchar();
exit(0);
}
if (selid==1)
{
	for (;;)
	{
	
	WriteBlock(0,0,160,80,1,menu);
	
		TextOut(48,25,"难度",1);
		TextOut(48,40,"速度",1);
		TextOut(48,54,"场景",1);
		if (level==0)
		{
			TextOut(80,25,"容易",2);
			TextOut(110,25,"困难",1);
		}
		else
		{
			TextOut(80,25,"容易",1);
			TextOut(110,25,"困难",2);	
		}
		
		if (mapmode==0)
		{
			TextOut(80,54,"系统",2);
			TextOut(110,54,"自定",1);			
		}
		else
		{
			TextOut(80,54,"系统",1);
			TextOut(110,54,"自定",2);		
		}
		
		
	
		Rectangle(80,40,133,50,1);
		Block(82,42,(7-(delaytime/20))*7 +82,48,1);
		WriteBlock(38,27+optionid*15,8,8,1,show1);
	
	
		
		Refresh();
	
		key=getchar();
		
		if (key==(KEY_LEFT))
		{
			if (optionid==0)
			{
				level=0;
				ec=level+2;
			
			}
			if (optionid==1)
			{
	
				delaytime=delaytime+20;
				if (delaytime>140) delaytime=140;		
	
			}
			if (optionid==2)
			{
				mapmode=0;
			}
			
		}
		if (key==(KEY_RIGHT))
		{
			if (optionid==0)
			{
				level=1;
				ec=level+2;
			
			}
		if (optionid==1)
			{
	
				delaytime=delaytime-20;
				if (delaytime<0) delaytime=0;
			}
			if (optionid==2)
			{
				mapmode=1;
			}			
		}	
		if (key==(KEY_UP))
		{
				optionid=optionid-1;		
				if (optionid<0) optionid=0;
		}
		if (key==(KEY_DOWN))
		{
				optionid=optionid+1;	
				if (optionid>2) optionid=2;
		}
		if (key==27) 
		{
		HideMenu();
		goto labmainmenu;
		}
		if (key==13)
		{ 

		if (mapmode==0)
		{
							roundmax=roundmaxsave;
		}
		else
		{
			if (myroundmax>=0)
			{
				roundmax=myroundmax;
			}
			else
			{
				mapmode=0;
				roundmax=roundmaxsave;
			}		
		}
		HideMenu();
		SaveConfig();
    	goto labmainmenu;}
	}
}
///////游戏的设定
if (selid==3)
{
HideMenu();
WriteBlock(0,0,160,80,1,menusize);
TextOut(8,20,"        炸弹超人",1);
TextOut(8,34,"  电脑蛙蛙的又一力作!",1);
TextOut(8,48,"移植于FC的同名作品,挑战",1);
TextOut(8,62,"Lava的速度极限,敬请期待!",1);
Refresh();
getchar();
WriteBlock(0,0,160,80,1,bomman);
Refresh();
getchar();
goto labmainmenu;
}
if (selid==4)
{
HideMenu();
WriteBlock(0,0,160,80,1,menusize);
TextOut(8,20,"将军，欢迎您指挥这场战斗",1);
TextOut(8,34,"您将指挥我们最强的坦克",1);
TextOut(8,48,"[天启] 号捍卫我们的领土",1);
TextOut(8,62,"下面是特工所得到的情报!",1);
Refresh();
if (getchar()==27) goto labmainmenu;

WriteBlock(0,0,160,80,1,menusize);
WriteBlock(22,22,8,8,1,tank[0]);
TextOut(32,20," 如何控制坦克",1);
TextOut(8,34,"通过键盘上的方向键可以",1);
TextOut(8,48,"控制坦克向四周行走,[Z]",1);
TextOut(8,62,"键控制坦克开火!",1);
Refresh();
if (getchar()==27) goto labmainmenu;


WriteBlock(0,0,160,80,1,menusize);
WriteBlock(22,22,8,8,1,item[0]);
TextOut(32,20," 基地能量护盾",1);
TextOut(8,34,"该援助可以让我方的基地",1);
TextOut(8,48,"在一定的时间范围内受到",1);
TextOut(8,62,"最强的无敌保护!",1);
Refresh();
if (getchar()==27) goto labmainmenu;

WriteBlock(0,0,160,80,1,menusize);
WriteBlock(22,22,8,8,1,item[1]);
TextOut(32,20,"    核弹攻击",1);
TextOut(8,34,"我方的核武器攻击可以让敌",1);
TextOut(8,48,"方投入到战场的所有作战单",1);
TextOut(8,62,"位受到毁灭性的打击!",1);
Refresh();
if (getchar()==27) goto labmainmenu;


WriteBlock(0,0,160,80,1,menusize);
WriteBlock(22,22,8,8,1,item[2]);
TextOut(32,20,"    新型装备",1);
TextOut(8,34,"我方坦克可以通过装备新型",1);
TextOut(8,48,"的武器最大限度的提高子弹",1);
TextOut(8,62,"的穿透和攻击能力!",1);
Refresh();
if (getchar()==27) goto labmainmenu;


WriteBlock(0,0,160,80,1,menusize);
WriteBlock(22,22,8,8,1,item[3]);
TextOut(32,20,"    无敌护盾",1);
TextOut(8,34,"无敌护盾可以让我方坦克在",1);
TextOut(8,48,"一定的时间内具有超强装甲",1);
TextOut(8,62,"可完全抵御敌人的任何攻击",1);
Refresh();
if (getchar()==27) goto labmainmenu;


WriteBlock(0,0,160,80,1,menusize);
WriteBlock(22,22,8,8,1,item[4]);
TextOut(32,20,"    后方支援",1);
TextOut(8,34,"基地再增派一辆优秀的天启",1);
TextOut(8,48,"投入到整场战斗当中.",1);
TextOut(8,62,"给予敌人最强大的攻击!",1);
Refresh();
if (getchar()==27) goto labmainmenu;

WriteBlock(0,0,160,80,1,menusize);
WriteBlock(22,22,8,8,1,item[5]);
TextOut(32,20,"    时空静止器",1);
TextOut(8,34,"让时间有短时间的静止,在",1);
TextOut(8,48,"此期间我方的坦克可以对敌",1);
TextOut(8,62,"方的坦克进行有效的打击!",1);
Refresh();
if (getchar()==27) goto labmainmenu;

WriteBlock(0,0,160,80,1,menusize);
WriteBlock(22,22,8,8,1,enemya[0]);
TextOut(32,20,"    天鹰坦克",1);
TextOut(8,34,"此敌方坦克速度一般,但是",1);
TextOut(8,48,"他的炮火射击频率相当惊人",1);
TextOut(8,62,"对建筑物有很强的破坏性!",1);
Refresh();
if (getchar()==27) goto labmainmenu;

WriteBlock(0,0,160,80,1,menusize);
WriteBlock(22,22,8,8,1,enemyb[0]);
TextOut(32,20,"    沙漠银狐",1);
TextOut(8,34,"此敌方坦克是以移动速度快",1);
TextOut(8,48,"著称,他惊人的移动速度会",1);
TextOut(8,62,"对我方造成较大的威胁!",1);
Refresh();
if (getchar()==27) goto labmainmenu;


WriteBlock(0,0,160,80,1,menusize);
WriteBlock(22,22,8,8,1,enemyc[0]);
TextOut(32,20,"    精英卫队",1);
TextOut(8,34,"此敌方坦克无论是速度还",1);
TextOut(8,48,"是射击能力上都相当均衡",1);
TextOut(8,62,"是敌方得意的进攻单位!",1);
Refresh();
if (getchar()==27) goto labmainmenu;


WriteBlock(0,0,160,80,1,menusize);
TextOut(8,20,"将军你可以在游戏里面通过",1);
TextOut(8,34,"P键进行暂停,通过S键保存",1);
TextOut(8,48,"R键可读取保存的战役场景",1);
TextOut(8,62,"        祝你好运!",1);
Refresh();
if (getchar()==27) goto labmainmenu;

goto labmainmenu;
}





if (selid==0)
{
ec=level+2;
NextRound();
 if (RoundFirst()==1)  
 {
 
 goto newgame;
 }
 HideMenu();
 ClearSence();//初始化场景
}
if (selid==2)
{
ReadGame(0);
 
}
gamestart:
ClearScreen();
DrawSence();


for (;;){

if (RCtime>0)
{
RCtime=RCtime-1;
if (RCtime==0) 
	{
		RoundInfo(1);
		goto newgame;
	}

}
if (NRtime>0)
{
NRtime=NRtime-1;
if (NRtime==0) 
	{	RoundInfo(0);
		NextRound();
		ClearSence();
	    DrawSence();
	}

}

if (pausetime>0) 
{
	pausetime=pausetime-1;
}
if (basetime>0) 
{
	basetime=basetime-1;
	if (basetime==0)
	{
	
		sence[7][9]=2;
		sence[7][8]=2;
		sence[8][8]=2;
		sence[9][8]=2;
		sence[9][9]=2;
		WriteBlock(56,72,8,8,1,block[2]);
		WriteBlock(56,64,8,8,1,block[2]);	
		WriteBlock(64,64,8,8,1,block[2]);
		WriteBlock(72,64,8,8,1,block[2]);
		WriteBlock(72,72,8,8,1,block[2]);
	}

}

//敌人子弹射击 
for (xun=1;xun<=egc;xun++){
	if (eg[xun].state!=0)
	{
	
		eg[xun].sleep=eg[xun].sleep+1;
		if (eg[xun].sleep==2)
		{
			eg[xun].sleep=0;
			WriteBlock(eg[xun].x,eg[xun].y,8,8,1,picnull);
			
			eg[xun].x=eg[xun].x+eg[xun].xspeed;
			eg[xun].y=eg[xun].y+eg[xun].yspeed;
	 		BV = GunHitBlock(eg[xun].x, eg[xun].y, eg[xun].arrow,xun,0);
	        if (BV ==-1) 

	        {
			if (eg[xun].arrow==2 || eg[xun].arrow==3) WriteBlock(eg[xun].x,eg[xun].y,8,8,1,pgun2);
			if (eg[xun].arrow==0 || eg[xun].arrow==1) WriteBlock(eg[xun].x,eg[xun].y,8,8,1,pgun1);

			}

		   		

		}
		if (eg[xun].x>=pg.x-8 && eg[xun].x<=pg.x+8 && eg[xun].y>=pg.y-8 && eg[xun].y<=pg.y+8 && pg.state==1)
		{
			pg.state=0;
			eg[xun].state=0;
		WriteBlock(eg[xun].x,eg[xun].y,8,8,1,picnull);
		WriteBlock(pg.x,pg.y,8,8,1,picnull);

			SetBomb(pg.x,pg.y);
			
		}
		
		if (eg[xun].x>mx-6 && eg[xun].x<mx+6 && eg[xun].y>my-6 && eg[xun].y<my+6 && supertime==0 && Dtime==0)
		{


			SetBomb(mx,my);
			gunlevel=0;
			life=life-1;
			if (life==-1)
			{
				life=0;
				Dtime=DtimeMax;
			}
			else
			{
			SetPlayer();
			DrawInfo();
			}
			
		}				
		
	}

}

//敌人子弹射击 




//PlayerWeapon


	if (pg.state!=0)
	{

		 WriteBlock(pg.x,pg.y,8,8,1,picnull);


		pg.x=pg.x+pg.xspeed;
		pg.y=pg.y+pg.yspeed;
		       
		
 		BV = GunHitBlock(pg.x, pg.y, pg.arrow,xun,1);
 
 		if (BV==-1)
		{

				
		 		if (pg.arrow==2 || pg.arrow==3) WriteBlock(pg.x,pg.y,8,8,1,pgun2);
				if (pg.arrow==0 || pg.arrow==1) WriteBlock(pg.x,pg.y,8,8,1,pgun1);

 		}


		


		
	}



////////////////////
if (itemstate==1)
{
	if (itemtime%6<3)
	{
	WriteBlock(itemx,itemy,8,8,1,item[itemstyle]);
	}
	else
	{
		WriteBlock(itemx,itemy,8,8,1,picnull);
	}
	itemtime=itemtime-1;
	if (itemtime==0)
	{
		itemstate=0;
		WriteBlock(itemx,itemy,8,8,1,picnull);
	}
}

////////////爆炸的部分
for (xun=1;xun<=bc;xun++)
{
	if (b[xun].state!=0)
	{
		WriteBlock(b[xun].x,b[xun].y,8,8,1,picnull);
		if (b[xun].id==5) 
		{
		b[xun].state=0;
		
		goto NoBomb;
		}
		WriteBlock(b[xun].x,b[xun].y,8,8,1,bomb[b[xun].id]);
		b[xun].id=b[xun].id+1;
		
	}
	NoBomb:

}


///////////爆炸的部分
//游戏者的控制部分/////////////////////////////////////////////

key=CheckKey(128);


if (Dtime>0)
{
key=0;
	Dtime=Dtime-1;
	if (Dtime==0)
	{
	GameOver();	
	goto newgame;}
}
 if (Dtime==0)  WriteBlock(mx,my,8,8,1,picnull);
if (key==KEY_Z && mx%8==0 && my%8==0) 
{

	if (pg.state==0)
	{
		pg.arrow=mstate;
		pg.state=1;
		pg.x=mx;
		pg.y=my;
		pg.xspeed=pgxset[mstate+1];
		pg.yspeed=pgyset[mstate+1];		
	}


}
if (key==115)
{

	SaveGame();
}
if(key==114)
{
	if (ReadGame(1)==0)	DrawSence();
}
	
	if (key!=KEY_UP && key!=KEY_DOWN && key!=KEY_RIGHT && key!=KEY_LEFT) arrowsleep=0;
	if (mauto==0){
	
		if (key==KEY_UP && my>0)
		{
		
			if (mstate==0 && arrowsleep==0)
			{
			arrowsleep=0;
			if (CheckBlock (mx, my, 0,-mspeed, 1,0) ==-1) mauto=1;
			}
			if (mstate==0 && arrowsleep>0) arrowsleep=arrowsleep-1;
			if (mstate!=0) 
			{
			arrowsleep=1;
			mstate=0;
			}
			
			
			
		}
		if (key==KEY_DOWN && my<72)
		{
			if (mstate==1 && arrowsleep==0)
			{
			arrowsleep=0;
			if (CheckBlock (mx, my, 0,mspeed, 1,0) ==-1)	mauto=1;
			}
			if (mstate==1 && arrowsleep>0) arrowsleep=arrowsleep-1;
			if (mstate!=1) 
			{
			arrowsleep=1;
			mstate=1;
			}
		}
		if (key==KEY_LEFT && mx>0)
		{
			if (mstate==2 && arrowsleep==0)
			{
			arrowsleep=0;
			if (CheckBlock (mx, my, -mspeed,0, 1,0) ==-1) mauto=1;
			}
			if (mstate==2 && arrowsleep>0) arrowsleep=arrowsleep-1;
			if (mstate!=2) 
			{
			arrowsleep=1;
			mstate=2;
			}			
		}
		if (key==KEY_RIGHT)
		{
			if (mstate==3 && arrowsleep==0)
			{
			arrowsleep=0;
			if (CheckBlock (mx, my, mspeed,0, 1,0)==-1) mauto=1;
			}
			if (mstate==3 && arrowsleep>0) arrowsleep=arrowsleep-1;
			if (mstate!=3) 
			{
			arrowsleep=1;
			mstate=3;
			}
		}
		if (key==ESC)
		{
			getchar();
			goto newgame;
		}
		
		if (key==112)
		{
			GamePause();
		}

	}
	
	else
	{
  		
  
       if (mstate==0) my=my-mspeed;// CheckBlock(mx, my, 0, -mspeed, 1,0);

       if (mstate==1) my=my+mspeed;//CheckBlock(mx, my, 0, mspeed, 1,0);

       if (mstate==2) mx=mx-mspeed;//CheckBlock (mx, my, -mspeed, 0, 1,0);

       if (mstate==3) mx=mx+mspeed;//CheckBlock (mx, my,  mspeed,0, 1,0);

       if (mx % 8 == 0  && my % 8 == 0){ 
   
        mauto = 0;
    }
   }

if (mx>itemx-8 && mx<itemx+8 && my>itemy-8 && my<itemy+8 && itemstate==1)
{
	WriteBlock(itemx,itemy,8,8,1,picnull);
	itemstate=0;
	if (itemstyle==0)
	{
		basetime=basetimemax;
		sence[7][9]=3;
		sence[7][8]=3;
		sence[8][8]=3;
		sence[9][8]=3;
		sence[9][9]=3;
		WriteBlock(56,72,8,8,1,block[3]);
		WriteBlock(56,64,8,8,1,block[3]);	
		WriteBlock(64,64,8,8,1,block[3]);
		WriteBlock(72,64,8,8,1,block[3]);
		WriteBlock(72,72,8,8,1,block[3]);							
				
	}
	
	if (itemstyle==1)
	{
		for (xun=1;xun<=ec;xun++)
		{
			if (en[xun].state==1)
			{
			en[xun].state=0;
			SetBomb(en[xun].x,en[xun].y);
			CheckEnemy() ;
			}
			//if (CheckEnemy()==1) goto newgame;

			
		}
	}
	
	
	if (itemstyle==2)
	{
		gunlevel=gunlevel+1;
		if (gunlevel>2) gunlevel=2;
	}
	
	if (itemstyle==3)
	{
		supertime=supertimemax;
	}
	
	if (itemstyle==4)
	{
		life=life+1;
		if (life>9) life=9;
		DrawInfo();
	}
				
	if (itemstyle==5)
	{
		pausetime=pausetimemax;
	}
	

}

 if (Dtime==0) WriteBlock(mx,my,8,8,1,tank[mstate]);
if (supertime>0) 
{
	supertime=supertime-1;
	if (supertime %4<2) Rectangle(mx,my,mx+7,my+7,1);
}
//游戏者的控制部分/////////////////////////////////////////////

//敌人部分/////////////////////////////////////////////////////
for (xun=1;xun<=ec;xun++)
{//敌人全部循环

	if (en[xun].state==0 && en[xun].showtime>0)
	{
		en[xun].showtime--;
		if (en[xun].showtime<showtimehalf)
		{
			WriteBlock(en[xun].x,en[xun].y,8,8,1,picnull);
			if (en[xun].showtime %2==1)	WriteBlock(en[xun].x,en[xun].y,8,8,1,show1);	
			if (en[xun].showtime %2==0)	WriteBlock(en[xun].x,en[xun].y,8,8,1,show2);		
		}
		if (en[xun].showtime==0)
		{
				en[xun].state=1;
				en[xun].style=rand()%3;
		
		}
		
	}

	if (en[xun].state!=0 )
	{//敌人是活动状态
		en[xun].movesleep=en[xun].movesleep+1;
		WriteBlock(en[xun].x,en[xun].y,8,8,1,picnull);

			eblock=CheckBlock (en[xun].x, en[xun].y,en[xun].xspeed,en[xun].yspeed, 0,xun);
	
		if (en[xun].x % 8==0 && en[xun].y %8==0)
		{
			if (eblock==20) SetEnemyArrow(xun);
			
			if (rand()% en[xun].earrrnd==0) SetEnemyArrow(xun);
			EnemyShoot (en[xun].x,en[xun].y,en[xun].arrow);
	
		}
		if (eblock>-1 )
		{
			SetEnemyArrow(xun);
		}
		
		
		//绘制敌人/////////////////////////////////////////////////

		if (en[xun].style==0)
		{
		 	WriteBlock(en[xun].x,en[xun].y,8,8,1,enemya[en[xun].arrow]);
		}
		if (en[xun].style==1)
		{
			WriteBlock(en[xun].x,en[xun].y,8,8,1,enemyb[en[xun].arrow]);
		}
		if (en[xun].style==2)
		{
			WriteBlock(en[xun].x,en[xun].y,8,8,1,enemyc[en[xun].arrow]);
		}

		if ( pg.state==1 && en[xun].x>pg.x-7 && en[xun].x<pg.x+7  && en[xun].y>pg.y-7 && en[xun].y<pg.y+7 )
		{
			pg.state=0;
			WriteBlock(pg.x,pg.y,8,8,1,picnull);

			en[xun].state=0;
			en[xun].life=0;
			SetBomb(en[xun].x,en[xun].y);


			SetItem(en[xun].x,en[xun].y);
			CheckEnemy();

		}							
		//绘制敌人///////////////////////////////////////////

	}//敌人是活动状态


}//敌人全部循环
//敌人部分/////////////////////////////////////////////////////




	Refresh();
//	Line(144,0,144,79,2);        
if (delaytime>0)	Delay(delaytime);
}}







